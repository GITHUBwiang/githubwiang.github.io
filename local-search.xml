<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue3 基础</title>
    <link href="/2022/12/28/Vue3-%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/12/28/Vue3-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3-基础"><a href="#Vue3-基础" class="headerlink" title="Vue3 基础"></a>Vue3 基础</h1><p>Vue3：<a href="https://cn.vuejs.org/%E3%80%82">https://cn.vuejs.org/。</a></p><h2 id="创建-Vue3-工程"><a href="#创建-Vue3-工程" class="headerlink" title="创建 Vue3 工程"></a>创建 Vue3 工程</h2><h3 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h3><p>使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue create hello-vue3-cli<br></code></pre></td></tr></table></figure><p>选择 <code>[Vue 3]</code> 即可</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202301/01215907.png" alt="image-20221231114751200"></p><h3 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h3><p>官网：<a href="https://cn.vitejs.dev/%E3%80%82">https://cn.vitejs.dev/。</a></p><p>vite 优势：</p><ul><li>开发环境中，无需打包操作，可快速冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成，</li></ul><p>使用如下命令（<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application%EF%BC%89">https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init vue@latest<br></code></pre></td></tr></table></figure><p>按命令行提示填入项目名称和选择可选功能即可。</p><p>也可以使用如下命令（<a href="https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project%EF%BC%89">https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest vue-vite -- --template vue<br></code></pre></td></tr></table></figure><h2 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 <code>Composition API</code></h2><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a><code>setup</code></h2><p><code>setup</code> 是 Vue3 中一个新配置项，值为一个函数。</p><p>组件中所用到的数据方法等均要配置在 <code>setup</code> 中。</p><p><code>setup</code> 函数的两种返回值：</p><ul><li><p>返回对象，则对象中的属性方法在模板中可以直接使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;一个人的信息&lt;&#x2F;h1&gt;<br>  &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt;<br>  &lt;h2&gt;年龄：&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt;<br>  &lt;button @click&#x3D;&quot;sayHello&quot;&gt;说话&lt;&#x2F;button&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#39;App&#39;,<br>  components: &#123;&#125;,<br>  setup() &#123;<br>    &#x2F;&#x2F; 数据<br>    let name &#x3D; &#39;张三&#39;<br>    let age &#x3D; 18<br><br>    &#x2F;&#x2F; 方法<br>    function sayHello() &#123;<br>      alert(&#96;姓名：$&#123;name&#125;，年龄：$&#123;age&#125;&#96;)<br>    &#125;<br><br>    return &#123;<br>      name,<br>      age,<br>      sayHello,<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>返回一个渲染函数，则可以自定义展示内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;h&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> h(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-string">&#x27;渲染函数&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><code>setup</code> 的执行时机，在 <code>beforeCreate</code> 之前执行，此时 <code>this</code> 的值是 <code>undifined</code>。</p><p><code>setup</code> 的参数</p><ul><li><code>props</code>：值为对象，包含组件外部传递，且组件内使用 <code>props</code> 配置项声明接收的属性。</li><li><code>context</code>：上下文对象：<ul><li><code>attrs</code>：值对对象，包含组件外部传递，但没有在 <code>props</code> 配置中声明接收的属性。</li><li><code>slots</code>：收到的插槽内容。</li><li><code>emit</code>：触发自定义事件的函数，相当于 <code>this.$emit</code>。</li></ul></li></ul><h3 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a><code>ref</code> 函数</h3><p>作用：定义一个响应式数据。</p><p>语法：<code>const xxx = ref(initValue)</code></p><ul><li>创建一个包含响应式数据的引用对象。</li><li>JavaScript 中操作数据：<code>xxx.value</code>。</li><li>模版中读取数据不需要 <code>.value</code>，直接使用 <code>&lt;div&gt;&#123;&#123; xxx &#125;&#125;&lt;/div&gt;</code></li></ul><p>备注：</p><ul><li>接收的参数可以是基本类型，也可以是对象类型。</li><li>基本类型的数据实现响应式依然借助 <code>Object.defineProperty()</code> 的 <code>get</code> 与 <code>set</code> 完成。</li><li>对象类型的数据实现响应式借助 Vue3 中的 <code>reactive</code> 函数。</li></ul><h3 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive 函数"></a><code>reactive</code> 函数</h3><p>作用：定义一个对象类型的响应式数据。</p><p>语法：<code>const obj = reactive(srcObj)</code> 接收一个对象或数组，返回一个代理对象（<code>Proxy</code> 对象）。</p><p><code>reactive</code> 定义的响应式数据是“深层次的”。</p><p>内部基于 ES6 的 <code>Proxy</code> 实现，通过代理对象操作源对象的内部数据。</p><h3 id="Vue3-响应式原理"><a href="#Vue3-响应式原理" class="headerlink" title="Vue3 响应式原理"></a>Vue3 响应式原理</h3><p>通过 <code>Proxy</code> 拦截对象中任意属性的变化，包括属性值的读写、属性的添加删除等。</p><p>通过 <code>Reflect</code> 对源对象的属性进行操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>  name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  age: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(person, &#123;<br>  get(target, propName) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取 p 的 <span class="hljs-subst">$&#123;propName&#125;</span> 属性`</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, propName)<br>  &#125;,<br>  set(target, propName, newValue) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`修改或增加 p 的 <span class="hljs-subst">$&#123;propName&#125;</span> 属性`</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, propName, newValue)<br>  &#125;,<br>  deleteProperty(target, propName) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`删除 p 的 <span class="hljs-subst">$&#123;propName&#125;</span> 属性`</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.deleteProperty(target, propName)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h3><h4 id="computed-方法"><a href="#computed-方法" class="headerlink" title="computed 方法"></a><code>computed</code> 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;一个人的信息&lt;&#x2F;h1&gt;<br>  姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;person.firstName&quot;&gt;<br>  名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;person.lastName&quot;&gt;<br>  &lt;br&gt;<br>  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;person.fullName&quot;&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import &#123;reactive, computed&#125; from &quot;vue&quot;;<br><br>export default &#123;<br>  name: &#39;Demo&#39;,<br>  setup() &#123;<br>    let person &#x3D; reactive(&#123;<br>      firstName: &#39;张&#39;,<br>      lastName: &#39;三&#39;<br>    &#125;)<br><br>    &#x2F;&#x2F; 计算属性（简写）<br>    &#x2F;&#x2F; person.fullName &#x3D; computed(() &#x3D;&gt; &#123;<br>    &#x2F;&#x2F;   return person.firstName + &#39;-&#39; + person.lastName<br>    &#x2F;&#x2F; &#125;)<br>    person.fullName &#x3D; computed(&#123;<br>      get() &#123;<br>        return person.firstName + &#39;-&#39; + person.lastName<br>      &#125;,<br>      set(value) &#123;<br>        let arr &#x3D; value.split(&#39;-&#39;);<br>        person.firstName &#x3D; arr[0]<br>        person.lastName &#x3D; arr[1]<br>      &#125;<br>    &#125;)<br><br>    return &#123;<br>      person,<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br><br></code></pre></td></tr></table></figure><h4 id="watch-方法"><a href="#watch-方法" class="headerlink" title="watch 方法"></a><code>watch</code> 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;reactive, ref, watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Demo&#x27;</span>,<br>  setup() &#123;<br>    <span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">let</span> msg = ref(<span class="hljs-string">&#x27;你好&#x27;</span>)<br><br>    <span class="hljs-comment">// 监视 ref 定义的一个响应式数据</span><br>    watch(sum, <span class="hljs-function">(<span class="hljs-params">newVal, oldVal</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum 改变&#x27;</span>, newVal, oldVal)<br>    &#125;)<br>    <span class="hljs-comment">// 监视 ref 定义的多个响应式数据</span><br>    watch([sum, msg], <span class="hljs-function">(<span class="hljs-params">newVal, oldVal</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum/msg 改变&#x27;</span>, newVal, oldVal)<br>    &#125;)<br><br>    <span class="hljs-keyword">let</span> person = reactive(&#123;<br>      name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>      age: <span class="hljs-number">18</span>,<br>      job: &#123;<br>        j1: &#123;<br>          salary: <span class="hljs-number">20</span><br>        &#125;<br>      &#125;<br>    &#125;)<br>    <span class="hljs-comment">// 监视 reactive 定义的响应式数据（深层监视），此处 newVal 和 oldVal 是相同的，因为它们是同一个对象</span><br>    watch(person, <span class="hljs-function">(<span class="hljs-params">newVal, oldVal</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person 改变&#x27;</span>, newVal, oldVal)<br>    &#125;)<br>    <span class="hljs-comment">// 监视 reactive 定时响应式数据中的某些属性</span><br>    watch(<span class="hljs-function">() =&gt;</span> person.job, <span class="hljs-function">(<span class="hljs-params">newVal, oldVal</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person job 改变&#x27;</span>, newVal, oldVal)<br>    &#125;, &#123;<br>      deep: <span class="hljs-literal">true</span><br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      sum,<br>      msg,<br>      person<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="watchEffect-函数"><a href="#watchEffect-函数" class="headerlink" title="watchEffect 函数"></a><code>watchEffect</code> 函数</h3><p><code>watchEffect</code> 会立即执行一遍回调函数，如果这时函数产生了副作用，Vue 会自动追踪副作用的依赖关系，自动分析出响应源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当 value 或 salary 变化时，再次执行回调</span><br>watchEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> x1 = sum.value<br>  <span class="hljs-keyword">const</span> x2 = person.job.j1.salary<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;watchEffect&#x27;</span>, x1, x2)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>配置式生命周期钩子</p><p><code>beforeDestroy</code> –&gt; <code>beforeUnmount</code>、<code>destroyed</code> –&gt; <code>Unmounted</code>。</p><p>组合式生命周期钩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>  ref, onBeforeMount, onMounted, onBeforeUpdate,<br>  onUpdated, onBeforeUnmount, onUnmounted<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Demo&#x27;</span>,<br>  setup() &#123;<br>    <span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment">// Composition API 生命周期</span><br>    onBeforeMount(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onBeforeMount&#x27;</span>)<br>    &#125;)<br>    onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onMounted&#x27;</span>)<br>    &#125;)<br>    onBeforeUpdate(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onBeforeUpdate&#x27;</span>)<br>    &#125;)<br>    onUpdated(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onUpdated&#x27;</span>)<br>    &#125;)<br>    onBeforeUnmount(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onBeforeUnmount&#x27;</span>)<br>    &#125;)<br>    onUnmounted(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onUnmounted&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      sum<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// beforeCreate() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;beforeCreate&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// created() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;created&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// beforeMount() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;beforeMount&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// mounted() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;mounted&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// beforeUpdate() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;beforeUpdate&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// updated() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;updated&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// beforeUnmount() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;beforeUnmount&#x27;)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-comment">// unmounted() &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;unmounted&#x27;)</span><br>  <span class="hljs-comment">// &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义-hook-函数"><a href="#自定义-hook-函数" class="headerlink" title="自定义 hook 函数"></a>自定义 <code>hook</code> 函数</h3><p>本质是一个函数，对 <code>setup</code> 函数中使用的 Composition API 进行封装。类似于 Vue2 中的 <code>mixin</code>，作用是复用代码，让 <code>setup</code> 中的逻辑更清晰。</p><p>在 <code>/src/hooks/usePoint.js</code> 中定义一个 <code>hook</code> 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;onBeforeUnmount, onMounted, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> point = reactive(&#123;<br>        x: <span class="hljs-number">0</span>,<br>        y: <span class="hljs-number">0</span><br>    &#125;)<br>    <span class="hljs-keyword">const</span> savePoint = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        point.x = e.pageX<br>        point.y = e.pageY<br>    &#125;;<br>    onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, savePoint)<br>    &#125;)<br>    onBeforeUnmount(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, savePoint)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> point<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在组件中使用 <code>hook</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> usePoint <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/hooks/usePoint&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Demo&#x27;</span>,<br>  setup() &#123;<br>    <span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">let</span> point = usePoint();<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      sum,<br>      point<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="toRef-函数"><a href="#toRef-函数" class="headerlink" title="toRef 函数"></a><code>toRef</code> 函数</h3><p>作用：创建一个 <code>ref</code> 对象（<code>ObjectRefImpl</code>），其 <code>value</code> 值执行另一个对象中的属性。</p><p>语法：<code>let salary = toRef(person.job.j1, &#39;salary&#39;)</code>或者 <code>let x = toRefs(person)</code>。</p><p>用于将响应式对象中的某些属性单独提供给外部使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h4&gt;&#123;&#123; person &#125;&#125;&lt;&#x2F;h4&gt;<br>  &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt;<br>  &lt;h2&gt;年龄：&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt;<br>  &lt;h2&gt;薪资：&#123;&#123; job.j1.salary &#125;&#125;&lt;&#x2F;h2&gt;<br>  &lt;button @click&#x3D;&quot;name +&#x3D; &#39;-&#39;&quot;&gt;修改姓名&lt;&#x2F;button&gt;<br>  &lt;button @click&#x3D;&quot;age++&quot;&gt;增长年龄&lt;&#x2F;button&gt;<br>  &lt;button @click&#x3D;&quot;salary++&quot;&gt;涨薪&lt;&#x2F;button&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import &#123;reactive, toRef, toRefs&#125; from &quot;vue&quot;;<br><br>export default &#123;<br>  name: &#39;Demo&#39;,<br>  setup() &#123;<br>    let person &#x3D; reactive(&#123;<br>      name: &#39;张三&#39;,<br>      age: 18,<br>      job: &#123;<br>        j1: &#123;<br>          salary: 20<br>        &#125;<br>      &#125;<br>    &#125;)<br><br>    &#x2F;&#x2F; ObjectRefImpl<br>    let salary &#x3D; toRef(person.job.j1, &#39;salary&#39;)<br>    let x &#x3D; toRefs(person)<br>    return &#123;<br>      person,<br>      salary,<br>      ...x<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h2 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 <code>Composition API</code></h2><p><code>shallowReactive()</code>：<code>reactive()</code> 的浅层作用形式，只有根级别的属性是响应式的。</p><p><code>shallowRef()</code>：<code>ref()</code>  的浅层作用形式，不会被深层递归地转为响应式只有对 <code>.value</code> 的访问是响应式的。</p><p><code>readonly()</code>：接收一个对象或者 <code>ref</code>，返回一个原值的只读代理。</p><p><code>shallowReadonly()</code>：与 <code>readonly()</code> 相比，只有根层级的属性变为只读。</p><p><code>toRaw()</code>：根据一个 Vue 创建的代理返回其原始对象，可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。</p><p><code>markRaw()</code>：将一个对象标记为不可被转为代理。</p><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a><code>customRef</code></h3><p>作用：创建一个自定义的 <code>ref</code>，显式声明对其依赖追踪和更新触发的控制方式。</p><p>文档地址：<a href="https://cn.vuejs.org/api/reactivity-advanced.html#customref%E3%80%82">https://cn.vuejs.org/api/reactivity-advanced.html#customref。</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个防抖 ref</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myRef</span>(<span class="hljs-params">value, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer<br>  <span class="hljs-keyword">return</span> customRef(<span class="hljs-function">(<span class="hljs-params">track, trigger</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      get() &#123;<br>        track()<br>        <span class="hljs-keyword">return</span> value<br>      &#125;,<br>      set(newVal) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          value = newVal<br>          trigger()<br>        &#125;, delay)<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">let</span> keyword = myRef(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure><h3 id="响应式数据判断"><a href="#响应式数据判断" class="headerlink" title="响应式数据判断"></a>响应式数据判断</h3><p><code>isRef()</code>：检查某个值是否为 <code>ref</code>。</p><p><code>isReactive()</code>：检查一个对象是否是由 <code>reactive()</code> 或 <code>shallowReactive()</code> 创建的代理。</p><p><code>isReadonly()</code>：检查传入的值是否为只读对象，通过 <code>readonly()</code> 和 <code>shallowReadonly()</code> 创建的代理都是只读的。</p><p><code>isProxy()</code>：检查一个对象是否是由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或 <code>shallowReadonly()</code> 创建的代理。</p><h3 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a><code>provide</code> 和 <code>inject</code></h3><p>作用：实现祖和后代组件间通信。</p><p>父组件使用 <code>provide</code> 提供数据，后代组件中使用 <code>inject</code> 注入数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">let</span> car = reactive(&#123;<br>  name: <span class="hljs-string">&#x27;奔驰&#x27;</span>,<br>  price: <span class="hljs-string">&#x27;40W&#x27;</span><br>&#125;)<br>provide(<span class="hljs-string">&#x27;car&#x27;</span>, car)<br><br><span class="hljs-comment">// 后代组件</span><br><span class="hljs-keyword">let</span> car = inject(<span class="hljs-string">&#x27;car&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a><code>Fragment</code></h3><p>在 Vue2 中组件必须有一个根标签，在 Vue3 中，组件可以没有根标签，内部会将多个标签包含在 <code>Fragment</code> 虚拟元素中。</p><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a><code>Teleport</code></h3><p>可以将一个组件内部的一部分模版“传送”到该组件的 DOM 结构外层的位置去。</p><p><code>Teleport</code> 接收一个 <code>to</code> 选项来指定传送的目标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button @click&#x3D;&quot;open &#x3D; true&quot;&gt;Open Modal&lt;&#x2F;button&gt;<br><br>&lt;Teleport to&#x3D;&quot;body&quot;&gt;<br>  &lt;div v-if&#x3D;&quot;open&quot; class&#x3D;&quot;modal&quot;&gt;<br>    &lt;p&gt;Hello from the modal!&lt;&#x2F;p&gt;<br>    &lt;button @click&#x3D;&quot;open &#x3D; false&quot;&gt;Close&lt;&#x2F;button&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;Teleport&gt;<br><br></code></pre></td></tr></table></figure><h3 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a><code>Suspense</code></h3><p>作用：等待一部组件渲染时提供一些默认内容，让应用有更好的体验。</p><p>异步引入组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;defineAsyncComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> Child = defineAsyncComponent(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>使用 <code>Suspense</code> 包裹组件，并配置好 <code>default</code> 和 <code>fallback</code> 插槽的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Suspense&gt;<br>  &lt;template v-slot:default&gt;<br>&lt;Child&#x2F;&gt;<br>  &lt;&#x2F;template&gt;<br>  &lt;template v-slot:fallback&gt;<br>&lt;h3&gt;加载中……&lt;&#x2F;h3&gt;<br>  &lt;&#x2F;template&gt;<br>&lt;&#x2F;Suspense&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex 和 Vue Router</title>
    <link href="/2022/12/24/Vuex-%E5%92%8C-Vue-Router/"/>
    <url>/2022/12/24/Vuex-%E5%92%8C-Vue-Router/</url>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>与 Vue2 匹配的 Vuex3：<a href="https://v3.vuex.vuejs.org/zh/%E3%80%82">https://v3.vuex.vuejs.org/zh/。</a></p><p>与 Vue3 匹配的 Vuex4：<a href="https://vuex.vuejs.org/zh/index.html%E3%80%82">https://vuex.vuejs.org/zh/index.html。</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 Vue 应用中多组件的共享状态进行集中式的管理（读/写），也是一种适用于任意组件间通信的方式。</p><h2 id="Vuex-开发环境"><a href="#Vuex-开发环境" class="headerlink" title="Vuex 开发环境"></a>Vuex 开发环境</h2><p>安装 Vuex</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i vuex@3<br></code></pre></td></tr></table></figure><p>编写 <code>/src/store/index.js</code> 文件，创建 Vuex 中核心的 <code>store</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-comment">// 应用 Vuex 插件</span><br>Vue.use(Vuex)<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><span class="hljs-keyword">const</span> state = &#123;&#125;<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    actions,<br>    mutations,<br>    state<br>&#125;)<br></code></pre></td></tr></table></figure><p>在 <code>main.js</code> 中创建 Vue 实例时传入 <code>store</code> 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;<br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    store,<br>    render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>使用 Vuex 完成求和功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; Count.vue 组件<br>&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h2&gt;当前求和为&#123;&#123; $store.state.sum &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Count&quot;,<br>  data() &#123;<br>    return &#123;<br>      n: 1<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    increment() &#123;<br>      this.$store.commit(&#39;JIA&#39;, this.n)<br>    &#125;,<br>    incrementWait() &#123;<br>      this.$store.dispatch(&#39;jiaWait&#39;, this.n)<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// store/index.js</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br>Vue.use(Vuex)<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>    jiaWait(context, value) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            context.commit(<span class="hljs-string">&#x27;JIA&#x27;</span>, value)<br>        &#125;, <span class="hljs-number">500</span>)<br>    &#125;,<br>&#125;<br><span class="hljs-keyword">const</span> mutations = &#123;<br>    JIA(state, value) &#123;<br>        state.sum += value<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> state = &#123;<br>    sum: <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    actions,<br>    mutations,<br>    state<br>&#125;)<br></code></pre></td></tr></table></figure><p>在组件中读取 Vuex 中的数据：<code>$store.state.sum</code>。</p><p>在组件中修改 Vuex 中的数据：<code>$store.dispatch(actionName, value)</code> 或 <code>$store.commit(mutationName, value)</code>。</p><h2 id="getters-的使用"><a href="#getters-的使用" class="headerlink" title="getters 的使用"></a>getters 的使用</h2><p>当需要对 <code>state</code> 中数据加工后再使用时，在 Vuex 的 <code>store</code> 中定义 <code>getter</code> （可以认为是 <code>store</code> 的计算属性）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getters = &#123;<br>    bigSum(state) &#123;<br>        <span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    ...,<br>    getters<br>&#125;)<br></code></pre></td></tr></table></figure><p>在组件中访问 <code>getters</code> 属性 ：<code>$store.getters.bigSum</code>。</p><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h2><p>使用 <code>mapState</code> 辅助函数生成计算属性，减少冗余代码。<code>mapGetters</code> 辅助函数将 <code>store</code> 中的 <code>getter</code> 映射为计算属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;mapState, mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br>computed: &#123;<br>  <span class="hljs-comment">// he() &#123;</span><br>  <span class="hljs-comment">//   return this.$store.state.sum</span><br>  <span class="hljs-comment">// &#125;,</span><br>  ...mapState(&#123;<span class="hljs-attr">he</span>: <span class="hljs-string">&#x27;sum&#x27;</span>&#125;),<br>    <span class="hljs-comment">// bigSum() &#123;</span><br>    <span class="hljs-comment">//   return this.$store.getters.bigSum</span><br>    <span class="hljs-comment">// &#125;,</span><br>    ...mapGetters([<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>mapActions</code> 辅助函数将组件的 <code>methods</code> 映射为 <code>store.dispatch</code> 调用，使用 <code>mapMutations</code> 辅助函数将组件中的 <code>methods</code> 映射为 <code>store.commit</code> 调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>  <span class="hljs-comment">// increment() &#123;</span><br>  <span class="hljs-comment">//   this.$store.commit(&#x27;JIA&#x27;, this.n)</span><br>  <span class="hljs-comment">// &#125;,</span><br>  ...mapMutations(&#123;<span class="hljs-string">&#x27;increment&#x27;</span>: <span class="hljs-string">&#x27;JIA&#x27;</span>&#125;),<br>    <span class="hljs-comment">// decrement() &#123;</span><br>    <span class="hljs-comment">//   this.$store.commit(&#x27;JIAN&#x27;, this.n)</span><br>    <span class="hljs-comment">// &#125;,</span><br>    ...mapMutations([<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br><br>    <span class="hljs-comment">// incrementOdd() &#123;</span><br>    <span class="hljs-comment">//   this.$store.dispatch(&#x27;jiaOdd&#x27;, this.n)</span><br>    <span class="hljs-comment">// &#125;,</span><br>    ...mapActions(&#123;<span class="hljs-string">&#x27;incrementOdd&#x27;</span>: <span class="hljs-string">&#x27;jiaOdd&#x27;</span>&#125;),<br>    <span class="hljs-comment">// incrementWait() &#123;</span><br>    <span class="hljs-comment">//   this.$store.dispatch(&#x27;jiaWait&#x27;, this.n)</span><br>    <span class="hljs-comment">// &#125;,</span><br>    ...mapActions([<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模块化和命名空间"><a href="#模块化和命名空间" class="headerlink" title="模块化和命名空间"></a>模块化和命名空间</h2><p>Vuex 支持将 <code>store</code> 拆分成多个模块（module），每个模块拥有自己的 <code>state</code> 、<code>mutation</code>、<code>action</code>、<code>getter</code>，通过添加 <code>namespaced:true</code> 使模块成为带有命名空间的模块。</p><p>修改 <code>store.js</code> 配置，以开启命名空间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br>Vue.use(Vuex)<br><span class="hljs-keyword">const</span> countOptions = &#123;<br>    namespaced: <span class="hljs-literal">true</span>,<br>    actions: &#123;<br>        jiaOdd(context, value) &#123;<br>            <span class="hljs-keyword">if</span> (context.state.sum % <span class="hljs-number">2</span>) &#123;<br>                context.commit(<span class="hljs-string">&#x27;JIA&#x27;</span>, value)<br>            &#125;<br>        &#125;,<br>        jiaWait(context, value) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.commit(<span class="hljs-string">&#x27;JIA&#x27;</span>, value)<br>            &#125;, <span class="hljs-number">500</span>)<br>        &#125;,<br>    &#125;,<br>    mutations: &#123;<br>        JIA(state, value) &#123;<br>            state.sum += value<br>        &#125;,<br>        JIAN(state, value) &#123;<br>            state.sum -= value<br>        &#125;<br>    &#125;,<br>    state: &#123;<br>        sum: <span class="hljs-number">0</span>,<br>    &#125;,<br>    getters: &#123;<br>        bigSum(state) &#123;<br>            <span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> personOptions = &#123;<br>    namespaced: <span class="hljs-literal">true</span>,<br>    actions: &#123;&#125;,<br>    mutations: &#123;<br>        ADD_PERSON(state, value) &#123;<br>            state.personList.push(value)<br>        &#125;<br>    &#125;,<br>    state: &#123;<br>        personList: [<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125;<br>        ]<br>    &#125;,<br>    getters: &#123;&#125;<br>&#125;<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    modules: &#123;<br>        countAbout: countOptions,<br>        personAbout: personOptions<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>通过辅助函数使用时传入 <code>namespace</code> 参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed: &#123;<br>  ...mapState(<span class="hljs-string">&#x27;countAbout&#x27;</span>, &#123;<span class="hljs-attr">he</span>: <span class="hljs-string">&#x27;sum&#x27;</span>&#125;),<br>  ...mapState(<span class="hljs-string">&#x27;personAbout&#x27;</span>, [<span class="hljs-string">&#x27;personList&#x27;</span>]),<br>  ...mapGetters(<span class="hljs-string">&#x27;countAbout&#x27;</span>, [<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;,<br>methods: &#123;<br>  ...mapMutations(<span class="hljs-string">&#x27;countAbout&#x27;</span>, &#123;<span class="hljs-string">&#x27;increment&#x27;</span>: <span class="hljs-string">&#x27;JIA&#x27;</span>&#125;),<br>  ...mapMutations(<span class="hljs-string">&#x27;countAbout&#x27;</span>, [<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br><br>  ...mapActions(<span class="hljs-string">&#x27;countAbout&#x27;</span>, &#123;<span class="hljs-string">&#x27;incrementOdd&#x27;</span>: <span class="hljs-string">&#x27;jiaOdd&#x27;</span>&#125;),<br>  ...mapActions(<span class="hljs-string">&#x27;countAbout&#x27;</span>, [<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>不通过辅助函数时读取 <code>state</code> 数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed: &#123;<br>  sum() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.countAbout.sum<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不通过辅助函数访问 <code>getters</code>、<code>actions</code>、<code>mutations</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed: &#123;<br>  bigSum()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters[<span class="hljs-string">&quot;countAbout/bigSum&quot;</span>]<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;countAbout/jiaOdd&#x27;</span>,value)<br><span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;personAbout/ADD_PERSON&#x27;</span>, value)<br></code></pre></td></tr></table></figure><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><p>与 Vue2 匹配的 Vue Router3 ：<a href="https://v3.router.vuejs.org/zh/%E3%80%82">https://v3.router.vuejs.org/zh/。</a></p><p>与 Vue3 匹配的 Vue Router4：<a href="https://router.vuejs.org/zh/%E3%80%82">https://router.vuejs.org/zh/。</a></p><h2 id="基础理解"><a href="#基础理解" class="headerlink" title="基础理解"></a>基础理解</h2><p>一个路由（<code>route</code>）就是一组映射关系（<code>key-value</code>），多个路由需要路由器（<code>router</code>）进行管理，前端路由中：<code>key</code> 是路径，<code>value</code> 是组件。</p><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><p>安装 <code>vue-router</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i vue-router@3<br></code></pre></td></tr></table></figure><p>在 <code>/src/route/index.js</code> 中创建路由器，编写 <code>router</code> 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/About.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Home.vue&quot;</span>;<br><span class="hljs-comment">// 创建一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    routes: [<br>        &#123;<br>            path: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            component: About<br>        &#125;,<br>        &#123;<br>            path: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            component: Home<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>应用 <code>VueRouter</code> 插件，创建 Vue 实例时传入 <code>router</code> 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router&quot;</span>;<br><br>Vue.use(VueRouter)<br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    router,<br>    render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用 <code>&lt;router-link&gt;</code> 实现路由切换，使用 <code>&lt;vue-view/&gt;</code> 指定展示位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class&#x3D;&quot;row&quot;&gt;<br>  &lt;div class&#x3D;&quot;col-xs-2 col-xs-offset-2&quot;&gt;<br>    &lt;div class&#x3D;&quot;list-group&quot;&gt;<br>      &lt;!-- Vue 中使用 router-link 实现路由切换 --&gt;<br>      &lt;router-link to&#x3D;&quot;&#x2F;about&quot; active-class&#x3D;&quot;active&quot; class&#x3D;&quot;list-group-item&quot;&gt;About&lt;&#x2F;router-link&gt;<br>      &lt;router-link to&#x3D;&quot;&#x2F;home&quot; active-class&#x3D;&quot;active&quot; class&#x3D;&quot;list-group-item&quot;&gt;Home&lt;&#x2F;router-link&gt;<br>    &lt;&#x2F;div&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;div class&#x3D;&quot;col-xs-6&quot;&gt;<br>    &lt;div class&#x3D;&quot;panel&quot;&gt;<br>      &lt;div class&#x3D;&quot;panel-body&quot;&gt;<br>        &lt;!-- 指定组件的呈现位置 --&gt;<br>        &lt;router-view&#x2F;&gt;<br>      &lt;&#x2F;div&gt;<br>    &lt;&#x2F;div&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>路由组件通常存放在 <code>pages</code> 文件夹，一般组件通常存放在 <code>components</code> 文件夹。</li><li>路由切换时，组件默认被销毁，需要时重新挂载。</li><li>每个组件都有自己的 <code>$route</code> 属性，保存着自身的路由信息。</li><li>整个应用只有一个 <code>router</code>，通过 <code>$router</code> 属性获取。</li></ul><h2 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h2><p>路由配置中使用 <code>children</code> 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/Home.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Message <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/Message.vue&quot;</span>;<br><span class="hljs-keyword">import</span> MessageDetail <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/MessageDetail.vue&quot;</span>;<br><span class="hljs-comment">// 创建一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    routes: [<br>        &#123;<br>            path: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            component: Home,<br>            children: [<br>                &#123;<br>                    path: <span class="hljs-string">&#x27;message&#x27;</span>,<br>                    component: Message,<br>                    children: [<br>                        &#123;<br>                            path: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>                            component: MessageDetail<br>                        &#125;<br>                    ]<br>                &#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>&lt;router-link&gt;</code> 中使用全路径名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="query-参数"><a href="#query-参数" class="headerlink" title="query 参数"></a>query 参数</h3><p>字符串写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link :to&#x3D;&quot;&#96;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;message.id&#125;&amp;title&#x3D;$&#123;message.title&#125;&#96;&quot;&gt;<br>  &#123;&#123; message.title &#125;&#125;<br>&lt;&#x2F;router-link&gt;<br></code></pre></td></tr></table></figure><p>对象写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link :to&#x3D;&quot;&#123;<br>  path: &#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,<br>  query: &#123;<br>    id: message.id,<br>    title: message.title<br>  &#125;<br>&#125;&quot;&gt;<br>  &#123;&#123; message.title &#125;&#125;<br>&lt;&#x2F;router-link&gt;<br></code></pre></td></tr></table></figure><p>接收参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;li&gt;消息编号：&#123;&#123; $route.query.id &#125;&#125;&lt;&#x2F;li&gt;<br>&lt;li&gt;消息标题：&#123;&#123; $route.query.title&#125;&#125;&lt;&#x2F;li&gt;<br></code></pre></td></tr></table></figure><h3 id="params-参数"><a href="#params-参数" class="headerlink" title="params 参数"></a>params 参数</h3><p>配置路由时，申明接收 <code>params</code> 参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/Home.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Message <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/Message.vue&quot;</span>;<br><span class="hljs-keyword">import</span> MessageDetail <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/MessageDetail.vue&quot;</span>;<br><span class="hljs-comment">// 创建一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    routes: [<br>        &#123;<br>            path: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            component: Home,<br>            children: [<br>                &#123;<br>                    path: <span class="hljs-string">&#x27;message&#x27;</span>,<br>                    component: Message,<br>                    children: [<br>                        &#123;<br>                            name: <span class="hljs-string">&#x27;xq&#x27;</span>,<br>                            path: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>                            component: MessageDetail<br>                        &#125;<br>                    ]<br>                &#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link :to&#x3D;&quot;&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;message.id&#125;&#x2F;$&#123;message.title&#125;&#96;&quot;&gt;<br>     &#123;&#123; message.title &#125;&#125;<br>&lt;&#x2F;router-link&gt;<br><br>&lt;router-link :to&#x3D;&quot;&#123;<br>          name: &#39;xq&#39;,<br>          params: &#123;<br>            id: message.id,<br>            title: message.title<br>          &#125;<br>        &#125;&quot;&gt;<br>  &#123;&#123; message.title &#125;&#125;<br>&lt;&#x2F;router-link&gt;<br></code></pre></td></tr></table></figure><p>接收参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;li&gt;消息编号：&#123;&#123; $route.params.id &#125;&#125;&lt;&#x2F;li&gt;<br>&lt;li&gt;消息标题：&#123;&#123; $route.params.title&#125;&#125;&lt;&#x2F;li&gt;<br></code></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>命名路由用于简化路由配置，使用 <code>name</code> 配置项指定路由名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/Home.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Message <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/Message.vue&quot;</span>;<br><span class="hljs-keyword">import</span> MessageDetail <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/MessageDetail.vue&quot;</span>;<br><span class="hljs-comment">// 创建一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    routes: [<br>        &#123;<br>            path: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            component: Home,<br>            children: [<br>                &#123;<br>                    path: <span class="hljs-string">&#x27;message&#x27;</span>,<br>                    component: Message,<br>                    children: [<br>                        &#123;<br>                            name: <span class="hljs-string">&#x27;xq&#x27;</span>,<br>                            path: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>                            component: MessageDetail<br>                        &#125;<br>                    ]<br>                &#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>在 <code>&lt;router-link&gt;</code> 中使用 <code>name</code> 配置项代替 <code>path</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link :to&#x3D;&quot;&#123;<br>  name: &#39;xq&#39;,<br>  query: &#123;<br>    id: message.id,<br>    title: message.title<br>  &#125;<br>&#125;&quot;&gt;<br>  &#123;&#123; message.title &#125;&#125;<br>&lt;&#x2F;router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="路由的-props-配置项"><a href="#路由的-props-配置项" class="headerlink" title="路由的 props 配置项"></a>路由的 props 配置项</h2><p>将组件和路由解耦，让组件更方便接收参数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  name: &#x27;xq&#x27;,<br>  path: &#x27;detail/:id/:title&#x27;,<br>  component: MessageDetail,<br>  <span class="hljs-comment">// props: true,</span><br><br>  <span class="hljs-comment">// props: &#123;</span><br>  <span class="hljs-comment">//     id: &#x27;id&#x27;,</span><br>  <span class="hljs-comment">//     title: &#x27;title&#x27;</span><br>  <span class="hljs-comment">// &#125;,</span><br><br>  props: function (route) &#123;<br>    return &#123;<br>      id: route.params.id,<br>      title: route.params.title<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式"></a>布尔模式</h3><p>如果 <code>props</code> 被设置为 <code>true</code> ，把路由收到的 <code>params</code> 参数以 <code>props</code> 形式传递给组件。</p><h3 id="对象模式"><a href="#对象模式" class="headerlink" title="对象模式"></a>对象模式</h3><p>如果 <code>props</code> 是对象，该对象被按原样设置为组件属性。</p><h3 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式"></a>函数模式</h3><p>函数返回值作为 <code>props</code> 传递给组件。</p><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>使用 <code>router</code> 实例方法代替 <code>&lt;router-link&gt;</code> 创建 <code>a</code> 标签来定义导航链接。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pushShow(message) &#123;<br>  <span class="hljs-built_in">this</span>.$router.push(&#123;<br>    name: <span class="hljs-string">&#x27;xq&#x27;</span>,<br>    params: &#123;<br>      id: message.id,<br>      title: message.title<br>    &#125;<br>  &#125;)<br>&#125;,<br>replaceShow(message) &#123;<br>  <span class="hljs-built_in">this</span>.$router.replace(&#123;<br>    name: <span class="hljs-string">&#x27;xq&#x27;</span>,<br>    params: &#123;<br>      id: message.id,<br>      title: message.title<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>解决 <code>push</code> 和 <code>replace</code> 多次跳转到统一位置报错（<code>NavigationDuplicated</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">const</span> originalPush = VueRouter.prototype.push;<br><span class="hljs-keyword">const</span> originalReplace = VueRouter.prototype.replace;<br>VueRouter.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">push</span>(<span class="hljs-params">location</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> originalPush.call(<span class="hljs-built_in">this</span>, location).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err.name !== <span class="hljs-string">&#x27;NavigationDuplicated&#x27;</span>) <span class="hljs-keyword">throw</span> err<br>    &#125;);<br>&#125;<br>VueRouter.prototype.replace = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replace</span>(<span class="hljs-params">location</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> originalReplace.call(<span class="hljs-built_in">this</span>, location).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err.name !== <span class="hljs-string">&#x27;NavigationDuplicated&#x27;</span>) <span class="hljs-keyword">throw</span> err<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h2><p>让不展示的路由组件保持挂载，不被销毁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive include&#x3D;&quot;News&quot;&gt;<br>  &lt;router-view&#x2F;&gt;<br>&lt;&#x2F;keep-alive&gt;<br>&#x2F;&#x2F; 缓存多个路由组件<br>&lt;keep-alive :include&#x3D;&quot;[&#39;News&#39;, &#39;Message&#39;]&quot;&gt;<br>  &lt;router-view&#x2F;&gt;<br>&lt;&#x2F;keep-alive&gt;<br></code></pre></td></tr></table></figure><h2 id="Vue-Router-生命周期钩子"><a href="#Vue-Router-生命周期钩子" class="headerlink" title="Vue Router 生命周期钩子"></a>Vue Router 生命周期钩子</h2><p>用于捕获路由组件的激活状态</p><ul><li><code>activated</code>：组件被激活时触发。</li><li><code>deactivated</code>：组件失活是触发。</li></ul><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注册一个全局前置守卫</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;前置守卫&#x27;</span>, to, <span class="hljs-keyword">from</span>)<br>    <span class="hljs-keyword">if</span> (to.meta.isAuth) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;school&#x27;</span>) &#123;<br>            next();<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        next();<br>    &#125;<br>&#125;)<br><span class="hljs-comment">// 注册全局后置钩子</span><br>router.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;后置守卫&#x27;</span>, to, <span class="hljs-keyword">from</span>)<br>    <span class="hljs-built_in">document</span>.title = to.meta.title<br>&#125;)<br></code></pre></td></tr></table></figure><p>当路由切换时，全局前置守卫按照创建顺序调用。</p><h3 id="独享守卫"><a href="#独享守卫" class="headerlink" title="独享守卫"></a>独享守卫</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">const router = new VueRouter(&#123;<br>    routes: [<br>         &#123;<br>           name: &#x27;xinwen&#x27;,<br>           path: &#x27;news&#x27;,<br>           component: News,<br>           meta: &#123;<br>             isAuth: true,<br>             title: &#x27;新闻&#x27;<br>           &#125;,<br>           beforeEnter(to, from, next) &#123;<br>             console.log(&#x27;独享前置守卫&#x27;, to, from)<br>             if (localStorage.getItem(&#x27;school&#x27;) === &#x27;school&#x27;) &#123;<br>               next();<br>             &#125;<br>           &#125;<br>         &#125;<br>    ]<br>&#125;)<br><br>export default router<br></code></pre></td></tr></table></figure><p>在路由配置上直接定义 <code>beforeEnter</code> 守卫。</p><h3 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 通过路由规则，进入该组件时调用</span><br>beforeRouteEnter(to, <span class="hljs-keyword">from</span>, next) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;beforeRouteEnter&#x27;</span>)<br>  next()<br>&#125;,<br><span class="hljs-comment">// 通过路由规则，离开该组件时调用</span><br>beforeRouteLeave(to, <span class="hljs-keyword">from</span>, next) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;beforeRouteLeave&#x27;</span>);<br>  next()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h3><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2 组件和脚手架</title>
    <link href="/2022/12/07/Vue-%E7%BB%84%E4%BB%B6%E5%92%8C%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2022/12/07/Vue-%E7%BB%84%E4%BB%B6%E5%92%8C%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue2-组件"><a href="#Vue2-组件" class="headerlink" title="Vue2 组件"></a>Vue2 组件</h1><p>组件是实现应用中局部功能代码和资源的集合，主要作用是复用代码，简化项目编码，提高运行效率。</p><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><p>一个文件中包含多个组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&#123;&#123;msg&#125;&#125;<br>&lt;hr&gt;<br>&lt;!-- 使用组件 --&gt;<br>&lt;school&gt;&lt;&#x2F;school&gt;<br>&lt;hr&gt;<br>&lt;student&gt;&lt;&#x2F;student&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>&#x2F;&#x2F; 定义组件<br>const school &#x3D; Vue.extend(&#123;<br>  template: &#96;<br>          &lt;div&gt;<br>          &lt;h1&gt;学校名称：&#123;&#123; schoolName &#125;&#125;&lt;&#x2F;h1&gt;<br>          &lt;h1&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;&#x2F;h1&gt;<br>          &lt;button @click&#x3D;&quot;showName&quot;&gt;显示学校名称&lt;&#x2F;button&gt;<br>          &lt;&#x2F;div&gt;<br>        &#96;,<br>  data() &#123;<br>    return &#123;<br>      schoolName: &#39;学校&#39;,<br>      address: &#39;地址&#39;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    showName() &#123;<br>      alert(this.schoolName)<br>    &#125;<br>  &#125;<br>&#125;)<br>const student &#x3D; Vue.extend(&#123;<br>  template: &#96;<br>          &lt;div&gt;<br>          &lt;h2&gt;学生姓名：&#123;&#123; studentName &#125;&#125;&lt;&#x2F;h2&gt;<br>          &lt;h2&gt;学生年龄：&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt;<br>          &lt;&#x2F;div&gt;<br>        &#96;,<br>  data() &#123;<br>    return &#123;<br>      studentName: &#39;姓名&#39;,<br>      age: 18<br>    &#125;<br>  &#125;<br>&#125;)<br><br>&#x2F;&#x2F; 注册组件<br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  components: &#123;<br>    school,<br>    student<br>  &#125;,<br>  data: &#123;<br>    msg: &#39;Hello Vue!&#39;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="使用组件的步骤："><a href="#使用组件的步骤：" class="headerlink" title="使用组件的步骤："></a>使用组件的步骤：</h3><ul><li>定义组件：使用 <code>Vue.extend(options)</code> 创建组件，使用 <code>template</code> 配置组件结构。</li><li>注册组件：使用 <code>Vue.component(componentName, component)</code> 全局注册组件，使用 <code>components</code> 选项局部注册组件。</li><li>使用组件：通过编写组件标签的方式使用组件。</li></ul><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><ul><li>组件本质是一个 <code>Vue.extend</code> 生成的名为 <code>VueComponent</code> 的构造函数。</li><li>Vue 在解析模版时会创建组件的实例对象，即调用 <code>new VueComponent(options)</code>。</li><li>每次调用 <code>Vue.extend</code> 都会产生一个全新的 <code>VueComponent</code>。</li><li><code>VueComponent.prototype.__proto__ === Vue.prototype</code> ，让组件实例对象可以访问到 Vue 原型上的属性和方法。</li></ul><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>一个文件中只包含一个组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;!--结构--&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>&#x2F;&#x2F; 交互<br>&lt;&#x2F;script&gt;<br><br>&lt;style&gt;<br>&#x2F;*样式*&#x2F;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><h2 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1 ref&#x3D;&quot;h1&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;<br>    &lt;button @click&#x3D;&quot;showDOM&quot; ref&#x3D;&quot;btn&quot;&gt;展示 DOM 元素&lt;&#x2F;button&gt;<br>    &lt;school ref&#x3D;&quot;sch&quot;&gt;&lt;&#x2F;school&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import School from &quot;@&#x2F;components&#x2F;School&quot;;<br><br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123;School&#125;,<br>  data() &#123;<br>    return &#123;<br>      msg: &#39;Vue&#39;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    showDOM() &#123;<br>      console.log(this.$refs.h1)<br>      console.log(this.$refs.btn)<br>      console.log(this.$refs.sch)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p><code>ref</code> 用来给元素或子组件注册引用信息，使用在 HTML 元素上，引用指向 DOM 元素，使用在子组件上，引用指向组件实例。</p><p>注册方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1 ref&#x3D;&quot;h1&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;<br>&lt;school ref&#x3D;&quot;sch&quot;&gt;&lt;&#x2F;school&gt;<br></code></pre></td></tr></table></figure><p>使用方式：<code>this.$refs[refName]</code>。</p><h2 id="配置项-props"><a href="#配置项-props" class="headerlink" title="配置项 props"></a>配置项 <code>props</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; myAge &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;h2&gt;性别：&#123;&#123; sex &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;button @click&#x3D;&quot;updateAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;School&quot;,<br>  data() &#123;<br>    return &#123;<br>      msg: &#39;学生信息&#39;,<br>      myAge: this.age<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    updateAge() &#123;<br>      this.myAge++<br>    &#125;<br>  &#125;,<br>  &#x2F;&#x2F; props: [&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;]<br><br>  &#x2F;&#x2F; props: &#123;<br>  &#x2F;&#x2F;   name: String,<br>  &#x2F;&#x2F;   age: Number,<br>  &#x2F;&#x2F;   sex: String<br>  &#x2F;&#x2F; &#125;<br><br>  props: &#123;<br>    name: &#123;<br>      type: String,<br>      required: true<br>    &#125;,<br>    age: &#123;<br>      type: Number,<br>      required: false,<br>      default: 18<br>    &#125;,<br>    sex: &#123;<br>      type: String,<br>      required: true,<br>      &#x2F;&#x2F; 自定义验证函数<br>      validator: (value) &#x3D;&gt; &#123;<br>        return &#39;男&#39; &#x3D;&#x3D;&#x3D; value || &#39;女&#39; &#x3D;&#x3D;&#x3D; value<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>功能：让组件接收父组件传递的数据。<br>传递数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;demo name&#x3D;&quot;xxx&quot;&#x2F;&gt;<br></code></pre></td></tr></table></figure><p>接收数据：</p><ul><li><p>简单声明接收</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">props:[&#39;name&#39;]<br></code></pre></td></tr></table></figure></li><li><p>限制类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">props:&#123;<br>  name:String<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类型检测、自定义验证和默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">props:&#123;<br>  name:&#123;<br>    type: String,<br>    required: false,<br>    default: &#39;老王&#39;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><code>props</code> 是只读的，对 <code>props</code> 修改会触发警告，可以通过复制 <code>props</code> 内容到 <code>data</code> 中修改。</p><h2 id="mixin（混入）"><a href="#mixin（混入）" class="headerlink" title="mixin（混入）"></a>mixin（混入）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;script&gt;<br>import &#123;mixin&#125; from &quot;@&#x2F;mixin&quot;;<br><br>export default &#123;<br>  name: &quot;School&quot;,<br>  data() &#123;<br>    return &#123;<br>      name: &#39;学生&#39;,<br>    &#125;<br>  &#125;,<br>  mixins: [mixin]<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;mixin2&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/mixin&quot;</span>;<br><br>Vue.mixin(mixin2)<br></code></pre></td></tr></table></figure><p>可以把多个组件公用的配置提取成一个混入对象。</p><p>定义混合对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mixin = &#123;<br>    methods: &#123;<br>        showName() &#123;<br>            alert(<span class="hljs-built_in">this</span>.name)<br>        &#125;<br>    &#125;,<br>    data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            x: <span class="hljs-number">1</span>,<br>            y: <span class="hljs-number">2</span><br>        &#125;<br>    &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mixin2 = &#123;<br>    mounted() &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;mixin mounted&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用混入：</p><ul><li>全局配置：<code>Vue.mixin()</code></li><li>局部配置：<code>mixins:[]</code></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>用于增强 Vue，本质是包含 <code>install</code> 方法的一个对象。<code>install</code> 方法第一个参数是 <code>Vue</code>，后续参数是插件使用者传递的数据。</p><p>定义插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    install(Vue, options)<br>    &#123;<br>        Vue.filter()<br>        Vue.prototype.hello = <span class="hljs-function">() =&gt;</span> &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.use(plugins)<br></code></pre></td></tr></table></figure><h2 id="scoped-属性"><a href="#scoped-属性" class="headerlink" title="scoped 属性"></a>scoped 属性</h2><p>当 <code>style</code> 标签有 <code>scoped</code> 属性时，它的 CSS 只作用于当前组件中的元素。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">scoped</span>&gt;<br><span class="hljs-selector-class">.demo</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>添加 <code>scoped</code> Vue 编译时会添加一个唯一的 <code>data</code> 属性（<code>data-v-22321ebb</code>）为组件内 CSS 指定作用域，<code>.demo</code> 会被编译为 <code> .demo[data-v-22321ebb] &#123;  background-color: pink; &#125;</code>。</p><p>scoped 原理：</p><ul><li>给 HTML 的 DOM 节点加一个不重复的 <code>data</code> 属性标识唯一性。</li><li>给每句 <code>css</code> 选择器的末尾加一个当前组件的 <code>data</code> 属性选择器来私有化样式。</li><li>如果组件内包含其它组件，只会给组件最外层标签加上当前组件的 <code>data</code> 属性。</li></ul><p>scoped 穿透</p><p>如果需要父组件的样式覆盖子组件的样式有两种方式：</p><ol><li><p>使用两个 <code>style</code>，一个用于私有样式，一个用于共有样式。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">scoped</span>&gt;<br><span class="hljs-selector-class">.basic</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br>&lt;/style&gt;<br><br>&lt;<span class="hljs-selector-tag">style</span>&gt;<br><span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>深度作用选择器（<code>&gt;&gt;&gt;</code> 、 <code>/deep/</code> 或 <code>::v-deep</code>）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">scoped</span>&gt;<br><span class="hljs-selector-class">.basic</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br>&gt;&gt;&gt; <span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>上述代码会编译成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br><span class="hljs-selector-class">.basic</span><span class="hljs-selector-attr">[data-v-7ba5bd90]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-attr">[data-v-7ba5bd90]</span> <span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>自定义事件是一种组件间通信方式，适用于子组件向父组件传递数据。</p><p>绑定自定义事件的方式：</p><ul><li><p>在父组件中通过 <code>v-on:</code> 绑定事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Student @showStudentName&#x3D;&quot;showStudentName&quot;&#x2F;&gt;<br></code></pre></td></tr></table></figure></li><li><p>在父组件中通过 <code>$on</code> 函数绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$refs.student.$on(<span class="hljs-string">&#x27;showStudentName&#x27;</span>, <span class="hljs-built_in">this</span>.showStudentName)<br><span class="hljs-comment">// 使用箭头函数保证 this 指向当前实例对象</span><br><span class="hljs-built_in">this</span>.$refs.student.$once(<span class="hljs-string">&#x27;method&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<span class="hljs-built_in">this</span>.name = value&#125;)<br></code></pre></td></tr></table></figure></li><li><p>如果希望自定义事件只能触发一次，可以使用 <code>once</code> 修饰符，或者使用 <code>$once</code> 方法。</p></li></ul><p>触发自定义事件的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;showStudentName&#x27;</span>, <span class="hljs-built_in">this</span>.name)<br></code></pre></td></tr></table></figure><p>解绑自定义事件的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$off(<span class="hljs-string">&#x27;showStudentName&#x27;</span>)<br><span class="hljs-built_in">this</span>.$off([<span class="hljs-string">&#x27;m1&#x27;</span>, <span class="hljs-string">&#x27;m2&#x27;</span>])<br></code></pre></td></tr></table></figure><p>组件上可以绑定原生 DOM 事件，但需要使用 <code>native</code> 修饰符。</p><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>适用于任意组件间通信，使用前需安装全局事件总线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br>    beforeCreate() &#123;<br>        Vue.prototype.$bus = <span class="hljs-built_in">this</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用方式：</p><ul><li><p>组件 A 希望接收数据，则在组件 A 中给 <code>$bus</code> 绑定自定义事件，事件回调写在组件 A 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods()&#123;<br>  handle(data)&#123;&#125;<br>&#125;,<br>mounted()&#123;<br>  <span class="hljs-built_in">this</span>.$bus.$on(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-built_in">this</span>.handle)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>其它组件调用组件 A 绑定的自定义事件提供数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$bus.$emit(<span class="hljs-string">&#x27;xxx&#x27;</span>, data)<br></code></pre></td></tr></table></figure></li></ul><p>最好在组件的 <code>beforeDestroy</code> 生命周期钩子中，使用 <code>$off</code> 函数解绑当前组件绑定的自定义事件。</p><h2 id="消息订阅与发布（pubsub-js）"><a href="#消息订阅与发布（pubsub-js）" class="headerlink" title="消息订阅与发布（pubsub-js）"></a>消息订阅与发布（pubsub-js）</h2><p>PubSubJS 是一个用 JavaScript 编写的基于主题的发布订阅库。</p><p>安装 PubSubJS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i pubsub-js<br></code></pre></td></tr></table></figure><p>导入模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> PubSub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span><br></code></pre></td></tr></table></figure><p>使用 PubSubJS 发布与订阅：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发布消息</span><br>PubSub.publish(<span class="hljs-string">&#x27;removeTodo&#x27;</span>, <span class="hljs-built_in">this</span>.todo.id)<br><span class="hljs-comment">// 订阅消息</span><br><span class="hljs-built_in">this</span>.pubId = PubSub.subscribe(<span class="hljs-string">&#x27;removeTodo&#x27;</span>, <span class="hljs-built_in">this</span>.removeTodo)<br><span class="hljs-comment">// 取消订阅</span><br>PubSub.unsubscribe(<span class="hljs-built_in">this</span>.pubId)<br></code></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.myTodo.edit = <span class="hljs-literal">true</span><br><span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.$refs.input.focus()<br>&#125;)<br></code></pre></td></tr></table></figure><p>语法：<code>this.$nextTick(function()&#123;&#125;)</code>。</p><p>作用：在下一次 DOM 更新结束后执行回调操作，用于数据改变后，要基于更新后的 DOM 进行操作时。</p><h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><p>一种组件间通信方式，让父组件向子组件指定位置插入 HTML 结构，分为：默认插槽、具名插槽、作用域插槽。</p><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; 子组件中<br>&lt;template&gt;<br>  &lt;div class&#x3D;&quot;category&quot;&gt;<br>    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;slot&gt;插槽默认值&lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&#x2F;&#x2F; 父组件中<br>&lt;Category title&#x3D;&quot;美食分类&quot;&gt;<br>  &lt;img alt&#x3D;&quot;美食&quot; src&#x3D;&quot;&quot;&gt;<br>&lt;&#x2F;Category&gt;<br></code></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; 子组件中<br>&lt;template&gt;<br>  &lt;div class&#x3D;&quot;category&quot;&gt;<br>    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;slot name&#x3D;&quot;slot1&quot;&gt;插槽 1 默认值&lt;&#x2F;slot&gt;<br>    &lt;slot name&#x3D;&quot;slot2&quot;&gt;插槽 2 默认值&lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&#x2F;&#x2F; 父组件中<br>&lt;Category title&#x3D;&quot;美食分类&quot;&gt;<br>  &lt;img slot&#x3D;&quot;slot1&quot; alt&#x3D;&quot;美食&quot; src&#x3D;&quot;&quot;&gt;<br>  &lt;template v-slot:slot2&gt;<br>&lt;ol&gt;<br>  &lt;li v-for&#x3D;&quot;(f, index) in foods&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123; f &#125;&#125;&lt;&#x2F;li&gt;<br>    &lt;&#x2F;ol&gt;<br>  &lt;&#x2F;template&gt;<br>&lt;&#x2F;Category&gt;<br></code></pre></td></tr></table></figure><p><code>v-slot</code> 只能添加在 <code>template</code> 上，插槽的默认名称是 <code>default</code>，<code>v-slot:default</code> 的缩写是 <code>#default</code>。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>数据在组件自身，但根据数据生成的结构需要父组件决定时使用作用域插槽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; 子组件<br>&lt;template&gt;<br>  &lt;div class&#x3D;&quot;category&quot;&gt;<br>    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;<br>    &lt;slot :games&#x3D;&quot;games&quot;&gt;插槽默认值&lt;&#x2F;slot&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&#x2F;&#x2F; 父组件<br>&lt;Category title&#x3D;&quot;游戏分类&quot;&gt;<br>  &lt;template v-slot:default&#x3D;&quot;&#123;games&#125;&quot;&gt;<br>&lt;ol&gt;<br>  &lt;li v-for&#x3D;&quot;(g, index) in games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123; g &#125;&#125;&lt;&#x2F;li&gt;<br>    &lt;&#x2F;ol&gt;<br>  &lt;&#x2F;template&gt;<br>&lt;&#x2F;Category&gt;<br></code></pre></td></tr></table></figure><h1 id="Vue-脚手架"><a href="#Vue-脚手架" class="headerlink" title="Vue 脚手架"></a>Vue 脚手架</h1><p>官网地址：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><p>Vue 脚手架是 Vue 官方提供的标准化开发工具。</p><h2 id="创建脚手架项目"><a href="#创建脚手架项目" class="headerlink" title="创建脚手架项目"></a>创建脚手架项目</h2><h3 id="安装-Vue-CLI"><a href="#安装-Vue-CLI" class="headerlink" title="安装 Vue CLI"></a>安装 Vue CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @vue/cli<br></code></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue create hello-vue<br></code></pre></td></tr></table></figure><h2 id="Vue-项目结构"><a href="#Vue-项目结构" class="headerlink" title="Vue 项目结构"></a>Vue 项目结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── babel.config.js babel 的配置文件<br>├── jsconfig.json<br>├── node_modules<br>├── package-lock.json 包版本控制文件<br>├── package.json 应用包配置文件<br>├── public<br>||—— favicon.ico 页签图标<br>||—— index.html 主页面<br>├── src<br>||—— assets 存放静态资源<br>|||—— logo.png<br>||—— components 存放组件<br>||—— App.vue<br>||—— main.js 入口文件<br>└── vue.config.js<br></code></pre></td></tr></table></figure><h3 id="Render-函数"><a href="#Render-函数" class="headerlink" title="Render 函数"></a>Render 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-comment">// render: h =&gt; h(App),</span><br>    render(createElement) &#123;<br>        <span class="hljs-keyword">return</span> createElement(App)<br>    &#125;<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>vue.js</code> 是完整版的 Vue，包含核心功能和模版解析器。</li><li><code>vue.runtime.xxx.js</code> 是运行版 Vue，只包含核心功能。</li><li>由于运行版 Vue 没有模版解析器，所以在 <code>new Vue(&#123;&#125;)</code> 中不能使用 <code>template</code> 配置项，需要使用 <code>render</code><br>函数接收到的 <code>createElement</code> 函数去指定内容。</li></ul><h2 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h2><p>使用 <code>vue inspect &gt; output.js</code> 可以查看 Vue 脚手架的默认配置。</p><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。</p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><p>在 <code>vue.config.js</code> 中添加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>    devServer: &#123;<br>        proxy: <span class="hljs-string">&#x27;http://localhost:9509&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求了前端不存在的资源时，会将请求转发给代理服务器。</p><h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><p>在 <code>vue.config.js</code> 中添加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>    devServer: &#123;<br>        proxy: &#123;<br>            <span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<br>                target: <span class="hljs-string">&#x27;http://localhost:9509&#x27;</span>,<br>                pathRewrite: &#123;<span class="hljs-string">&#x27;^api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>                ws: <span class="hljs-literal">true</span>,<br>                changeOrigin: <span class="hljs-literal">true</span><br>            &#125;, <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>                target: <span class="hljs-string">&#x27;http://localhost:9000&#x27;</span>,<br>                pathRewrite: &#123;<span class="hljs-string">&#x27;^api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以配置多个代理。</p><p><code>target</code>：代理目标的 <code>basePath</code>。</p><p><code>ws</code>：是否支持 websocket。</p><p><code>changeOrigin</code>：修改请求头中 <code>host</code> 字段与目标服务器一致。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle基础</title>
    <link href="/2022/11/06/Gradle%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/11/06/Gradle%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Gradle-基础"><a href="#Gradle-基础" class="headerlink" title="Gradle 基础"></a>Gradle 基础</h1><p>官网：<a href="https://gradle.org/">Gradle</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Gradle 需要 JDK8 及以上版本。</p><p>从 <a href="https://gradle.org/releases/">releases</a> 页面下载 Gradle 二进制包，解压后添加环境变量即可。使用 <code>gradle -v</code> 验证安装。</p><p><img src="https://fastly.jsdelivr.net/gh/xianglin2020/gallery@master/202211/202211092254536.png" alt="08_1667879688"></p><h2 id="创建-Java-应用"><a href="#创建-Java-应用" class="headerlink" title="创建 Java 应用"></a>创建 Java 应用</h2><h3 id="使用-init-任务创建项目"><a href="#使用-init-任务创建项目" class="headerlink" title="使用 init 任务创建项目"></a>使用 <code>init</code> 任务创建项目</h3><p>创建空文件夹 <code>gradleJava</code> 保存项目。</p><p>在 <code>gradleJava</code> 文件夹中执行 <code>gradle init</code> 命令，根据提示完成创建。</p><p><img src="https://fastly.jsdelivr.net/gh/xianglin2020/gallery@master/202211/202211092254312.png" alt="08_1667880245"></p><p>由 Gradle 创建的 Java 应用结构如下：</p><p><img src="https://fastly.jsdelivr.net/gh/xianglin2020/gallery@master/202211/202211092254752.png" alt="08_1667880412"></p><p><code>gradle</code>：gradle wrapper 目录；</p><p><code>gradlew</code>、<code>gradlew.bat</code>：gradle wrapper 启动脚本；</p><p><code>settings.gradle</code>：配置文件，定义了应用名称和子项目；</p><p><code>app/build.gradle</code>：app 项目的构建脚本；</p><p><code>app/src/main(test)/java</code>：Java 源（测试）代码路径。</p><h3 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h3><p><code>settings.gradle</code> 内如如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">rootProject.name = <span class="hljs-string">&#x27;gradleJava&#x27;</span><br>include(<span class="hljs-string">&#x27;app&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>rootProject.name</code>：指定应用名称。</li><li><code>include()</code>：指定该应用包含的子项目。</li></ul><p>子项目 <code>app</code> 的配置文件是：<code>app/build.gradle</code>，内容如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;application&#x27;</span><br>&#125;<br>repositories &#123;<br>    <span class="hljs-comment">// 使用 Maven 中央仓库</span><br>    mavenCentral()<br>&#125;<br>dependencies &#123;<br>    <span class="hljs-comment">// 指定依赖</span><br>    testImplementation <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter:5.8.2&#x27;</span><br>    implementation <span class="hljs-string">&#x27;com.google.guava:guava:31.0.1-jre&#x27;</span><br>&#125;<br>application &#123;<br>    mainClass = <span class="hljs-string">&#x27;store.xianglin.gradle.App&#x27;</span><br>&#125;<br>tasks.named(<span class="hljs-string">&#x27;test&#x27;</span>) &#123;<br>    useJUnitPlatform()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Groovy-与-Java-比较"><a href="#Groovy-与-Java-比较" class="headerlink" title="Groovy 与 Java 比较"></a>Groovy 与 Java 比较</h1><h2 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h2><p>groovy 默认导入如下包和类：</p><ul><li><code>java.io.*</code></li><li><code>java.lang.*</code></li><li><code>java.net.*</code></li><li><code>java.util.*</code></li><li><code>java.math.BigInteger</code></li><li><code>java.math.BigDecimal</code></li><li><code>groovy.lang.*</code></li><li><code>groovy.util.*</code></li></ul><h2 id="运行时参数类型匹配"><a href="#运行时参数类型匹配" class="headerlink" title="运行时参数类型匹配"></a>运行时参数类型匹配</h2><p>在 groovy 中，重载方法根据运行时参数的实际类型选择，Java 中重载方式基于编译时静态声明的参数类型选择。<br>比如如下重载方法在 groovy 和 Java 中结果不一致：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">int</span> method(String arg) &#123;<br>    <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">int</span> method(Object arg) &#123;<br>    <span class="hljs-number">2</span><br>&#125;<br><br>Object o = <span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-comment">// result: 1</span><br><span class="hljs-keyword">int</span> result = method(o)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">method</span><span class="hljs-params">(String arg)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">method</span><span class="hljs-params">(Object arg)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Object o = <span class="hljs-string">&quot;object&quot;</span>;<br>        <span class="hljs-comment">// result: 2</span><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-keyword">new</span> java.MainJava().method(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>Java 中初始化数组有如下两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array</span> </span>&#123;<br>    <span class="hljs-comment">// 简短语法</span><br>    <span class="hljs-keyword">int</span>[] shortArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-comment">// 完整语法</span><br>    <span class="hljs-keyword">int</span>[] longArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>Groovy 中 <code>&#123;...&#125;</code> 代码块称为闭包，所以不能使用 Java 的简短语法创建 Groovy 数组。Groovy 中初始化数组有以下两种方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">int</span>[] shortArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">int</span>[] longArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="包可见性"><a href="#包可见性" class="headerlink" title="包可见性"></a>包可见性</h2><p>Java 中省略修饰符时为 <code>default</code> 包可见。Groovy 中属性省略修饰符时，代表一个私有字段，并自动关联 setter 和 getter 方法。<br>使用 <code>@PackageScope</code> 声明一个包可见性的字段。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// package g</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Scope</span> &#123;</span><br>    String name<br>    <span class="hljs-meta">@PackageScope</span><br>    <span class="hljs-keyword">int</span> age<br>&#125;<br><br><span class="hljs-comment">//package g.s</span><br><span class="hljs-keyword">import</span> g.Scope<br><br><span class="hljs-keyword">new</span> Scope().getName()<br></code></pre></td></tr></table></figure><h2 id="ARM-代码块"><a href="#ARM-代码块" class="headerlink" title="ARM 代码块"></a>ARM 代码块</h2><p>Java 中 Automatic Resource Management (<code>try-with-resources</code>) 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-keyword">var</span> reader = Files.newBufferedReader(Paths.get(<span class="hljs-string">&quot;file&quot;</span>), StandardCharsets.UTF_8)) &#123;<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                System.out.println(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Groovy 通过各种使用闭包参数的方法支持 ARM，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;file&quot;</span>).eachLine &#123; print it &#125;<br><span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;file&quot;</span>).withReader(<span class="hljs-string">&#x27;UTF-8&#x27;</span>) &#123; reader -&gt;<br>    &#123;<br>        reader.eachLine &#123; print it &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Lambda-表达式和方法引用操作符"><a href="#Lambda-表达式和方法引用操作符" class="headerlink" title="Lambda 表达式和方法引用操作符"></a>Lambda 表达式和方法引用操作符</h2><p>Java8 和 Groovy 都支持 Lambda 和 method reference operator <code>::</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable run = () -&gt; System.out.println(<span class="hljs-string">&quot;lambda&quot;</span>);<br>        List.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">Runnable runnable = () -&gt; println <span class="hljs-string">&quot;lambda&quot;</span><br>List.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).forEach(System.<span class="hljs-attr">out:</span>:println)<br>List.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).forEach(&#123; print it &#125;)<br></code></pre></td></tr></table></figure><h2 id="GStrings"><a href="#GStrings" class="headerlink" title="GStrings"></a>GStrings</h2><p>Groovy 支持单引号字符串和双引号字符串，双引号字符串的类型时 <code>GString</code>，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">String s = <span class="hljs-string">&quot;double&quot;</span><br>String s1 = <span class="hljs-string">&#x27;singly-quoted string&#x27;</span><br><span class="hljs-keyword">def</span> s2 = <span class="hljs-string">&quot;$&#123;s&#125;-quoted string&quot;</span><br><span class="hljs-comment">// class java.lang.String</span><br>println s1.getClass()<br><span class="hljs-comment">// class org.codehaus.groovy.runtime.GStringImpl</span><br>println s2.getClass()<br></code></pre></td></tr></table></figure><h2 id="String-和-Character-字面量"><a href="#String-和-Character-字面量" class="headerlink" title="String 和 Character 字面量"></a>String 和 Character 字面量</h2><p>单引号字面量用 <code>String</code> 表示，双引号字面根据是否有插值 <code>$&#123;&#125;</code> 使用 <code>String</code> 或 <code>GString</code> 表示。<br>单个字符仅仅在使用 <code>char</code> 声明时才表示字符，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">def</span> s = <span class="hljs-string">&#x27;s&#x27;</span><br><span class="hljs-comment">// class java.lang.String</span><br>println s.getClass()<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span><br><span class="hljs-comment">// class java.lang.Character</span><br>println c.getClass()<br></code></pre></td></tr></table></figure><p>Groovy 中强制类型转换如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">assert</span> ((<span class="hljs-keyword">char</span>) <span class="hljs-string">&#x27;c&#x27;</span>).<span class="hljs-keyword">class</span> == Character<br><span class="hljs-keyword">assert</span> (<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">char</span>).<span class="hljs-keyword">class</span> == Character<br><span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;cx&#x27;</span>.asType(Character) == <span class="hljs-string">&#x27;c&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="行为"><a href="#行为" class="headerlink" title="== 行为"></a><code>==</code> 行为</h2><p>Java 中使用 <code>==</code> 比较基本类型和对象引用是否相等。<br>Groovy 中使用 <code>==</code> 比较非基本类型时，如果对象实现了 <code>Comparable</code> 接口则使用 <code>a.compareTo(b) == 0</code>，否则使用 <code>a.equals(b)</code>。<br>比较对象引用是否相等使用 <code>is</code> 方法或者运算符 <code>===</code>，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">def</span> s1 = <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-keyword">def</span> s2 = <span class="hljs-string">&quot;12&quot;</span> + <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-comment">// true</span><br>println s1 == s2<br><span class="hljs-comment">// false</span><br>println s1 === s2<br>println s1.is(s2)<br></code></pre></td></tr></table></figure><h2 id="基本类型和包装类型"><a href="#基本类型和包装类型" class="headerlink" title="基本类型和包装类型"></a>基本类型和包装类型</h2><p>Java 在处理方法入参和返回值时会自动装箱和拆箱，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> i1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">var</span> i2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">var</span> result = add(i1, i2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(Integer i1, Integer i2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> i1 + i2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Groovy 中，基本类型可以直接使用其包装类型的方法，例如 <code>true.toString()</code>，如下方法在 groovy 和 Java 中结果不一致：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span><br>m(i)<br><span class="hljs-comment">// java 中类型提升会优先于装箱操作</span><br><span class="hljs-keyword">void</span> m(<span class="hljs-keyword">long</span> l) &#123;<br>    println <span class="hljs-string">&quot;in m(long)&quot;</span><br>&#125;<br><br><span class="hljs-comment">// groovy 所有基本类型都是使用对应的包装类</span><br><span class="hljs-keyword">void</span> m(Integer i) &#123;<br>    println <span class="hljs-string">&quot;in m(Integer)&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="额外的关键字"><a href="#额外的关键字" class="headerlink" title="额外的关键字"></a>额外的关键字</h2><p>Groovy 有如下额外的关键字：<code>as</code>、<code>def</code>、<code>in</code>、<code>trait</code> 和 <code>it</code>（仅在闭包中）。<br>Groovy 同样支持局部变量类型推断 <code>var</code>。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
      <tag>groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Data MongoDB</title>
    <link href="/2022/08/13/Spring-Data-MongoDB/"/>
    <url>/2022/08/13/Spring-Data-MongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-MongoDB"><a href="#Spring-Data-MongoDB" class="headerlink" title="Spring Data MongoDB"></a>Spring Data MongoDB</h1><p>按照 Spring <a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#repositories">官网教程</a>学习 Spring Data MongoDB。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>Spring Data repository 抽象中的核心接口是 <code>org.springframework.data.repository.Repository</code>，作为一个标记接口，没有定义任何方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Central repository marker interface</span><br><span class="hljs-meta">@Indexed</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接口 <code>org.springframework.data.repository.CrudRepository</code> 定义了复杂的 CRUD 操作方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Interface for generic CRUD operations on a repository for a specific type.</span><br><span class="hljs-meta">@NoRepositoryBean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CrudRepository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; </span>&#123;<br><span class="hljs-comment">// 保存实体</span><br>&lt;S extends T&gt; <span class="hljs-function">S <span class="hljs-title">save</span><span class="hljs-params">(S entity)</span></span>;<br>&lt;S extends T&gt; <span class="hljs-function">Iterable&lt;S&gt; <span class="hljs-title">saveAll</span><span class="hljs-params">(Iterable&lt;S&gt; entities)</span></span>;<br><span class="hljs-comment">// 通过 ID 属性查询</span><br><span class="hljs-function">Optional&lt;T&gt; <span class="hljs-title">findById</span><span class="hljs-params">(ID id)</span></span>;<br>  <span class="hljs-function">Iterable&lt;T&gt; <span class="hljs-title">findAllById</span><span class="hljs-params">(Iterable&lt;ID&gt; ids)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">existsById</span><span class="hljs-params">(ID id)</span></span>;<br><span class="hljs-comment">// 返回所有记录</span><br><span class="hljs-function">Iterable&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 查询所有记录数</span><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">count</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-comment">// 删除指定记录</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(ID id)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(T entity)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteAllById</span><span class="hljs-params">(Iterable&lt;? extends ID&gt; ids)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(Iterable&lt;? extends T&gt; entities)</span></span>;<br><span class="hljs-comment">// 删除所有记录</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对 MongoDB 提供了 <code>org.springframework.data.mongodb.repository.MongoRepository</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Mongo specific Repository interface.</span><br><span class="hljs-meta">@NoRepositoryBean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MongoRepository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">ListCrudRepository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt;, <span class="hljs-title">ListPagingAndSortingRepository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt;, <span class="hljs-title">QueryByExampleExecutor</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>&lt;S extends T&gt; <span class="hljs-function">S <span class="hljs-title">insert</span><span class="hljs-params">(S entity)</span></span>;<br>&lt;S extends T&gt; <span class="hljs-function">List&lt;S&gt; <span class="hljs-title">insert</span><span class="hljs-params">(Iterable&lt;S&gt; entities)</span></span>;<br><span class="hljs-meta">@Override</span><br>&lt;S extends T&gt; <span class="hljs-function">List&lt;S&gt; <span class="hljs-title">findAll</span><span class="hljs-params">(Example&lt;S&gt; example)</span></span>;<br><span class="hljs-meta">@Override</span><br>&lt;S extends T&gt; <span class="hljs-function">List&lt;S&gt; <span class="hljs-title">findAll</span><span class="hljs-params">(Example&lt;S&gt; example, Sort sort)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>org.springframework.data.repository.PagingAndSortingRepository</code> 接口提供方法用于分页查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoRepositoryBean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PagingAndSortingRepository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; </span>&#123;<br><span class="hljs-function">Iterable&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">(Sort sort)</span></span>;<br><span class="hljs-function">Page&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">(Pageable pageable)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202208/132729.png" alt="NoMethodRepository"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202208/132538.png" alt="Repository"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>通过以下步骤使用 Spring Data MongoDB：</p><p>以查询 <code>Person</code> 为例</p><ol><li><p>创建一个接口继承自 <code>Repository</code> 或者它的子接口，并指定泛型参数 <code>T</code> 和 <code>ID</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">Person</span>, <span class="hljs-title">ObjectId</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在接口中声明查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">Person</span>, <span class="hljs-title">ObjectId</span>&gt; </span>&#123;<br>    <span class="hljs-function">List&lt;Person&gt; <span class="hljs-title">findByLastname</span><span class="hljs-params">(String lastname)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过注解 <code>@EnableMongoRepositories</code> 让 Spring 管理查询接口生成接口代理实现类。</p></li><li><p>通过依赖注入获取接口实例，使用查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonRepositoryTest</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PersonRepository personRepository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findByLastname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> personList = personRepository.findByLastname(<span class="hljs-string">&quot;Matthews&quot;</span>);<br>        assertFalse(personList.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="定义-Repository-接口"><a href="#定义-Repository-接口" class="headerlink" title="定义 Repository 接口"></a>定义 <code>Repository</code> 接口</h2><p>定义 Repository 接口可以通过继承 <code>Repository</code> 及其子接口，也可以在自定义接口上增加 <code>org.springframework.data.repository.RepositoryDefinition</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Annotating an interface with RepositoryDefinition will cause the same behaviour as extending Repository.</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RepositoryDefinition &#123;<br>Class&lt;?&gt; domainClass();<br>Class&lt;?&gt; idClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RepositoryDefinition(domainClass = Person.class, idClass = ObjectId.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AnnotationPersonRepository</span> </span>&#123;<br>    <span class="hljs-function">List&lt;Person&gt; <span class="hljs-title">findByLastname</span><span class="hljs-params">(String lastname)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="微调-Repository-定义"><a href="#微调-Repository-定义" class="headerlink" title="微调 Repository 定义"></a>微调 Repository 定义</h3><p>如果只想暴露部分方法，比如自定义的 Repository 中不提供删除方法，可以从 <code>CrudRepository</code> 复制其它方法到接口中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义 Repository 只提供保存和查询方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> linxiang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NoRepositoryBean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CustomBaseRepository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">ID</span>&gt; </span>&#123;<br>    &lt;S extends T&gt; <span class="hljs-function">S <span class="hljs-title">save</span><span class="hljs-params">(S entity)</span></span>;<br><br>    <span class="hljs-function">Optional&lt;T&gt; <span class="hljs-title">findById</span><span class="hljs-params">(ID id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加 <code>org.springframework.data.repository.NoRepositoryBean</code> 注解避免 Spring 为接口创建代理对象。</p><h3 id="使用多个-Spring-Data-模块"><a href="#使用多个-Spring-Data-模块" class="headerlink" title="使用多个 Spring Data 模块"></a>使用多个 Spring Data 模块</h3><p>可以在项目中同时使用多个 Spring Data 模块，比如 Spring Data Jpa 和 Spring Data MongoDB，有几种方式可以区分它们：</p><ol><li><p>Repository 定义时继承特定接口，比如 <code>MongoRepository</code> 和 <code>JpaRepository</code>；</p></li><li><p>通过实体类上的注解区分，比如 <code>@Entity</code> 用于 Jpa ，<code>@Document</code> 用于 MongoDB；</p></li><li><p>通过 <code>@Enable$&#123;store&#125;Repositories</code> 注解区分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableJpaRepositories(basePackages = &quot;com.acme.repositories.jpa&quot;)</span><br><span class="hljs-meta">@EnableMongoRepositories(basePackages = &quot;com.acme.repositories.mongo&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="MongoTemplate-介绍"><a href="#MongoTemplate-介绍" class="headerlink" title="MongoTemplate 介绍"></a><code>MongoTemplate</code> 介绍</h2><p><code>org.springframework.data.mongodb.core.MongoTemplate</code> 是 Spring MongoDB 的核心类，该模板提供了增删改查方法以及 MongoDB <code>Document</code> 和 Java <code>POJO</code> 转换的方法。<code>MongoTemplate</code> 是线程安全的。</p><p>MongoDB <code>Document</code> 和 Java <code>pojo</code> 转换是委托 <code>org.springframework.data.mongodb.core.convert.MongoConverter</code> 接口实现的，Spring 的默认实现类是 <code>org.springframework.data.mongodb.core.convert.MappingMongoConverter</code>。</p><p><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template">https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template</a></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2 基础</title>
    <link href="/2022/08/11/Vue%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/11/Vue%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue2-基础"><a href="#Vue2-基础" class="headerlink" title="Vue2 基础"></a>Vue2 基础</h1><p>Vue2：<a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p><p>Vue 是一套用于构建用户界面的渐进式框架。</p><h2 id="Vue-特点"><a href="#Vue-特点" class="headerlink" title="Vue 特点"></a>Vue 特点</h2><ul><li>采用组件化模式，提高代码复用率，且让代码更好维护；</li><li>申明式编码，无需直接操作 DOM，提高开发效率；</li><li>使用虚拟 DOM 和 Diff 算法，尽量复用 DOM。</li></ul><h2 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h2><p>通过 <code>Vue</code> 函数创建 Vue 实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vue 实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br>        data: &#123;<br><span class="javascript">            msg: <span class="hljs-string">&#x27;Vue 实例&#x27;</span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>el</code>：用于指定当前 Vue 实例为哪个容器服务，通常为 css 选择器字符串。</p><p>Vue 实例和容器是一一对应的。</p><h3 id="el-和-data-的两种写法"><a href="#el-和-data-的两种写法" class="headerlink" title="el 和 data 的两种写法"></a><code>el</code> 和 <code>data</code> 的两种写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    name: &#39;Vue&#39;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br><br><br>&lt;div id&#x3D;&quot;root1&quot;&gt;<br>&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>new Vue(&#123;<br>  data() &#123;<br>    return &#123;<br>      name: &#39;Vue&#39;<br>    &#125;<br>  &#125;<br>&#125;).$mount(&#39;#root1&#39;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p><code>el</code> 的两种写法：</p><ul><li><code>new Vue</code> 是指定配置属性</li><li>先创建 Vue 实例，通过 <code>$mount(&#39;#root1&#39;)</code> 指定 <code>el</code> 值</li></ul><p>data 可以使用对象式或函数式写法；</p><p>由 Vue 管理的函数，不能使用箭头函数，箭头函数中的 <code>this</code> 不是 Vue 实例。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h1&gt;插值语法&lt;&#x2F;h1&gt;<br>&lt;h3&gt;Hello,&#123;&#123;name&#125;&#125;&lt;&#x2F;h3&gt;<br>&lt;hr&gt;<br>&lt;h1&gt;指令语法&lt;&#x2F;h1&gt;<br>&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.bing.com&quot;&gt;Bing&lt;&#x2F;a&gt;<br>&lt;br&gt;<br>&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;Bing&lt;&#x2F;a&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    name: &#39;Vue&#39;,<br>    url: &#39;https:&#x2F;&#x2F;www.bing.com&#39;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><p>用于解析标签体内容，写法 <code>&#123;&#123;xx&#125;&#125;</code>，<code>xx</code> 是 js 表达式，且可以读取到 <code>data</code> 中的所有属性。</p><h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><p>用于解析标签，包括：标签属性、标签体内容、绑定事件等，<code>v-bind:href=&quot;url&quot;</code> 简写为 <code>:href=&quot;url&quot;</code></p><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;label&gt;<br>  单向数据绑定：<br>  &lt;input type&#x3D;&quot;text&quot; v-bind:value&#x3D;&quot;name&quot;&gt;<br>  &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;name&quot;&gt;<br>&lt;&#x2F;label&gt;<br>&lt;br&gt;<br>&lt;label&gt;<br>  双向数据绑定：<br>  &lt;input type&#x3D;&quot;text&quot; v-model:value&#x3D;&quot;name&quot;&gt;<br>  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;<br>&lt;&#x2F;label&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    name: &#39;Vue&#39;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>Vue 中的数据绑定方式：</p><ul><li>单向绑定 <code>v-bind</code>：数据从 <code>data</code> 流向页面</li><li>双向绑定 <code>v-model</code>：它负责监听用户的输入事件以更新数据<ul><li>双向绑定一般都应用在表单类元素上（如 <code>input</code> 、<code>select</code>）；</li><li><code>v-model:value</code> 可以简写为 <code>v-model</code>，因为 <code>v-model</code> 默认收集 <code>value</code> 值。</li></ul></li></ul><h2 id="MVVM-模型"><a href="#MVVM-模型" class="headerlink" title="MVVM 模型"></a>MVVM 模型</h2><p>MVVM 模型：<a href="https://zh.wikipedia.org/wiki/MVVM">https://zh.wikipedia.org/wiki/MVVM</a></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202208/172859.png" alt="MVVMPattern"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202208/172739.png" alt="image-20220827172739393"></p><p>MVVM 模型代表 M、V 和 VM</p><p>M：模型 <code>Model</code>：<code>data</code> 中的数据</p><p>V：视图 <code>View</code>：模板代码</p><p>VM：视图模型 <code>ViewModel</code>：Vue 实例</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p><p>语法：<code>Object.defineProperty(obj, prop, descriptor)</code></p><p>参数：</p><p><code>obj</code>：要定义属性的对象。</p><p><code>prop</code>：要定义或修改的属性的名称。</p><p><code>descriptor</code>：要定义或修改的属性描述符。</p><p><code>descriptor</code> 的配置项：</p><ul><li><code>value</code>：该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。 默认为 <code>undefined</code></li><li><code>configurable</code>：配置为 <code>true</code> 时属性能从对象上删除，默认为 <code>false</code>；</li><li><code>enumerable</code>：配置为 <code>true</code> 时属性出现在对象的枚举属性中，默认为 <code>false</code>；</li><li><code>writable</code>：配置为 <code>true</code> 时，配置的 <code>value</code> 才能被赋值运算符改变，默认为 <code>false</code>；</li></ul><h3 id="数据代理-1"><a href="#数据代理-1" class="headerlink" title="数据代理"></a>数据代理</h3><p>通过一个对象代理对另一个对象中属性的读写操作。</p><h3 id="Vue-中的数据代理"><a href="#Vue-中的数据代理" class="headerlink" title="Vue 中的数据代理"></a>Vue 中的数据代理</h3><p>通过 <code>vm</code> 对象代理 <code>data</code> 对象中数据的读写操作，好处是可以方便的操作 <code>data</code> 中的数据。</p><p>基本原理：通过 <code>Object.defineProperty()</code> 把 <code>data</code> 对象中所有属性添加到 <code>vm</code> 中，为每一个添加到 <code>vm</code><br>的属性都指定 <code>getter/setter</code> ，在 <code>getter/setter</code> 中读写 <code>data</code> 中对应的属性。</p><h2 id="Vue-中事件处理"><a href="#Vue-中事件处理" class="headerlink" title="Vue 中事件处理"></a>Vue 中事件处理</h2><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h1&gt;Hello, &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;<br>&lt;!--    &lt;button v-on:click&#x3D;&quot;showInfo&quot;&gt;点击提示信息&lt;&#x2F;button&gt;--&gt;<br>&lt;button @click&#x3D;&quot;showInfo1&quot;&gt;点击提示信息1&lt;&#x2F;button&gt;<br><br>&lt;button @click&#x3D;&quot;showInfo2(66,$event)&quot;&gt;点击提示信息2&lt;&#x2F;button&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    msg: &#39;Vue&#39;<br>  &#125;,<br>  methods: &#123;<br>    showInfo1(event) &#123;<br>      &#x2F;&#x2F; console.log(event.target)<br>      &#x2F;&#x2F; console.log(this)<br>      alert(&#39;点击&#39;)<br>    &#125;,<br>    showInfo2(number, e) &#123;<br>      console.log(number, e)<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>使用 <code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，事件回调配置在 <code>methods</code> 中。可以用特殊变量 <code>$event</code> 访问原始的 DOM 事件对象。</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;!-- 阻止单击事件继续传播 --&gt;<br>&lt;button v-on:click.stop&#x3D;&quot;doThis&quot;&gt;点击&lt;&#x2F;button&gt;<br>&lt;!-- 提交事件不再重载页面 --&gt;<br>&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;<br>  &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;<br>&lt;&#x2F;form&gt;<br>&lt;!-- 点击事件将只会触发一次 --&gt;<br>&lt;a v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  methods: &#123;<br>    doThis() &#123;<br>      console.log(&#39;doThis&#39;)<br>    &#125;,<br>    onSubmit() &#123;<br>      console.log(&#39;onSubmit&#39;)<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p><code>prevent</code>：同 <code>event.preventDefault()</code> ，阻止默认事件。</p><p><code>stop</code>：同 <code>event.stopPropagation()</code> ，阻止事件冒泡。</p><p><code>once</code>：事件只会触发一次。</p><p>事件修饰符可以连写：<code>@click.stop.prevent</code></p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup&#x3D;&quot;showInfo&quot;&gt;<br>&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;制表符&quot; @keydown.tab&#x3D;&quot;showKeyCode&quot;&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  methods: &#123;<br>    showInfo(e) &#123;<br>      if (e.keyCode &#x3D;&#x3D;&#x3D; 13) &#123;<br>        console.log(e.target.value)<br>      &#125;<br>    &#125;,<br>    showKeyCode(e) &#123;<br>      console.log(e.key, e.keyCode)<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>Vue 中常用的按键别名：</p><p>回车 =&gt; <code>enter</code> =&gt; <code>13</code></p><p>删除 =&gt; <code>delete</code> （同时捕获“删除<code>8</code>”和“退格<code>46</code>”）</p><p>退出 =&gt; <code>esc</code> =&gt; <code>27</code></p><p>空格 =&gt; <code>space</code> =&gt; <code>32</code></p><p>制表符 =&gt; <code>tab</code> =&gt; <code>9</code></p><p>上、下、左、右 =&gt; <code>up down left right</code></p><p>Vue 未提供按键别名的按键，可以使用按键原始的 key 值绑定，但要转换为 kebab-case（短横线命名）。</p><p>系统修饰键：<code>ctrl</code>、<code>alt</code>、<code>shift</code> 和 <code>meta</code> 使用 <code>keydown</code> 正常触发事件，使用 <code>keyup</code> 需要再按下其它键，随后释放才触发事件。</p><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;label&gt;<br>  姓：<br>  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;<br>&lt;&#x2F;label&gt; &lt;br&gt;&lt;br&gt;<br>&lt;label&gt;<br>  名：<br>  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;<br>&lt;&#x2F;label&gt; &lt;br&gt;&lt;br&gt;<br>全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    firstName: &#39;张&#39;,<br>    lastName: &#39;三&#39;<br>  &#125;,<br>  computed: &#123;<br>    fullName: &#123;<br>      get() &#123;<br>        return this.firstName + &#39;-&#39; + this.lastName<br>      &#125;,<br>      set(val) &#123;<br>        let arr &#x3D; val.split(&#39;-&#39;)<br>        this.firstName &#x3D; arr[0]<br>        this.lastName &#x3D; arr[1]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>通过已有的属性计算出新属性称为计算属性，底层借助了 <code>Object.defineproperty</code> 方法提供 <code>getter</code> 和 <code>setter</code>。</p><p>计算属性会缓存结果，只有在其依赖的属性变化时，计算属性才会重新计算。</p><h3 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;button @click&#x3D;&quot;changeWeather&quot;&gt;切换天气&lt;&#x2F;button&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>const vm &#x3D; new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    isHot: true<br>  &#125;,<br>  computed: &#123;<br>    info() &#123;<br>      return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;<br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    isHot: &#123;<br>      immediate: true,<br>      handler(newValue, oldValue) &#123;<br>        console.log(&#39;isHot 被修改了&#39;, newValue, oldValue)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    changeWeather() &#123;<br>      this.isHot &#x3D; !this.isHot<br>    &#125;<br>  &#125;<br>&#125;)<br>&#x2F;&#x2F; 监视属性API<br>vm.$watch(&#39;isHot&#39;, &#123;<br>  immediate: true,<br>  handler(newValue, oldValue) &#123;<br>    console.log(&#39;isHot 被修改了&#39;, newValue, oldValue)<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>当被监视的属性变化时，回调函数自动调用，或执行异步或耗时较长的操作。监视属性使用 <code>watch</code> 配置或使用 <code>vm.$watch</code> 配置监视。</p><p><code>immediate</code>：立即触发回调函数</p><p><code>deep</code>：深度监视，监视对象内部值的变化</p><p>监视对象的回调函数中 <code>newValue</code> 和 <code>oldValue</code> 是一致的，可以配合计算属性，序列化生成新对象避免此问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h2&gt;numbers 的 a 是 &#123;&#123;numbers.a&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;button @click&#x3D;&quot;numbers.a++&quot;&gt;点击 a + 1&lt;&#x2F;button&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>const vm &#x3D; new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    numbers: &#123;<br>      a: 1,<br>      b: 2<br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    newNumbers() &#123;<br>      return JSON.parse(JSON.stringify(this.numbers))<br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    numbers: &#123;<br>      handler(newValue, oldValue) &#123;<br>        console.log(&#39;numbers 被改变了&#39;, newValue, oldValue)<br>      &#125;,<br>      deep: true<br>    &#125;,<br>    newNumbers(newVal, oldVal) &#123;<br>      console.log(&#39;newNumbers 被改变了&#39;, newVal, oldVal)<br>    &#125;<br>  &#125;,<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><h3 id="绑定-class-样式"><a href="#绑定-class-样式" class="headerlink" title="绑定 class 样式"></a>绑定 class 样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;style&gt;<br>.basic &#123;<br>&#125;<br><br>.normal &#123;<br>&#125;<br><br>.happy &#123;<br>&#125;<br><br>.sad &#123;<br>&#125;<br><br>.s1 &#123;<br>&#125;<br><br>.s2 &#123;<br>&#125;<br><br>.s3 &#123;<br>&#125;<br>&lt;&#x2F;style&gt;<br><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;!-- 绑定 class 样式——字符串写法 --&gt;<br>&lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;mood&quot; id&#x3D;&quot;demo&quot; @click&#x3D;&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;<br>&lt;!-- 绑定 class 样式——数组写法 --&gt;<br>&lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;<br>&lt;!-- 绑定 class 样式——对象写法 --&gt;<br>&lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    name: &#39;Vue&#39;,<br>    mood: &#39;normal&#39;,<br>    classArr: [&#39;s1&#39;, &#39;s2&#39;, &#39;s3&#39;],<br>    classObj: &#123;<br>      s1: true,<br>      s2: true,<br>      s3: true,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    changeMood() &#123;<br>      this.mood &#x3D; &#39;happy&#39;<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="绑定-style-样式"><a href="#绑定-style-样式" class="headerlink" title="绑定 style 样式"></a>绑定 style 样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;!-- 绑定 style 样式——对象写法 --&gt;<br>&lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>const vm &#x3D; new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    styleObj: &#123;<br>      fontSize: &#39;40px&#39;<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h1 v-show&#x3D;&quot;show&quot;&gt;Hello,&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;<br><br>&lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;<br>  A<br>&lt;&#x2F;div&gt;<br>&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;<br>  B<br>&lt;&#x2F;div&gt;<br>&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;<br>  C<br>&lt;&#x2F;div&gt;<br>&lt;div v-else&gt;<br>  Not A&#x2F;B&#x2F;C<br>&lt;&#x2F;div&gt;<br><br>&lt;template v-if&#x3D;&quot;show&quot;&gt;<br>  &lt;h1&gt;Title&lt;&#x2F;h1&gt;<br>  &lt;p&gt;Paragraph 1&lt;&#x2F;p&gt;<br>  &lt;p&gt;Paragraph 2&lt;&#x2F;p&gt;<br>&lt;&#x2F;template&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    name: &#39;Vue&#39;,<br>    show: true,<br>    type: &#39;D&#39;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><ul><li><code>v-if</code>：可以与 <code>v-else-if</code> 和 <code>v-else</code> 配合使用，可以与 <code>template</code> 配合使用渲染分组；</li><li><code>v-show</code>：元素被渲染，通过 <code>display</code> 样式切换，适用于非常频繁的切换。</li></ul><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;!-- 遍历数组 --&gt;<br>&lt;h2&gt;人员列表&lt;&#x2F;h2&gt;<br>&lt;ul&gt;<br>  &lt;li v-for&#x3D;&quot;(p, index) in persons&quot; :key&#x3D;&quot;p.id&quot;&gt;<br>    &#123;&#123;index&#125;&#125;-&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<br>  &lt;&#x2F;li&gt;<br>&lt;&#x2F;ul&gt;<br>&lt;!-- 遍历对象 --&gt;<br>&lt;h2&gt;汽车信息&lt;&#x2F;h2&gt;<br>&lt;ul&gt;<br>  &lt;li v-for&#x3D;&quot;(v, k) of car&quot; :key&#x3D;&quot;k&quot;&gt;<br>    &#123;&#123;k&#125;&#125;: &#123;&#123;v&#125;&#125;<br>  &lt;&#x2F;li&gt;<br>&lt;&#x2F;ul&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    persons: [<br>      &#123;id: &#39;001&#39;, name: &#39;张三&#39;, age: 18&#125;,<br>      &#123;id: &#39;002&#39;, name: &#39;李四&#39;, age: 19&#125;,<br>      &#123;id: &#39;003&#39;, name: &#39;王五&#39;, age: 20&#125;,<br>    ],<br>    car: &#123;<br>      name: &#39;A8&#39;,<br>      price: &#39;70W&#39;,<br>      color: &#39;黑色&#39;<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p><code>v-for</code> 可以用于遍历数组、对象、字符串以及次数。</p><h3 id="key-的原理"><a href="#key-的原理" class="headerlink" title="key 的原理"></a>key 的原理</h3><p><code>key</code> 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据新数据生成新的虚拟 DOM，随后 Vue 进行新旧虚拟 DOM 的差异对比。<br>虚拟 DOM 对比规则：</p><ul><li>旧虚拟 DOM 中存在与新虚拟 DOM <code>key</code> 相同的元素，如果虚拟 DOM 中内容没变，直接复用之前的真实 DOM。如果虚拟 DOM<br>中内容发生变化，生成新的真实 DOM。</li><li>旧虚拟 DOM 中不存在与新虚拟 DIM <code>key</code> 相同的元素，生成新的真实 DOM，渲染到页面中。</li></ul><p>使用 <code>index</code> 作为 <code>key</code> 时对数据进行破环顺序的操作，会产生没有必要的真实 DOM 更新，效率较低。如果结构中还包含输入类的元素，会产生错误的<br>DOM 更新。</p><h2 id="Vue-监视数据的原理"><a href="#Vue-监视数据的原理" class="headerlink" title="Vue 监视数据的原理"></a>Vue 监视数据的原理</h2><ul><li>Vue 会监视 <code>data</code> 中所有层次的数据。</li><li>通过 <code>setter</code> 监视对象中的数据，且要在 <code>new Vue</code> 时传入监视的数据。对象中后追加的属性，Vue 默认不做响应式处理，可以使用如下<br>API 为添加的属性做响应式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">Vue.set(target, propertyName&#x2F;index, value)<br>vm.$set(target, propertyName&#x2F;index, value)<br></code></pre></td></tr></table></figure></li><li>通过包裹数组更新方法监视数组中的数据，即调用数组原生方法更新数据，然后重新解析模板。这些方法包括：<code>push</code>、<code>pop</code>、<code>shift</code><br>、<code>unshift</code>、<code>splice</code>、<code>sort</code> 和 <code>reverse</code>。</li><li><code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给 <code>vm</code> 或 <code>vm</code> 的根数据对象(<code>_data</code>) 添加属性。</li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h1&gt;当前时间&lt;&#x2F;h1&gt;<br>&lt;h2&gt;时间戳：&#123;&#123;time&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;h2&gt;格式化：&#123;&#123;fmtTime&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;h2&gt;格式化：&#123;&#123;getFmtTime()&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;h2&gt;格式化：&#123;&#123;time | timeFormatter(&#39;YYYY年MM月DD日&#39;)&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;h2&gt;首字母大写：&#123;&#123;&#39;hello&#39; | capitalize&#125;&#125;&lt;&#x2F;h2&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br>Vue.filter(&#39;capitalize&#39;, function (val) &#123;<br>  if (!val) &#123;<br>    return &#39;&#39;<br>  &#125;<br>  val &#x3D; val.toString()<br>  return val.charAt(0).toUpperCase() + val.slice(1)<br>&#125;)<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    time: 1669816105394<br>  &#125;,<br>  computed: &#123;<br>    fmtTime() &#123;<br>      return dayjs(this.time).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    getFmtTime() &#123;<br>      return dayjs(this.time).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)<br>    &#125;<br>  &#125;,<br>  filters: &#123;<br>    timeFormatter(value, pattern &#x3D; &#39;YYYY-MM-DD HH:mm:ss&#39;) &#123;<br>      return dayjs(value).format(pattern)<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>过滤器可用于一些简单的操作，比如文本格式化。过滤器可以用在 <code>&#123;&#123;&#125;&#125;</code> 插值和 <code>v-bind</code> 表达式中，过滤器跟在管道符号 <code>|</code> 后面。</p><p>使用过滤器的两种方式：</p><ul><li>使用 <code>filters</code> 配置项在组件中定义本地过滤器。</li><li>在创建 Vue 实例前使用 <code>Vue.filter()</code> 定义全局过滤器。</li></ul><p>过滤器默认接受管道符号前表达式的值作为第一个参数。</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;div id&#x3D;&quot;root&quot;&gt;<br>&lt;h2&gt;当前的 n：&lt;span v-text&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;<br>&lt;h2&gt;放大的 n：&lt;span v-big-number&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;<br>&lt;button @click&#x3D;&quot;n++&quot;&gt;点击+1&lt;&#x2F;button&gt;<br>&lt;br&gt;<br>&lt;br&gt;<br>&lt;input type&#x3D;&quot;text&quot; v-fbind&#x3D;&quot;n&quot;&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;script&gt;<br>Vue.config.productionTip &#x3D; false<br>&#x2F;&#x2F; bind 和 update 触发相同行为<br>Vue.directive(&#39;big-number&#39;, function (element, binding) &#123;<br>  element.innerText &#x3D; binding.value * 10<br>&#125;)<br><br>new Vue(&#123;<br>  el: &#39;#root&#39;,<br>  data: &#123;<br>    n: 0<br>  &#125;,<br>  directives: &#123;<br>    fbind: &#123;<br>      bind(element, binding) &#123;<br>        element.value &#x3D; binding.value<br>      &#125;,<br>      inserted(element) &#123;<br>        element.focus()<br>      &#125;,<br>      update(element, binding) &#123;<br>        element.value &#x3D; binding.value<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="指令的两种注册方式"><a href="#指令的两种注册方式" class="headerlink" title="指令的两种注册方式"></a>指令的两种注册方式</h3><ul><li>使用 <code>Vue.directive()</code> 注册全局指令。</li><li>使用 <code>directives</code> 配置项注册局部指令。</li></ul><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用，做初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用。</li><li><code>update</code>：所在组件的 VNode 更新时调用。</li></ul><p>钩子函数的参数：</p><ul><li><code>el</code>：指令所绑定的真实 DOM。</li><li><code>binding</code>：对象，包含一下属性：<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令绑定的值。</li></ul></li><li>……</li></ul><h2 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h2><p>常用的生命周期钩子：</p><ul><li><code>mounted</code>：发送请求、启动定时器、绑定自定义事件、订阅消息等初始化操作。</li><li><code>beforeDestroy</code>：清除定时器、解绑自定义事件、取消订阅消息等收尾工作。</li></ul><p>关于销毁 Vue 实例：</p><ul><li>销毁后自定义事件会失效、但原生 DOM 事件依然有效。</li><li>一般不会在 <code>beforeDestory</code> 中操作数据，即使操作了数据，也不会触发更新流程。</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB-CRUD操作</title>
    <link href="/2022/06/26/MongoDB-CRUD%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/06/26/MongoDB-CRUD%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-基本操作"><a href="#MongoDB-基本操作" class="headerlink" title="MongoDB 基本操作"></a>MongoDB 基本操作</h1><p>MongoDB 基本操作细节请参考官方文档：<a href="https://www.mongodb.com/docs/manual/crud/">MongoDB CRUD Operations</a>。</p><p>CRUD 的基本命令如下：</p><p>Create：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.insertOne()<br>db.collection.insertMany()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181725.png" alt="image-20220521181725818" style="zoom:50%;" /><p>Read：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.find()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181801.png" alt="image-20220521181801072" style="zoom:50%;" /><p>Update：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.updateOne()<br>db.collection.updateMany()<br>db.collection.replaceOne()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181827.png" alt="image-20220521181827147" style="zoom:50%;" /><p>Delete：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.deleteOne()<br>db.collection.deleteMany()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181854.png" alt="image-20220521181854587" style="zoom:50%;" /><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><p>使用 <code>db.collection.insertOne()</code> 插入单条记录到集合中，如果插入的集合没有指定 <code>_id</code> 字段，MongoDB 会自动生成一个 <code>ObjectId</code>，如果集合不存在，那么插入时会创建对应的集合。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertOne( &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/221500.png" alt="image-20220521221500429"></p><p>插入成功后会返回记录对应的 <code>_id</code>。</p><p>插入多条记录和插入单条记录一样，只需要使用 <code>db.collection.insertMany()</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany([<br>   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,<br>   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,<br>   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;<br>])<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/221940.png" alt="image-20220521221939960"></p><h3 id="插入行为"><a href="#插入行为" class="headerlink" title="插入行为"></a>插入行为</h3><p>如果集合不存在，插入操作会新建集合；</p><p>集合中的每条文档记录需要一个唯一的 <code>_id</code> 字段作为主键，如果插入的文档没有提供 <code>_id</code> 字段，MongoDB 会自动生成一个 <code>ObjectId</code> 类型的 <code>_id</code> 作为主键；</p><p>MongoDB 中的所有写操作在单个文档级别上都是原子的。</p><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>查询选择器：<a href="https://www.mongodb.com/docs/manual/reference/operator/query/#query-selectors">query-selectors</a>。</p><h3 id="基本查询操作"><a href="#基本查询操作" class="headerlink" title="基本查询操作"></a>基本查询操作</h3><p>使用如下测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany([<br>   &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;,<br>   &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;,<br>   &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;<br>]);<br></code></pre></td></tr></table></figure><p>使用 <code>db.collection.find(&#123;&#125;)</code> 查询文档，查询所有记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find( &#123;&#125; )<br></code></pre></td></tr></table></figure><p>指定相等条件查询：<code>status</code> 等于 <code>D</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find( &#123; status: &quot;D&quot; &#125; )<br></code></pre></td></tr></table></figure><p>指定 <code>AND</code> 条件查询：<code>status</code> 等于 <code>A</code> 且 <code>qty</code> 小于 30</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;status: &quot;A&quot;, qty:&#123;$lt: 30&#125;&#125;)<br></code></pre></td></tr></table></figure><p>指定 <code>OR</code> 查询条件：<code>status</code> 等于 <code>A</code> 或 <code>qty</code> 小于 30</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;$or: [&#123;status: &quot;A&quot;&#125;, &#123;qty: &#123;$lt: 30&#125;&#125;]&#125;)<br></code></pre></td></tr></table></figure><p>同时指定 <code>AND</code> 和 <code>OR</code> 查询条件：<code>status</code> 等于 <code>A</code> 并且 <code>qty</code> 小于 30 或者 <code>item</code> 以 <code>p</code> 开头：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find( &#123;<br>     status: &quot;A&quot;,<br>     $or: [ &#123; qty: &#123; $lt: 30 &#125; &#125;, &#123; item: /^p/ &#125; ]<br>&#125; )<br></code></pre></td></tr></table></figure><h3 id="查询嵌套文档"><a href="#查询嵌套文档" class="headerlink" title="查询嵌套文档"></a>查询嵌套文档</h3><p>使用如下测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany( [<br>   &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;,<br>   &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;,<br>   &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;<br>]);<br></code></pre></td></tr></table></figure><p> 匹配嵌入文档（要求文档内的键值及顺序完全匹配）：<code>size</code> 等于 <code>&#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;size:&#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;&#125;)<br></code></pre></td></tr></table></figure><p>查询嵌套字段：查询 <code>size</code> 中 <code>uom</code> 值为 <code>in</code> 的文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;&#x27;size.uom&#x27;:&#x27;in&#x27;&#125;)<br></code></pre></td></tr></table></figure><h3 id="查询简单元素-Array"><a href="#查询简单元素-Array" class="headerlink" title="查询简单元素 Array"></a>查询简单元素 Array</h3><p>使用如下测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany([<br>   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], dim_cm: [ 14, 21 ] &#125;,<br>   &#123; item: &quot;notebook&quot;, qty: 50, tags: [&quot;red&quot;, &quot;blank&quot;], dim_cm: [ 14, 21 ] &#125;,<br>   &#123; item: &quot;paper&quot;, qty: 100, tags: [&quot;red&quot;, &quot;blank&quot;, &quot;plain&quot;], dim_cm: [ 14, 21 ] &#125;,<br>   &#123; item: &quot;planner&quot;, qty: 75, tags: [&quot;blank&quot;, &quot;red&quot;], dim_cm: [ 22.85, 30 ] &#125;,<br>   &#123; item: &quot;postcard&quot;, qty: 45, tags: [&quot;blue&quot;], dim_cm: [ 10, 15.25 ] &#125;<br>]);<br></code></pre></td></tr></table></figure><p>匹配数组（要求数组值及顺序完全匹配）：<code>tags</code> 等于 <code>[&quot;blank&quot;, &quot;red&quot;]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;tags:[&#x27;blank&#x27;,&#x27;red&#x27;]&#125;)<br></code></pre></td></tr></table></figure><p>匹配数组中部分元素（不要求值及顺序完全匹配）：<code>tags</code> 包含 <code>blank</code> 和 <code>red</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;tags:&#123;$all:[&#x27;blank&#x27;,&#x27;red&#x27;]&#125;&#125;)<br></code></pre></td></tr></table></figure><p>匹配数组中某个元素：<code>tags</code> 包含 <code>red</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;tags:&#x27;red&#x27;&#125;)<br></code></pre></td></tr></table></figure><p><code>dim_cm</code> 中有大于 25 的元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;dim_cm:&#123;$gt:25&#125;&#125;)<br></code></pre></td></tr></table></figure><p><code>dim_cm</code> 中包含大于 15 或小于 20 的元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;dim_cm:&#123;$gt:15,$lt:20&#125;&#125;)<br></code></pre></td></tr></table></figure><p><code>dim_cm</code> 中包含大于 15 且小于 20 的元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;dim_cm:&#123;$elemMatch:&#123;$gt:15,$lt:20&#125;&#125;&#125;)<br></code></pre></td></tr></table></figure><p>按数组索引位置查询元素：<code>dim_cm</code> 中第二个元素大于 20</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;&#x27;dim_cm.1&#x27;:&#123;$gt:20&#125;&#125;)<br></code></pre></td></tr></table></figure><p>按数组长度查询数组：<code>tags</code> 数组有三个元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;tags:&#123;$size:3&#125;&#125;)<br></code></pre></td></tr></table></figure><h3 id="查询嵌套文档数组"><a href="#查询嵌套文档数组" class="headerlink" title="查询嵌套文档数组"></a>查询嵌套文档数组</h3><p>使用如下测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany( [<br>   &#123; item: &quot;journal&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 5 &#125;, &#123; warehouse: &quot;C&quot;, qty: 15 &#125; ] &#125;,<br>   &#123; item: &quot;notebook&quot;, instock: [ &#123; warehouse: &quot;C&quot;, qty: 5 &#125; ] &#125;,<br>   &#123; item: &quot;paper&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 60 &#125;, &#123; warehouse: &quot;B&quot;, qty: 15 &#125; ] &#125;,<br>   &#123; item: &quot;planner&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 40 &#125;, &#123; warehouse: &quot;B&quot;, qty: 5 &#125; ] &#125;,<br>   &#123; item: &quot;postcard&quot;, instock: [ &#123; warehouse: &quot;B&quot;, qty: 15 &#125;, &#123; warehouse: &quot;C&quot;, qty: 35 &#125; ] &#125;<br>]);<br></code></pre></td></tr></table></figure><p>以文档形式匹配数组中某个元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;instock:&#123;warehouse:&#x27;A&#x27;,qty:5&#125;&#125;)<br></code></pre></td></tr></table></figure><p>在文档数组中某个字段上指定查询条件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;&#x27;instock.qty&#x27;:&#123;$lt:20&#125;&#125;)<br></code></pre></td></tr></table></figure><p>在数组中指定索引的文档某个字段上指定查询条件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;&#x27;instock.0.qty&#x27;:&#123;$lte:20&#125;&#125;)<br></code></pre></td></tr></table></figure><h3 id="查询-null-或不存在字段"><a href="#查询-null-或不存在字段" class="headerlink" title="查询 null 或不存在字段"></a>查询 <code>null</code> 或不存在字段</h3><p>使用如下测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany([<br>   &#123; _id: 1, item: null &#125;,<br>   &#123; _id: 2 &#125;<br>])<br></code></pre></td></tr></table></figure><p>查询字段存在且等于 <code>null</code> 或者字段不存在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;item:null&#125;)<br></code></pre></td></tr></table></figure><p>类型检查 <a href="https://www.mongodb.com/docs/manual/reference/bson-types/">bson-types</a>，查询查询字段存在且等于 <code>null</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find(&#123;item:&#123;$type:10&#125;&#125;)<br></code></pre></td></tr></table></figure><p>存在检查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find( &#123; item : &#123; $exists: false &#125; &#125; )<br></code></pre></td></tr></table></figure><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>使用如下测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertMany( [<br>   &#123; item: &quot;canvas&quot;, qty: 100, size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;mat&quot;, qty: 85, size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;mousepad&quot;, qty: 25, size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125;, status: &quot;P&quot; &#125;,<br>   &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;P&quot; &#125;,<br>   &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;,<br>   &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;,<br>   &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;sketchbook&quot;, qty: 80, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,<br>   &#123; item: &quot;sketch pad&quot;, qty: 95, size: &#123; h: 22.85, w: 30.5, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;<br>] );<br></code></pre></td></tr></table></figure><p><a href="https://www.mongodb.com/docs/manual/reference/operator/update/">Update Operators</a></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB 基础知识</title>
    <link href="/2022/05/21/MongoDB-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/05/21/MongoDB-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-基础知识"><a href="#MongoDB-基础知识" class="headerlink" title="MongoDB 基础知识"></a>MongoDB 基础知识</h1><p>为「MongoDB高手课 - 极客时间视频课程」第一部分「MongoDB 再入门」的学习记录，相关内容地址如下：</p><p>视频教程：<a href="https://www.bilibili.com/video/BV1rL4y1u74D?spm_id_from=333.337.search-card.all.click">MongoDB教程全集</a></p><p>课件资料：<a href="https://github.com/geektime-geekbang/geektime-mongodb-course">geektime-mongodb-course</a></p><h2 id="MongoDB-介绍"><a href="#MongoDB-介绍" class="headerlink" title="MongoDB 介绍"></a>MongoDB 介绍</h2><h3 id="OLTP-和-OLAP"><a href="#OLTP-和-OLAP" class="headerlink" title="OLTP 和 OLAP"></a>OLTP 和 OLAP</h3><p><a href="https://www.zhihu.com/question/24110442/answer/851671343">OLTP与OLAP的关系</a>：<code>OLTP</code>（<code>On-Line Transaction Processing</code>）翻译为联机事务处理， <code>OLAP</code>（<code>On-Line Analytical Processing</code>）翻译为联机分析处理，从字面上来看 <code>OLTP</code> 是做事务处理，<code>OLAP</code> 是做分析处理。从对数据库操作来看，<code>OLTP</code> 主要是对数据的增删改，<code>OLAP</code> 是对数据的查询。</p><h3 id="关于-MongoDB"><a href="#关于-MongoDB" class="headerlink" title="关于 MongoDB"></a>关于 MongoDB</h3><p>MongoDB 是一个以 <code>JSON</code> 为数据模型的文档型数据库（<code>JSON Document</code>），属于 <code>OLTP</code> 数据库。</p><p>主要用途：</p><ul><li>应用数据库，类似于 MySQL、Oracle</li><li>海量数据处理</li><li>数据平台</li></ul><p>主要特点：</p><ul><li>建模过程为可选步骤</li><li><code>JSON</code> 数据模型比较适合开发者</li><li>横向扩展能力可以支持很大数据量和并发</li></ul><h3 id="MongoDB-和关系型数据库对比"><a href="#MongoDB-和关系型数据库对比" class="headerlink" title="MongoDB 和关系型数据库对比"></a>MongoDB 和关系型数据库对比</h3><table><thead><tr><th></th><th>MongoDB</th><th>RDBMS</th></tr></thead><tbody><tr><td>数据模型</td><td>文档模型</td><td>关系模型</td></tr><tr><td>数据库类型</td><td>OLTP</td><td>OLTP</td></tr><tr><td>DML</td><td>MQL/SQL</td><td>SQL</td></tr><tr><td>高可用实现方式</td><td>复制集</td><td>集群模式</td></tr><tr><td>横向扩展能力</td><td>通过原生分片完善支持</td><td>数据分区或者应用程序分区处理</td></tr><tr><td>索引支持</td><td>B 树、全文索引、地理位置索引、多键索引、TTL 索引</td><td>B+树</td></tr><tr><td>数据容量</td><td>没有理论上线</td><td>千万、亿级</td></tr></tbody></table><h2 id="MongoDB-特色及优势"><a href="#MongoDB-特色及优势" class="headerlink" title="MongoDB 特色及优势"></a>MongoDB 特色及优势</h2><p>MongoDB 的优势：</p><ul><li><code>JSON</code> 结构和对象模型接近，开发代码量低；</li><li><code>JSON</code> 的动态模型意味着更容易响应新的业务需求；</li><li>复制集提供 99.999% 的高可用能力；</li><li>分片架构支持海量数据和无缝扩容。</li></ul><h3 id="面向开发者的易用且高效数据库"><a href="#面向开发者的易用且高效数据库" class="headerlink" title="面向开发者的易用且高效数据库"></a>面向开发者的易用且高效数据库</h3><p>简单直观：以自然的方式建模，以直观的方式来与数据库交互；</p><p>结构灵活：弹性模式从容响应需求的频繁变化；</p><p>MongoDB 的灵活体现在三个方面：</p><ul><li><p>多型性：同一个集合中可以包含不同字段（类型）的文档对象；</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/161042.png" alt="image-20220521161042381" style="zoom:67%;" /></li><li><p>动态性：线上修改数据模式，修改时应用和数据库均无须下线；</p></li><li><p>数据治理：支持使用 <code>JSON Schema</code> 来规范数据模式。在保证数据模式灵活动态的前提下，提供数据治理能力。</p></li></ul><p>快速开发：以更少的代码完成功能，专注于业务逻辑。</p><h4 id="原生的高可用和横向扩展能力"><a href="#原生的高可用和横向扩展能力" class="headerlink" title="原生的高可用和横向扩展能力"></a>原生的高可用和横向扩展能力</h4><p>MongoDB 通过复制集提供了高可用能力。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/161313.png" alt="image-20220521161313465" style="zoom:50%;" /><p>MongoDB 通过分片提供横向扩展能力。特点有：对应用全透明、提供多种数据分布策略、轻松支持 TB ～ PB 的数量级。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/161656.png" alt="image-20220521161656509" style="zoom:50%;" /><h2 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h2><h3 id="下载-MongoDB"><a href="#下载-MongoDB" class="headerlink" title="下载 MongoDB"></a>下载 MongoDB</h3><p>社区版下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>官方安装教程：<a href="https://www.mongodb.com/docs/manual/administration/install-community/">https://www.mongodb.com/docs/manual/administration/install-community/</a></p><p>以在 CentOS7 虚拟机上安装使用 MongoDB 社区版二进制包为例：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/164016.png" alt="image-20220521164016935"></p><h4 id="获取可执行文件地址"><a href="#获取可执行文件地址" class="headerlink" title="获取可执行文件地址"></a>获取可执行文件地址</h4><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/163715.png" alt="image-20220521163714914"></p><p>在 MongoDB 下载界面中选择「On-permises」—「MongoDB Community Server」，选择合适的版本及平台后，点击「Copy Link」复制下载连接：</p><p><code>https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.8.tgz</code></p><h4 id="下载-MongoDB-可执行文件"><a href="#下载-MongoDB-可执行文件" class="headerlink" title="下载 MongoDB 可执行文件"></a>下载 MongoDB 可执行文件</h4><p>创建 MongoDB 下载目录和数据文件存放目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /data/db<br></code></pre></td></tr></table></figure><p>下载并解压 MongoDB 可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.8.tgz<br>tar -xf mongodb-linux-x86_64-rhel70-5.0.8.tgz<br></code></pre></td></tr></table></figure><p>将 MongoDB 可执行文件加入 <code>PATH</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/data/mongodb-linux-x86_64-rhel70-5.0.8/bin<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/165234.png" alt="image-20220521165234017"></p><h4 id="启动-MongoDB"><a href="#启动-MongoDB" class="headerlink" title="启动 MongoDB"></a>启动 MongoDB</h4><p>启动 MongoDB ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongod --dbpath /data/db --port 27017 --logpath /data/db/mongod.log --fork -bind_ip 0.0.0.0<br></code></pre></td></tr></table></figure><p>连接到 MongoDB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongo localhost:27017<br></code></pre></td></tr></table></figure><p>开放 27017 端口，供外部访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --add-port=27017/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/165300.png" alt="image-20220521165300181"></p><h3 id="使用-Atlas-免费帐号"><a href="#使用-Atlas-免费帐号" class="headerlink" title="使用 Atlas 免费帐号"></a>使用 Atlas 免费帐号</h3><p><a href="https://www.mongodb.com/atlas">Atlas</a> 是 MongoDB 提供的数据托管平台，并且给开发者提供了一个免费测试帐号。</p><h4 id="注册帐号"><a href="#注册帐号" class="headerlink" title="注册帐号"></a>注册帐号</h4><p>在 <code>https://www.mongodb.com/cloud/atlas/register </code> 中输入基本信息，然后验证邮箱即可：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/165831.png" alt="image-20220521165831287"></p><h4 id="创建-Atlas"><a href="#创建-Atlas" class="headerlink" title="创建 Atlas"></a>创建 Atlas</h4><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/150813.png" alt="image-20220528091807871"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/150948.png" alt="image-20220528092727567"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151039.png" alt="image-20220528092925782"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151104.png" alt="image-20220528093224034"></p><p>添加允许连接的 IP 列表，可以使用 <code>0.0.0.0/0</code> 表示允许任意 IP 连接。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151131.png" alt="image-20220528093246682"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151156.png" alt="image-20220528093335144"></p><h4 id="连接到-Cluster"><a href="#连接到-Cluster" class="headerlink" title="连接到 Cluster"></a>连接到 Cluster</h4><p>在 Altas 控制台中点击「Connect」按钮，在「Setup connection security」中选择通过哪种方式连接。这里选择使用 Java 客户端连接，故选择「Connect your application」。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151219.png" alt="image-20220528094354092"></p><p>选择对应的 Java 驱动版本，复制生成的连接字符串到应用程序中。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151246.png" alt="image-20220528093435177"></p><p>连接到 Cluster 和 连接本地 MongoDB了一样，示例代理如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> store.xianglin.mongo;<br><br><span class="hljs-keyword">import</span> com.mongodb.client.MongoClients;<br><span class="hljs-keyword">import</span> org.bson.Document;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 连接 Mongo Atlas</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickStartClusterExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> connectionString = <span class="hljs-string">&quot;mongodb+srv://xianglin:&lt;password&gt;@cluster0.boqb4.mongodb.net/?retryWrites=true&amp;w=majority&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-keyword">var</span> mongoClient = MongoClients.create(connectionString)) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> database = mongoClient.getDatabase(<span class="hljs-string">&quot;mock&quot;</span>);<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> collection = database.getCollection(<span class="hljs-string">&quot;order&quot;</span>);<br>            collection.insertOne(<span class="hljs-keyword">new</span> Document(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>).append(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>));<br><br>            <span class="hljs-keyword">var</span> iter = collection.find();<br>            iter.forEach(System.out::println);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后到 Atlas 控制台中查看刚刚插入的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202206/151313.png" alt="image-20220528094151776"></p><h3 id="导入样本数据"><a href="#导入样本数据" class="headerlink" title="导入样本数据"></a>导入样本数据</h3><p>导入课程提供的样本数据：</p><p><code>mongorestore</code> 命令在 <a href="https://www.mongodb.com/try/download/database-tools">Database Tools</a> 中，需要单独安装，或者按照官方教程安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -O -k https://github.com/geektime-geekbang/geektime-mongodb-course/blob/master/aggregation/dump.tar.gz<br><br>tar -xf dump.tar.gz<br><br>mongorestore -h localhost:27017<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/175822.png" alt="image-20220521175822744"></p><h3 id="下载和使用-MongoDB-Compass"><a href="#下载和使用-MongoDB-Compass" class="headerlink" title="下载和使用 MongoDB Compass"></a>下载和使用 MongoDB Compass</h3><p>下载地址：<a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p><p>我这里使用 Manjaro 的包管理工具安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay mongodb-compass<br></code></pre></td></tr></table></figure><p>然后连接到刚刚启动的 MongoDB：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/174230.png" alt="image-20220521174230040"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/175532.png" alt="image-20220521175532012"></p><h2 id="MongoDB-基本操作"><a href="#MongoDB-基本操作" class="headerlink" title="MongoDB 基本操作"></a>MongoDB 基本操作</h2><p>MongoDB 基本操作细节请参考官方文档：<a href="https://www.mongodb.com/docs/manual/crud/">MongoDB CRUD Operations</a>。</p><p>CRUD 的基本命令如下：</p><p>Create：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.insertOne()<br>db.collection.insertMany()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181725.png" alt="image-20220521181725818" style="zoom:50%;" /><p>Read：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.find()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181801.png" alt="image-20220521181801072" style="zoom:50%;" /><p>Update：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.updateOne()<br>db.collection.updateMany()<br>db.collection.replaceOne()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181827.png" alt="image-20220521181827147" style="zoom:50%;" /><p>Delete：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.collection.deleteOne()<br>db.collection.deleteMany()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/181854.png" alt="image-20220521181854587" style="zoom:50%;" /><h2 id="使用-MongoDB-开发程序"><a href="#使用-MongoDB-开发程序" class="headerlink" title="使用 MongoDB 开发程序"></a>使用 MongoDB 开发程序</h2><p>Java API 的使用细节请参考官方教程：<a href="https://www.mongodb.com/docs/drivers/java/sync/current/">MongoDB Java Driver</a>。</p><h3 id="创建简单应用"><a href="#创建简单应用" class="headerlink" title="创建简单应用"></a>创建简单应用</h3><p>编写一个简单的 Java 应用查询一条样本数据，数据如下：</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/211322.png" alt="image-20220521211322686" style="zoom:50%;" /><h4 id="创建-Maven-项目"><a href="#创建-Maven-项目" class="headerlink" title="创建 Maven 项目"></a>创建 Maven 项目</h4><p>在 IDEA 中使用 Maven 创建一个简单 Java 应用：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/205556.png" alt="image-20220521205556188"></p><p>引入 MongoDB Java 驱动的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mongodb-driver-sync<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="查询导入的样本数据"><a href="#查询导入的样本数据" class="headerlink" title="查询导入的样本数据"></a>查询导入的样本数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> store.xianglin.mongo;<br><br><span class="hljs-keyword">import</span> com.mongodb.client.MongoClients;<br><span class="hljs-keyword">import</span> com.mongodb.client.model.Filters;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * connect mongo use Java</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickStart</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> connectionString = <span class="hljs-string">&quot;mongodb://192.168.56.101:27017/mock&quot;</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> mongoClient = MongoClients.create(connectionString)) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> dataBaseMock = mongoClient.getDatabase(<span class="hljs-string">&quot;mock&quot;</span>);<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> collectionOrders = dataBaseMock.getCollection(<span class="hljs-string">&quot;orders&quot;</span>);<br>            <span class="hljs-keyword">var</span> documentOrder = collectionOrders.find(Filters.eq(<span class="hljs-string">&quot;street&quot;</span>, <span class="hljs-string">&quot;493 Hilll Curve&quot;</span>)).first();<br>            System.out.println(Objects.requireNonNull(documentOrder).toJson());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-POJOs-查询"><a href="#使用-POJOs-查询" class="headerlink" title="使用 POJOs 查询"></a>使用 <code>POJOs</code> 查询</h4><p><code>Document</code> 的实现是一个 <code>LinkedHashMap</code>，实际上使用时，更倾向于使用 POJO。先创建一个 <code>Order</code> 的实体类（省略 <code>getter</code> 和 <code>setter</code> 方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String street;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> String country;<br>    <span class="hljs-keyword">private</span> String zip;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> userId;<br>    <span class="hljs-keyword">private</span> LocalDateTime orderDate;<br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-keyword">private</span> BigDecimal shippingFee;<br>    <span class="hljs-keyword">private</span> List&lt;OrderLine&gt; orderLines;<br>    <span class="hljs-keyword">private</span> BigDecimal total;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderLine</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String product;<br>        <span class="hljs-keyword">private</span> String sku;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> qty;<br>        <span class="hljs-keyword">private</span> BigDecimal price;<br>        <span class="hljs-keyword">private</span> BigDecimal cost;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的有两点：</p><ul><li>MongoDB 中 <code>Date</code> 类型的 <code>orderDate</code> 在 Java 中可以使用 <code>java.timeLocalDateTime</code> 也可以使用 <code>java.util.Date</code>；</li><li>MongoDB 中的 <code>Decimal128</code> 对应 Java 中的 <code>java.math.BigDecimal</code>。</li></ul><p>使用 <code>Order</code> 查询的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> store.xianglin.mongo;<br><br><span class="hljs-keyword">import</span> com.mongodb.MongoClientSettings;<br><span class="hljs-keyword">import</span> com.mongodb.client.MongoClients;<br><span class="hljs-keyword">import</span> com.mongodb.client.model.Filters;<br><span class="hljs-keyword">import</span> org.bson.codecs.configuration.CodecRegistries;<br><span class="hljs-keyword">import</span> org.bson.codecs.pojo.PojoCodecProvider;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * connect mongo use java with pojos</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickStartPojoExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> pojoCodecProvider = PojoCodecProvider.builder().automatic(<span class="hljs-keyword">true</span>).build();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> codecRegistries = CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), CodecRegistries.fromProviders(pojoCodecProvider));<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> connectionString = <span class="hljs-string">&quot;mongodb://192.168.56.101:27017/mock&quot;</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> mongoClient = MongoClients.create(connectionString)) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> dataBaseMock = mongoClient.getDatabase(<span class="hljs-string">&quot;mock&quot;</span>).withCodecRegistry(codecRegistries);<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">var</span> collectionOrders = dataBaseMock.getCollection(<span class="hljs-string">&quot;orders&quot;</span>, Order.class);<br>            <span class="hljs-keyword">var</span> order = collectionOrders.find(Filters.eq(<span class="hljs-string">&quot;street&quot;</span>, <span class="hljs-string">&quot;493 Hilll Curve&quot;</span>)).first();<br>            System.out.println(order);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Virtual Box 安装配置 Ubuntu</title>
    <link href="/2022/05/14/Virtual-Box-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-Ubuntu/"/>
    <url>/2022/05/14/Virtual-Box-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-Ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-安装-MySQL"><a href="#Ubuntu-安装-MySQL" class="headerlink" title="Ubuntu 安装 MySQL"></a>Ubuntu 安装 MySQL</h1><h2 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h2><p>推荐从 <a href="https://mirrors.ustc.edu.cn/">USTC</a> 下载镜像。</p><h3 id="创建-VirtualBox-虚拟机"><a href="#创建-VirtualBox-虚拟机" class="headerlink" title="创建 VirtualBox 虚拟机"></a>创建 VirtualBox 虚拟机</h3><p>点击「新建」，名称输入 <code>Ubuntu</code>，类型和版本会自动选择 <code>Ubuntu(64-bit)</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213304.png" alt="Snipaste_2022-04-27_20-46-07"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213314.png" alt="Snipaste_2022-04-27_20-46-38"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213322.png" alt="Snipaste_2022-04-27_20-46-45"></p><p>使用 Ubuntu 桌面版时，建议调整「系统」栏中的「处理器数量」和「显示」栏中的「显存大小」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213419.png" alt="Snipaste_2022-04-27_20-47-18"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213426.png" alt="Snipaste_2022-04-27_20-47-31"></p><p>双击启动，选择已下载的 Ubuntu 安装镜像，进入安装界面：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213434.png" alt="Snipaste_2022-04-27_20-47-56"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213443.png" alt="Snipaste_2022-04-27_20-48-07"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213451.png" alt="Snipaste_2022-04-27_20-48-35"></p><h3 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213509.png" alt="Snipaste_2022-04-27_20-49-08"></p><p>在左边下拉选择「中文（简体）」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213530.png" alt="Snipaste_2022-04-27_20-53-46"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213546.png" alt="Snipaste_2022-04-27_20-53-55"></p><p>推荐选择「最小安装」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213622.png" alt="Snipaste_2022-04-27_20-54-14"></p><p>没有特殊情况不需要自己分区，选择「清除整个磁盘并安装 Ubuntu」即可：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213634.png" alt="Snipaste_2022-04-27_20-54-28"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213643.png" alt="Snipaste_2022-04-27_20-56-00"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213657.png" alt="Snipaste_2022-04-27_20-56-20"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213713.png" alt="Snipaste_2022-04-27_20-56-27"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213722.png" alt="Snipaste_2022-04-27_21-00-39"></p><p>安装完成后，即可进入虚拟机：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213733.png" alt="Snipaste_2022-04-27_21-04-31"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213740.png" alt="Snipaste_2022-04-27_21-06-02"></p><h2 id="Ubuntu-基础配置"><a href="#Ubuntu-基础配置" class="headerlink" title="Ubuntu 基础配置"></a>Ubuntu 基础配置</h2><h3 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h3><p>可以参考<a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">Ubuntu 源使用帮助</a>，首先打开「软件和更新」，在「下载自」选择「其它站点」然后在「中国」条目下选择合适的源：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213803.png" alt="Snipaste_2022-04-27_21-08-42"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213811.png" alt="Snipaste_2022-04-27_21-14-27"></p><p>点击「重新载入」刷新本地缓存即可：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213820.png" alt="Snipaste_2022-04-27_21-14-51"></p><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><p>下载Ubuntu搜狗输入法：<a href="https://pinyin.sogou.com/linux/?r=pinyin">https://pinyin.sogou.com/linux/?r=pinyin</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i sogoupinyin_2.3.2.07_amd64-831.deb<br><br><span class="hljs-meta">#</span><span class="bash"> 提示缺少依赖时，使用如下命令</span><br>sudo apt install -f<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>virtual box</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Virtual Box 安装配置 CentOS</title>
    <link href="/2022/05/10/Virtual-Box-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AECentOS/"/>
    <url>/2022/05/10/Virtual-Box-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AECentOS/</url>
    
    <content type="html"><![CDATA[<h1 id="Virtual-Box-安装配置-CentOS7"><a href="#Virtual-Box-安装配置-CentOS7" class="headerlink" title="Virtual Box 安装配置 CentOS7"></a>Virtual Box 安装配置 CentOS7</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="下载-CentOS7-镜像"><a href="#下载-CentOS7-镜像" class="headerlink" title="下载 CentOS7 镜像"></a>下载 CentOS7 镜像</h3><p>通过<a href="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学开源软件镜像站</a>，下载 CentOS7 的安装镜像，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143242.png" alt="image-20220514143242131"></p><h3 id="安装-CentOS7"><a href="#安装-CentOS7" class="headerlink" title="安装 CentOS7"></a>安装 CentOS7</h3><p>在 VirtualBox 中创建虚拟机的过程比较简单，安装提示即可，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143503.png" alt="image-20220514143503439"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143531.png" alt="image-20220514143531487"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143559.png" alt="image-20220514143559828"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143658.png" alt="image-20220514143658028"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143712.png" alt="image-20220514143712645"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143807.png" alt="image-20220514143806993"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143906.png" alt="image-20220514143906528"></p><p>进入安装界面后，首先需要选择安装过程中使用的语言：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/144210.png" alt="image-20220514144210010"></p><p>在「安装信息摘要」中，「本地化」和「软件」两栏的内容保持不变：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/144501.png" alt="image-20220514144500930"></p><p>在「安装位置」中选中虚拟磁盘：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/144727.png" alt="image-20220514144727906"></p><p>在「网络和主机名」中打开网络：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/145134.png" alt="image-20220514145134825"></p><p>设置完成后点击「开始安装」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/145448.png" alt="image-20220514145448098"></p><p>安装过程中需要设置「ROOT密码」，并按需创建用户：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/145551.png" alt="image-20220514145551250"></p><p>如果是”弱密码“，需要点击两次「完成」按钮：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/145657.png" alt="image-20220514145657570"></p><p>等待 CentOS7 安装完成即可：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/145928.png" alt="image-20220514145928372"></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="配置-Host-Only-网络并指定静态-IP"><a href="#配置-Host-Only-网络并指定静态-IP" class="headerlink" title="配置 Host-Only 网络并指定静态 IP"></a>配置 <code>Host-Only</code> 网络并指定静态 IP</h3><p>虚拟机内 CentOS 的默认终端很不好用，一般都是通过 SSH 从宿主机连接使用，这时可以开启 <code>Host-Only</code> 网络并指定一个静态 IP。</p><h4 id="为-CentOS7-增加-Host-Only-网络配置"><a href="#为-CentOS7-增加-Host-Only-网络配置" class="headerlink" title="为 CentOS7 增加 Host-Only 网络配置"></a>为 CentOS7 增加 <code>Host-Only</code> 网络配置</h4><p>在关机状态下，打开虚拟机设置，在「网络」栏中新增网卡：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/150440.png" alt="image-20220514150440632"></p><p>如果在「界面名称」中只有「未指定」一个选项，并且下方有“发现无效设置”时，需要先添加网络配置：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/150555.png" alt="image-20220514150555641"></p><p>在「管理」—「主机网络管理器」中新增一条 <code>Host-Only</code> 网络配置：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/150846.png" alt="image-20220514150846268"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/150928.png" alt="image-20220514150928680"></p><p>完成后，再到虚拟机「设置」—「网络」中选择即可：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/151019.png" alt="image-20220514151019716"></p><p>设置完成后，进入虚拟机，使用 <code>ip addr</code> 命令查看当前网络信息，可以发现已存在 <code>Host-Only</code> 网络：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/151219.png" alt="image-20220514151218998"></p><h4 id="为新增的-Host-Only-网络配置静态-IP"><a href="#为新增的-Host-Only-网络配置静态-IP" class="headerlink" title="为新增的 Host-Only 网络配置静态 IP"></a>为新增的 <code>Host-Only</code> 网络配置静态 IP</h4><p>CentOS7 的网络配置文件位于 <code>/etc/sysconfig/network-scripts</code>，并与设备名称同名。即需要编辑 <code>/etc/sysconfig/network-scripts/ifcfg-enp0s8</code> 文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">TYPE</span>=<span class="hljs-string">Ethernet</span><br><span class="hljs-attr">PROXY_METHOD</span>=<span class="hljs-string">none</span><br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-string">no</span><br><span class="hljs-comment"># 设置为静态 IP</span><br><span class="hljs-attr">BOOTPROTO</span>=<span class="hljs-string">static</span><br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-string">yes</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-string">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-string">yes</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-string">yes</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-string">yes</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-string">no</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=<span class="hljs-string">stable-privacy</span><br><span class="hljs-attr">NAME</span>=<span class="hljs-string">enp0s8</span><br><span class="hljs-attr">UUID</span>=<span class="hljs-string">76b90704-1ecd-4c8e-a411-9c776cb7834d</span><br><span class="hljs-attr">DEVICE</span>=<span class="hljs-string">enp0s8</span><br><span class="hljs-comment"># 设置开启启动</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-string">yes</span><br><br><span class="hljs-comment"># 添加静态 IP 项</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-string">192.168.56.106</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-string">255.255.255.0</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-string">192.168.56.1</span><br></code></pre></td></tr></table></figure><p>同时可以在 <code>/etc/sysconfig/network</code> 中添加 DNS 配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Created by anaconda</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-string">192.168.56.1</span><br><span class="hljs-attr">DNS2</span>=<span class="hljs-string">8.8.8.8</span><br></code></pre></td></tr></table></figure><p>最后重启网络配置即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service network restart<br></code></pre></td></tr></table></figure><p>再次使用 <code>ip addr</code> 命令查看网络信息，发现配置已经生效：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/152400.png" alt="image-20220514152400747"></p><h3 id="为-CentOS7-安装增强功能"><a href="#为-CentOS7-安装增强功能" class="headerlink" title="为 CentOS7 安装增强功能"></a>为 CentOS7 安装增强功能</h3><p>CentOS Server 无法从「设备」—「安装增强功能」菜单为其安装增强功能，可以按照以下步骤手动安装。</p><p>安装依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum install -y gcc gcc-c++ make kernel kernel-headers kernel-devel bzip2 tar<br>[root@localhost ~]# reboot<br></code></pre></td></tr></table></figure><p>从菜单中挂载 <code>VBoxGuestAdditions.iso</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/152808.png" alt="image-20220514152808852"></p><p>使用如下命令挂载光驱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建挂载点</span><br>[root@localhost ~]# mkdir /media/cdrom<br><span class="hljs-meta">#</span><span class="bash"> 挂载光驱</span><br>[root@localhost ~]# mount /dev/sr0 /media/cdrom<br>mount: /dev/sr0 写保护，将以只读方式挂载<br><br>[root@localhost ~]# ll /media/cdrom/<br>总用量 46826<br>-r--r--r--. 1 root root      763 2月  20 2020 AUTORUN.INF<br>-r-xr-xr-x. 1 root root     6384 10月 15 22:42 autorun.sh<br>dr-xr-xr-x. 2 root root      792 10月 15 22:48 cert<br>dr-xr-xr-x. 2 root root     1824 10月 15 22:48 NT3x<br>dr-xr-xr-x. 2 root root     2652 10月 15 22:48 OS2<br>-r-xr-xr-x. 1 root root     4821 10月 15 22:42 runasroot.sh<br>-r--r--r--. 1 root root      547 10月 15 22:48 TRANS.TBL<br>-r--r--r--. 1 root root  3830063 10月 15 22:41 VBoxDarwinAdditions.pkg<br>-r-xr-xr-x. 1 root root     3949 10月 15 22:41 VBoxDarwinAdditionsUninstall.tool<br>-r-xr-xr-x. 1 root root  7413172 10月 15 22:42 VBoxLinuxAdditions.run<br>-r--r--r--. 1 root root  9401856 10月 15 23:41 VBoxSolarisAdditions.pkg<br>-r-xr-xr-x. 1 root root 16950792 10月 15 22:45 VBoxWindowsAdditions-amd64.exe<br>-r-xr-xr-x. 1 root root   270616 10月 15 22:42 VBoxWindowsAdditions.exe<br>-r-xr-xr-x. 1 root root 10057608 10月 15 22:43 VBoxWindowsAdditions-x86.exe<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/152949.png" alt="image-20220514152949269"></p><p>执行安装命令，安装完成后重启即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost cdrom]# sh ./VBoxLinuxAdditions.run<br>Verifying archive integrity... All good.<br>Uncompressing VirtualBox 6.1.16 Guest Additions for Linux........<br>VirtualBox Guest Additions installer<br>Removing installed version 6.1.16 of VirtualBox Guest Additions...<br>Copying additional installer modules ...<br>Installing additional modules ...<br>VirtualBox Guest Additions: Starting.<br>VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel<br>modules.  This may take a while.<br>VirtualBox Guest Additions: To build modules for other installed kernels, run<br>VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup &lt;version&gt;<br>VirtualBox Guest Additions: or<br>VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all<br>VirtualBox Guest Additions: Building the modules for kernel<br>3.10.0-1160.6.1.el7.x86_64.<br>VirtualBox Guest Additions: Running kernel modules will not be replaced until<br>the system is restarted<br><br>[root@localhost ~]# reboot<br></code></pre></td></tr></table></figure><p>使用 「共享文件夹」验证增强功能安装成功，在「共享文件夹」中新增一条配置，将宿主机的下载目录挂载到虚拟机的 <code>Downloads</code> 下，然后进入虚拟机查看到对应路径存在，代表安装成功：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/155855.png" alt="image-20220514155854979"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/160045.png" alt="image-20220514160045458"></p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>virtual box</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 安装配置记录</title>
    <link href="/2022/04/30/Manjaro-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/04/30/Manjaro-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Manjaro-安装配置记录"><a href="#Manjaro-安装配置记录" class="headerlink" title="Manjaro 安装配置记录"></a>Manjaro 安装配置记录</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>以在 Virtual Box 虚拟机中安装为例，介绍如何安装 Manjaro。</p><h3 id="下载-Manjaro-镜像"><a href="#下载-Manjaro-镜像" class="headerlink" title="下载 Manjaro 镜像"></a>下载 Manjaro 镜像</h3><p><a href="https://manjaro.org/download/">下载地址</a>，目前 Manjaro 官方提供三种桌面：xface、kde 和 gnome，可以选择自己喜欢的版本下载。</p><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>在 Virtual Box 管理界面点击「新建」，填写虚拟机的基本信息，其中「版本」选择「Arch Linux（64-bit）」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/211559.png" alt="Snipaste_2022-04-27_20-57-53"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/211630.png" alt="Snipaste_2022-04-27_20-58-00"></p><p>创建完成后，选中创建的虚拟机，右键点击「设置」进入设置页面，在「系统」栏调整「处理器数量」，在「显示」栏调整「显存大小」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/211848.png" alt="image-20220507211848679"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/212004.png" alt="Snipaste_2022-04-27_20-58-29"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/212018.png" alt="Snipaste_2022-04-27_20-58-36"></p><p>设置完成后，双击启动虚拟机，首次启动时，会提示选择虚拟光盘（即 Manjaro 的镜像文件），按提示选择已下载好的 Manjaro 镜像文件（忘记截图了，以 Ubuntu 的镜像为例），即可进入安装界面：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/212230.png" alt="Snipaste_2022-04-27_20-47-56"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/212447.png" alt="Snipaste_2022-04-27_20-48-07"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/212459.png" alt="Snipaste_2022-04-27_20-48-35"></p><h3 id="安装-Manjaro"><a href="#安装-Manjaro" class="headerlink" title="安装 Manjaro"></a>安装 Manjaro</h3><p>可以在 Manjaro 的引导界面调整一些参数，比如时区、语言、键盘布局等，这里选择「Boot with open source drivers」进入 Manjaro 的 LiveCD 界面：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213023.png" alt="Snipaste_2022-04-27_20-59-52"></p><p>点击「Luanch installer」进入安装界面：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213047.png" alt="Snipaste_2022-04-27_21-00-33"></p><p>根据「Manjaro Linux 安装程序」的引导步骤完成对应到设置即可顺利安装：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213316.png" alt="Snipaste_2022-04-27_21-00-48"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213324.png" alt="Snipaste_2022-04-27_21-00-57"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213337.png" alt="Snipaste_2022-04-27_21-01-03"></p><p>在「分区」这里，如果没有特殊需求，可以不做调整，如果想要「手动分区」或者设置「交换分区」，推荐阅读 Arch Linux 的安装教程：<a href="https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%BB%BA%E7%AB%8B%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA">建立硬盘分区</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213349.png" alt="Snipaste_2022-04-27_21-01-10"></p><p>在「用户」栏推荐选中「为管理员帐号使用同样的密码」：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213822.png" alt="Snipaste_2022-04-27_21-01-26"></p><p>在「摘要」栏会展示即将安装的概要信息，确认后点击「安装」即可：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213838.png" alt="Snipaste_2022-04-27_21-01-32"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213853.png" alt="Snipaste_2022-04-27_21-01-37"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213908.png" alt="Snipaste_2022-04-27_21-01-42"></p><p>安装结束后即可重启虚拟机，进入新装的 Manjaro 系统中：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/213921.png" alt="Snipaste_2022-04-27_21-19-08"></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="修改源配置"><a href="#修改源配置" class="headerlink" title="修改源配置"></a>修改源配置</h3><p>参见：<a href="https://mirrors.ustc.edu.cn/help/manjaro.html">Manjaro Linux 源使用帮助</a>。</p><p>选择国内镜像站提升体验，使用如下命令生成可用中国镜像站列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman-mirrors -i -c China -m rank<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/221356.png" alt="2022-04-29 21-52-29屏幕截图">勾选最接近的镜像站，然后按两次 <code>OK</code> ，最后使用如下命令刷新缓存：</p><p><code>sudo pacman -Syy</code></p><h3 id="添加-Arch-Linux-CN-源"><a href="#添加-Arch-Linux-CN-源" class="headerlink" title="添加 Arch Linux CN 源"></a>添加 Arch Linux CN 源</h3><p>参见：<a href="https://mirrors.ustc.edu.cn/help/archlinuxcn.html">Arch Linux CN 源使用帮助</a>。</p><p>Arch Linux 中文社区仓库是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。</p><p>在 <code>/etc/pacman.conf</code> 文件末尾添加两行：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[archlinuxcn]</span><br><span class="hljs-attr">Server</span> = <span class="hljs-string">https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></code></pre></td></tr></table></figure><p>然后请安装 <code>archlinuxcn-keyring</code> 包以导入 GPG key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Sy archlinuxcn-keyring<br></code></pre></td></tr></table></figure><p><a href="https://github.com/Jguer/yay">yay</a> 是一个用 <code>Go</code> 语言编码的 Arch Linux 帮助工具和包管理器，允许自动从 <code>PKGBUILD</code> 安装包，使用如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S --needed git base-devel yay <br></code></pre></td></tr></table></figure><h3 id="使用英文目录"><a href="#使用英文目录" class="headerlink" title="使用英文目录"></a>使用英文目录</h3><p>默认情况下，Manjaro 会根据语言环境创建中文目录，比如：文档、图片等，可以通过以下两步调整为英文目录：</p><p>参见： <a href="https://wiki.archlinux.org/title/XDG_user_directories_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">XDG user directories (简体中文)</a></p><ul><li><p>在终端中输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LC_ALL=C xdg-user-dirs-update --force<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/161227.png" alt="2022-04-30 16-06-51屏幕截图"></p></li><li><p>重新登录系统，选择“保留旧的名称”</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/161322.png" alt="2022-04-30 16-08-05屏幕截图"></p></li></ul><h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><p>参见：<a href="https://wiki.archlinux.org/title/IBus_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#GNOME">IBus_GNOME</a></p><p>Gnome 默认使用 IBus，所以只需要安装输入法引擎，这里选择 <code>ibus-rime</code> ，一个强大的智能中文输入法，支持拼音、注音或者没有音调的拼音、双拼、粤拼、中州韵、仓颉和五笔 86：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S ibus-rime<br></code></pre></td></tr></table></figure><p>随后打开设置界面，通过“键盘”中的“输入源”添加：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/222234.png" alt="2022-04-29 21-46-43屏幕截图"></p><h3 id="安装-Microsoft-Edge"><a href="#安装-Microsoft-Edge" class="headerlink" title="安装 Microsoft Edge"></a>安装 Microsoft Edge</h3><p>使用 <code>yay</code> 安装所需的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay microsoft-edge<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/223139.png" alt="2022-04-29 22-27-05屏幕截图"></p><h3 id="使用-OneDrive"><a href="#使用-OneDrive" class="headerlink" title="使用 OneDrive"></a>使用 OneDrive</h3><p>参见：<a href="https://github.com/abraunegg/onedrive">OneDrive Client for Linux</a></p><h4 id="安装-OneDrive"><a href="#安装-OneDrive" class="headerlink" title="安装 OneDrive"></a>安装 OneDrive</h4><p>使用如下命令安装 OneDrive：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Ss onedrive-abraunegg<br>sudo pacman -S onedrive-abraunegg<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/154629.png" alt="image-20220430154629576"></p><h4 id="配置-OneDrive"><a href="#配置-OneDrive" class="headerlink" title="配置 OneDrive"></a>配置 OneDrive</h4><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/155147.png" alt="image-20220430155147440"></p><h4 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h4><p>使用如下命令启动文件同步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">onedrive --synchronize<br></code></pre></td></tr></table></figure><h4 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h4><p>使用如下命令将 <code>onedrive</code> 添加为系统服务，设置为开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl --user <span class="hljs-built_in">enable</span> onedrive<br>systemctl --user start onedrive<br></code></pre></td></tr></table></figure><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><p>这里使用 clash 作为客户端，具体参见：<a href="https://github.com/Dreamacro/clash">Clash</a>。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用如下命令安装 clash 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S clash<br></code></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>下载订阅配置到 <code>~/.config/clash/config.yaml</code>，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">7890</span><br><span class="hljs-attr">socks-port:</span> <span class="hljs-number">7891</span><br><span class="hljs-attr">allow-lan:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">Rule</span><br><span class="hljs-attr">log-level:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">external-controller:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9090</span><br></code></pre></td></tr></table></figure><p>随后打开 <a href="http://clash.razord.top/#/settings">http://clash.razord.top/#/settings</a> 进入配置页面：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/202533.png" alt="image-20220501202533766"></p><h4 id="开机自启动-1"><a href="#开机自启动-1" class="headerlink" title="开机自启动"></a>开机自启动</h4><p>在 <code>/usr/share/applications/</code> 创建 <code>clash_start.desktop</code> 文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Desktop Entry]<br>Exec=/usr/bin/clash<br>Name=Clash<br>Type=Application<br>StartupNotify=false<br>Terminal=false<br>Hidden=false<br></code></pre></td></tr></table></figure><p>然后在「优化」—「开机启动程序」中选择 clash，实际上是在 <code>~/.config/autostart</code> 中创建了相同的文件：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/204218.png" alt="image-20220501204218419"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/204406.png" alt="image-20220501204406181"></p><h2 id="开发工具安装及配置"><a href="#开发工具安装及配置" class="headerlink" title="开发工具安装及配置"></a>开发工具安装及配置</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>Typora 是一款 Markdown 编辑器和阅读器，可以通过 <code>pacman</code> 直接安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S typora<br></code></pre></td></tr></table></figure><h4 id="自动上传图片"><a href="#自动上传图片" class="headerlink" title="自动上传图片"></a>自动上传图片</h4><p>Typora 支持自动上传图片至图床，比如 GitHub，参见 <a href="https://support.typora.io/Upload-Image/">Upload Images</a>，我这里选择使用 <a href="https://github.com/pluveto/upgit">Upgit</a> 作为上传工具。首先从 GitHub 上下载 upgit 可执行文件，然后在可执行文件同级目录下增加配置文件<code>config.toml</code>，内容如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># =============================================================================</span><br><span class="hljs-comment"># UPGIT Config</span><br><span class="hljs-comment"># =============================================================================</span><br><span class="hljs-comment"># default uploader id</span><br><span class="hljs-attr">default_uploader</span> = <span class="hljs-string">&quot;github&quot;</span><br><span class="hljs-comment"># The file name formatting template was uploaded</span><br><span class="hljs-attr">rename</span> = <span class="hljs-string">&quot;&#123;year&#125;&#123;month&#125;/&#123;hour&#125;&#123;minute&#125;&#123;second&#125;&#123;ext&#125;&quot;</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># Custom extra output formats</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment">#   &#123;url&#125; direct URL of the file</span><br><span class="hljs-section">[output_formats]</span><br><span class="hljs-attr">&quot;bbcode&quot;</span> = <span class="hljs-string">&quot;[img]&#123;url&#125;[/img]&quot;</span><br><span class="hljs-attr">&quot;html&quot;</span> = <span class="hljs-string">&#x27;&lt;img src=&quot;&#123;url&#125;&quot; /&gt;&#x27;</span><br><span class="hljs-attr">&quot;markdown-simple&quot;</span> = <span class="hljs-string">&quot;![](&#123;url&#125;)&quot;</span><br><br><span class="hljs-comment"># If your network access to Github is abnormal or sluggish, you can try the following CDN acceleration.</span><br><span class="hljs-section">[replacements]</span><br><span class="hljs-attr">&quot;raw.githubusercontent.com&quot;</span> = <span class="hljs-string">&quot;cdn.jsdelivr.net/gh&quot;</span><br><span class="hljs-attr">&quot;/master&quot;</span> = <span class="hljs-string">&quot;@master&quot;</span><br><br><span class="hljs-comment"># Github uploader</span><br><span class="hljs-section">[uploaders.github]</span><br><span class="hljs-comment"># Branch to save files, for example master or main</span><br><span class="hljs-attr">branch</span> = <span class="hljs-string">&quot;master&quot;</span><br><span class="hljs-comment"># &quot;pat&quot; enter the Github token that has the &quot;repo&quot; permission</span><br><span class="hljs-comment"># Get token from https://github.com/settings/tokens</span><br><span class="hljs-attr">pat</span> = <span class="hljs-string">&quot;ghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><br><span class="hljs-comment"># The name of your public Github repository</span><br><span class="hljs-attr">repo</span> = <span class="hljs-string">&quot;gallery&quot;</span><br><span class="hljs-comment"># your Github username  </span><br><span class="hljs-attr">username</span> = <span class="hljs-string">&quot;xianglin2020&quot;</span><br></code></pre></td></tr></table></figure><p>主要是填写 <code>repo</code> 、 <code>username</code> 和 <code>pat</code> 三项，其中 <code>replacements</code> 用于 CDN 加速。</p><p>最后在 Typora 中配置使用 upgit ，「上传服务」选择「Custom Command」，命令填写 upgit 执行路径，点击「验证图片上传选项」，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/224343.png" alt="2022-04-29 22-42-29屏幕截图"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/224349.png" alt="2022-04-29 22-42-43屏幕截图"></p><h4 id="生成-Lisence"><a href="#生成-Lisence" class="headerlink" title="生成 Lisence"></a>生成 Lisence</h4><p>参见：<a href="https://www.seesharper.cn/archives/56.html">Typora</a>。</p><h3 id="Open-JDK"><a href="#Open-JDK" class="headerlink" title="Open JDK"></a>Open JDK</h3><p>参见：<a href="https://wiki.archlinux.org/title/Java_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Java (简体中文)</a>。</p><p>使用 <code>pacman</code> 查找和安装 Open JDK，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找 JDK</span><br>pacman -Ss openjdk | grep jdk<br><span class="hljs-comment"># 安装 JDK 17</span><br>sudo pacman -S jdk-openjdk<br><span class="hljs-comment"># 安装 JDK 11</span><br>sudo pacman -S jdk11-openjdk<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/143914.png" alt="image-20220430143914269"></p><p>使用 <code>archlinux-java</code> 命令管理已安装的 JDK：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/114205.png" alt="image-20220508114205717"></p><p>查看已安装的 JDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">archlinux-java status<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/114316.png" alt="image-20220508114316372"></p><p>修改默认 JDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo archlinux-java <span class="hljs-built_in">set</span> java-11-openjdk<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/114421.png" alt="image-20220508114421770"></p><h3 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h3><p>使用 <code>pacman</code> 查找和安装 Intellij IDEA，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Ss intellij<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/144137.png" alt="image-20220430144137003"></p><p>IDEA 中文输入法候选框不跟随光标的解决办法参见：<a href="https://github.com/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64">JetBrainsRuntime-for-Linux-x64</a>。</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>IDEA 自带 Maven，但是为了在终端使用，可以单独安装。使用如下命令安装最新版 Maven：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S maven<br></code></pre></td></tr></table></figure><p>使用如下命令查看 Maven 安装路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls -l `<span class="hljs-built_in">which</span> mvn`<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/184151.png" alt="image-20220501184151501"></p><p>复制一份 <code>settings.xml</code> 到 <code>~/.m2</code> 目录下，并修改使用阿里云的 Maven 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp /opt/maven/conf/settings.xml ~/.m2/<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Sbt"><a href="#Sbt" class="headerlink" title="Sbt"></a>Sbt</h3><p><a href="https://www.scala-sbt.org/">sbt</a> 是一个类似于 maven 的构建工具，使用如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S sbt<br></code></pre></td></tr></table></figure><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>使用 <code>yay</code> 安装 Sublime Text，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay sublime<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/144414.png" alt="image-20220430144414159"></p><h4 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h4><p>一个可用的激活码（2022-04-30）:</p><p>—– BEGIN LICENSE —–</p><p>Mifeng User</p><p>Single User License</p><p>EA7E-1184812</p><p>C0DAA9CD 6BE825B5 FF935692 1750523A</p><p>EDF59D3F A3BD6C96 F8D33866 3F1CCCEA</p><p>1C25BE4D 25B1C4CC 5110C20E 5246CC42</p><p>D232C83B C99CCC42 0E32890C B6CBF018</p><p>B1D4C178 2F9DDB16 ABAA74E5 95304BEF</p><p>9D0CCFA9 8AF8F8E2 1E0A955E 4771A576</p><p>50737C65 325B6C32 817DCB83 A7394DFA</p><p>27B7E747 736A1198 B3865734 0B434AA5</p><p>—— END LICENSE ——</p><h4 id="一些插件"><a href="#一些插件" class="headerlink" title="一些插件"></a>一些插件</h4><p>点击 <code>Tools</code> — <code>Install Package Control</code> 安装包管理工具；</p><p>点击 <code>Preferences</code> — <code>Package Control</code> 选择 <code>Install Package</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/145202.png" alt="image-20220430145202846"></p><p>输入 <code>ChineseLocalzations</code> 安装中文语言包：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/145443.png" alt="image-20220430145443835"></p><p>输入 <code>PrettyJSON</code> 安装 <code>JSON</code> 格式化工具，使用 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开命令面板，输入并选择 <code>Format JSON</code> 即可格式化 <code>JSON</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/150037.png" alt="image-20220430150037393"></p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><p>使用 <code>pacman</code> 安装 <code>Node.js</code> ，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S nodejs npm<br></code></pre></td></tr></table></figure><p>使用 <a href="https://www.npmmirror.com/">cnpm</a> 替代 <code>npm</code> 加速下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h4 id="解决-EACCES-问题"><a href="#解决-EACCES-问题" class="headerlink" title="解决 EACCES 问题"></a>解决 EACCES 问题</h4><p>参考官方指导：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">Resolving EACCES permissions errors when installing packages globally</a></p><ul><li><p>安装 <code>nvm</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S nvm<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;source /usr/share/nvm/init-nvm.sh&#x27;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/153304.png" alt="image-20220430153304384"></p></li><li><p>使用 <code>nvm</code> 安装 <code>node</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install node<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/153514.png" alt="image-20220430153514915"></p></li><li><p>重新使用 <code>npm install</code> </p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/153712.png" alt="image-20220430153712711"></p></li></ul><h3 id="使用-Hexo"><a href="#使用-Hexo" class="headerlink" title="使用 Hexo"></a>使用 Hexo</h3><p>参见官方文档：<a href="https://hexo.io/zh-cn/docs/">安装 Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br>npx hexo server<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202204/162721.png" alt="image-20220430162721008"></p><h3 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h3><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><p>使用如下命令安装和启动 <code>docker</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 Docker</span><br>sudo pacman -S docker<br><span class="hljs-comment"># 启动 Docker</span><br>sudo systemctl start docker<br></code></pre></td></tr></table></figure><h4 id="加入-docker-组"><a href="#加入-docker-组" class="headerlink" title="加入 docker 组"></a>加入 docker 组</h4><p>使用如下命令将当前用户加入 docker 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span><br>reboot<br></code></pre></td></tr></table></figure><h4 id="使用镜像加速服务"><a href="#使用镜像加速服务" class="headerlink" title="使用镜像加速服务"></a>使用镜像加速服务</h4><p>参见：<a href="https://developer.aliyun.com/article/29941">Docker 镜像加速器</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://rgotb8v4.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="MongoDB-Compass"><a href="#MongoDB-Compass" class="headerlink" title="MongoDB Compass"></a>MongoDB Compass</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay mongodb-compass<br></code></pre></td></tr></table></figure><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S postman-bin<br></code></pre></td></tr></table></figure><h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S wireshark-qt<br><br>sudo usermod -aG wireshark <span class="hljs-variable">$USER</span> <br></code></pre></td></tr></table></figure><h2 id="其他常用软件"><a href="#其他常用软件" class="headerlink" title="其他常用软件"></a>其他常用软件</h2><h3 id="vlc"><a href="#vlc" class="headerlink" title="vlc"></a>vlc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S vlc<br></code></pre></td></tr></table></figure><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S google-chrome<br></code></pre></td></tr></table></figure><h3 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h3><p>参见：<a href="https://github.com/flameshot-org/flameshot">Flameshot</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S flameshot<br></code></pre></td></tr></table></figure><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p>参见：<a href="https://wiki.archlinux.org/title/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">VirtualBox</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S virtualbox linux-headers virtualbox-ext-oracle<br><span class="hljs-comment"># 手动加载内核模块（或者重启）</span><br>sudo modprobe vboxdrv vboxnetadp vboxnetflt<br></code></pre></td></tr></table></figure><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S vscodium<br></code></pre></td></tr></table></figure><h3 id="有道词典"><a href="#有道词典" class="headerlink" title="有道词典"></a>有道词典</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay youdao-dict<br></code></pre></td></tr></table></figure><h3 id="uluancher"><a href="#uluancher" class="headerlink" title="uluancher"></a>uluancher</h3><p>参见：<a href="https://ulauncher.io/">Application launcher for Linux</a>，在 Wayland 下需要手动添加快捷键，详见：<a href="https://github.com/Ulauncher/Ulauncher/wiki/Hotkey-In-Wayland">Hotkey In Wayland</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay ulauncher<br></code></pre></td></tr></table></figure><h3 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay wps-office-cn<br>yay wps-office-mui-zh-cn<br>yay ttf-wps-fonts<br>yay ttf-ms-fonts<br></code></pre></td></tr></table></figure><h3 id="Aria2"><a href="#Aria2" class="headerlink" title="Aria2"></a>Aria2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S aria2 <br></code></pre></td></tr></table></figure><h3 id="连接-iPhone"><a href="#连接-iPhone" class="headerlink" title="连接 iPhone"></a>连接 iPhone</h3><h4 id="从-iPhone-中复制照片到-Manjaro"><a href="#从-iPhone-中复制照片到-Manjaro" class="headerlink" title="从 iPhone 中复制照片到 Manjaro"></a>从 iPhone 中复制照片到 Manjaro</h4><p>如果想将 iPhone 中的照片传输到 Manjaro 中，可以通过 <code>ifuse</code> 将 iPhone 作为磁盘挂在到 Manjaro 上。</p><p>首先需要安装 <code>ifuse</code> ，如图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Ss ifuse<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/144838.png" alt="image-20220515144838615"></p><p>为 iPhone 创建挂载点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p ~/Documents/iPhone<br></code></pre></td></tr></table></figure><p>使用如下命令将 iPhone 挂在到 Manjaro，（执行如下命令时，iPhone 会提示你“是否信任此设备”，然后输入密码，所以第一次挂载时需要多次执行如下命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifuse ~/Documents/iPhone<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/145519.png" alt="image-20220515145438208"></p><h4 id="从-Manjaro-中复制文件到-iPhone"><a href="#从-Manjaro-中复制文件到-iPhone" class="headerlink" title="从 Manjaro 中复制文件到 iPhone"></a>从 Manjaro 中复制文件到 iPhone</h4><p>iPhone 的「文件」APP 中能连接服务器，因此可以在 Manjaro 中启动文件共享服务，iPhone 作为客户端连接即可。这里选择使用 <code>samba</code>，一种Linux、UNIX系统上可用于共享文件和打印机等资源的协议，这种协议是基于 Client \ Server 型的协议，Client 端可以通过 SMB 访问到 Server（服务器）上的共享资源。</p><p>首先需要安装 <code>samba</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S samba manjaro-settings-samba<br></code></pre></td></tr></table></figure><p>然后编辑 <code>samba</code> 的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/samba/smb.conf<br></code></pre></td></tr></table></figure><p>只需要编辑 <code>[homes]</code> 这部分即可，如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[homes]</span><br>   <span class="hljs-attr">comment</span> = <span class="hljs-string">Home Directories</span><br>   <span class="hljs-attr">browseable</span> = <span class="hljs-string">yes # no -&gt; yes</span><br>   <span class="hljs-attr">read</span> <span class="hljs-string">only = yes</span><br>   <span class="hljs-attr">create</span> <span class="hljs-string">mask = 0700</span><br>   <span class="hljs-attr">directory</span> <span class="hljs-string">mask = 0700</span><br>   <span class="hljs-attr">valid</span> <span class="hljs-string">users = %S</span><br>   <span class="hljs-attr">path</span> = <span class="hljs-string">/run/media/xianglin # path to share</span><br></code></pre></td></tr></table></figure><p>使用如下命令为 <code>samba</code> 添加用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo smbpasswd -a xianglin<br></code></pre></td></tr></table></figure><p>完成后启动 <code>smb</code> 服务，即可在 iPhone 上连接到共享目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart smb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Play2 in Java</title>
    <link href="/2022/04/18/Play2-use-Java/"/>
    <url>/2022/04/18/Play2-use-Java/</url>
    
    <content type="html"><![CDATA[<h1 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h1><p><em>已经成功将项目从 Play 改为 SpringBoot 不再更新</em></p><p>官方网站：</p><p><a href="https://www.playframework.com/">play</a></p><p><a href="https://www.scala-sbt.org/">sbt</a></p><h2 id="创建-Play2-项目"><a href="#创建-Play2-项目" class="headerlink" title="创建 Play2 项目"></a>创建 Play2 项目</h2><p><em>你可能需要一个梯子🪜</em></p><h3 id="使用-IDEA-创建-Play2-项目"><a href="#使用-IDEA-创建-Play2-项目" class="headerlink" title="使用 IDEA 创建 Play2 项目"></a>使用 IDEA 创建 Play2 项目</h3><p>参见：<a href="https://www.jetbrains.com/help/idea/getting-started-with-play-2-x.html">Getting started with Play 2.x</a>。</p><p>启动 Scala 插件：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/202825.png" alt="image-20220420212825206"></p><p>通过 IDEA 的模板创建项目：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/182421.png" alt="image-20220418212421717"></p><p>创建完成后 Play2 项目结构如下：</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/182609.png" alt="image-20220418212609419" style="zoom:50%;" /><h3 id="使用-sbt-从命令行创建"><a href="#使用-sbt-从命令行创建" class="headerlink" title="使用 sbt 从命令行创建"></a>使用 sbt 从命令行创建</h3><p>参见：<a href="https://www.playframework.com/documentation/2.8.x/NewApplication">Creating a New Application</a>。</p><p>使用如下命令创建 Java Play 项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sbt new playframework/play-java-seed.g8<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/203629.png" alt="image-20220420213629111"></p><p>创建完成后的结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/203903.png" alt="image-20220420213903281"></p><p>从 IDEA 中启动项目或者在控制台中输入<code>sbt run</code> 启动项目后访问 <code>http:localhost:9000</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/183906.png" alt="image-20220418213906167"></p><h2 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h2><p>参见：<a href="https://www.playframework.com/documentation/2.8.x/Anatomy">Anatomy of a Play application</a>。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">app                      → Application sources<br> └ assets                → Compiled asset sources<br>    └ stylesheets        → Typically LESS CSS sources<br>    └ javascripts        → Typically CoffeeScript sources<br> └ controllers           → Application controllers<br> └ models                → Application business layer<br> └ views                 → Templates<br>build.sbt                → Application build script<br>conf                     → Configurations files <span class="hljs-keyword">and</span> other non-compiled resources (on classpath)<br> └ application.conf      → Main configuration file<br> └ routes                → Routes definition<br> └ logback.xml           → logback definition<br>dist                     → Arbitrary files to be included <span class="hljs-keyword">in</span> your projects distribution<br><span class="hljs-keyword">public</span>                   → Public assets<br> └ stylesheets           → CSS files<br> └ javascripts           → Javascript files<br> └ images                → Image files<br>project                  → sbt configuration files<br> └ build.properties      → Marker <span class="hljs-keyword">for</span> sbt project<br> └ plugins.sbt           → sbt plugins including the declaration <span class="hljs-keyword">for</span> Play itself<br>lib                      → Unmanaged libraries dependencies<br>logs                     → Logs folder<br> └ application.log       → Default log file<br>target                   → Generated stuff<br> └ resolution-cache      → Info about dependencies<br> └ scala<span class="hljs-number">-2.13</span><br>    └ api                → Generated API docs<br>    └ classes            → Compiled <span class="hljs-keyword">class</span> <span class="hljs-symbol">files</span><br>    └ <span class="hljs-symbol">routes</span>             → <span class="hljs-symbol">Sources</span> <span class="hljs-symbol">generated</span> <span class="hljs-symbol">from</span> <span class="hljs-symbol">routes</span><br>    └ <span class="hljs-symbol">twirl</span>              → <span class="hljs-symbol">Sources</span> <span class="hljs-symbol">generated</span> <span class="hljs-symbol">from</span> <span class="hljs-symbol">templates</span><br> └ <span class="hljs-symbol">universal</span>             → <span class="hljs-symbol">Application</span> <span class="hljs-symbol">packaging</span><br> └ <span class="hljs-symbol">web</span>                   → <span class="hljs-symbol">Compiled</span> <span class="hljs-symbol">web</span> <span class="hljs-symbol">assets</span><br><span class="hljs-symbol">test</span>                     → <span class="hljs-symbol">source</span> <span class="hljs-symbol">folder</span> <span class="hljs-symbol">for</span> <span class="hljs-symbol">unit</span> <span class="hljs-symbol">or</span> <span class="hljs-symbol">functional</span> <span class="hljs-symbol">tests</span><br></code></pre></td></tr></table></figure><h3 id="app"><a href="#app" class="headerlink" title="app/"></a><code>app/</code></h3><p><code>app</code> 目录包含所有可执行文件：Java 和 Scala 的源代码，模板文件和 <code>assets</code>；</p><p>默认创建三个包对应 MVC 的三层架构：</p><p><code>app/controllers</code></p><p><code>app/models</code></p><p><code>app/views</code></p><p><code>app</code> 下可以随意创建包，包路径也是随意的，比如：<code>app/store/xianglin/play2/controllers</code> 或者 <code>app/store/xiangln/play2/services</code>。</p><h3 id="public"><a href="#public" class="headerlink" title="public/"></a><code>public/</code></h3><p><code>public</code> 存储资源文件，三个子目录分别用于存储 images、CSS 和 JavaScript。</p><h3 id="conf"><a href="#conf" class="headerlink" title="conf/"></a><code>conf/</code></h3><p><code>conf</code> 目录存放 Play2 的配置文件，主要有三个配置文件：</p><p><code>application.conf</code>：保存应用大部分的配置项，参见：<a href="https://www.playframework.com/documentation/2.8.x/ConfigFile">Configuration file syntax and features</a>；</p><p><code>routes</code>：保存 Play2 的路由规则，即如何将 <code>uri</code> 和 <code>Action</code> 对应；</p><p><code>logback.xml</code>：保存 Logback 日志框架的配置。</p><h3 id="lib"><a href="#lib" class="headerlink" title="lib/"></a><code>lib/</code></h3><p><code>lib</code> 是可选的，用于存放需要手动管理的依赖，只需要添加需要的 <code>JAR</code> 文件，Play2 会自动把它加入到应用的 <code>classpath</code>，参见：<a href="https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html">Unmanaged dependencies</a>。</p><h3 id="build-sbt"><a href="#build-sbt" class="headerlink" title="build.sbt"></a><code>build.sbt</code></h3><p>类似于 Maven 项目中的 <code>pom.xml</code> ，定义项目构建的细节，如：项目名称、版本、依赖等。</p><h3 id="project"><a href="#project" class="headerlink" title="project/"></a><code>project/</code></h3><p>保存如下两个文件，用于定义 sbt 的构建规则：</p><p><code>plugins.sbt</code>：定义项目使用的 sbt 插件；</p><p><code>build.properties</code>：一般用于定义项目使用的 sbt 版本。</p><h3 id="target"><a href="#target" class="headerlink" title="target/"></a><code>target/</code></h3><p>保存项目构建产生的文件。</p><h2 id="开发-Hello-World-实例程序"><a href="#开发-Hello-World-实例程序" class="headerlink" title="开发 Hello World 实例程序"></a>开发 <code>Hello World</code> 实例程序</h2><p>参见：<a href="https://www.playframework.com/documentation/2.8.x/ImplementingHelloWorld"> Implementing Hello World</a>。</p><p>使用 Play 创建 <code>Hello World</code> 请求很简单，主要有如下几步：</p><ol><li>创建 <code>Hello World</code> 页面；</li><li>创建一个 <code>Action</code> 方法；</li><li>定义请求映射规则；</li><li>测试请求。</li></ol><h3 id="创建-Hello-World-页面"><a href="#创建-Hello-World-页面" class="headerlink" title="创建 Hello World 页面"></a>创建 <code>Hello World</code> 页面</h3><p>在 <code>app/views</code> 目录下创建 <code>hello.scala.html</code> ，添加如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">@(name: String)<br>@main(&quot;Hello&quot;) &#123;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello @name<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建-Action-方法"><a href="#创建-Action-方法" class="headerlink" title="创建 Action 方法"></a>创建 <code>Action</code> 方法</h3><p>在 <code>app/controllers/HomeController</code> 中添加方法处理请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(views.html.hello.render(name));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义映射规则"><a href="#定义映射规则" class="headerlink" title="定义映射规则"></a>定义映射规则</h3><p>在 <code>conf/routes</code> 中添加请求 <code>/hello</code> 和 <code>Action</code> 的映射规则：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">GET</span>        /hello               controllers.<span class="hljs-type">HomeController</span>.hello(name:<span class="hljs-type">String</span>)<br></code></pre></td></tr></table></figure><h3 id="访问请求"><a href="#访问请求" class="headerlink" title="访问请求"></a>访问请求</h3><p>在浏览器输入 <code>http://localhost:9000/hello?name=MyName</code> 访问 Hello 页面，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/213501.png" alt="image-20220421213501584"></p><h2 id="Play-应用的处理流程"><a href="#Play-应用的处理流程" class="headerlink" title="Play 应用的处理流程"></a>Play 应用的处理流程</h2><p>参见：<a href="https://www.playframework.com/documentation/2.8.x/PlayApplicationOverview">Play Application Overview</a>。</p><p>Play 处理 <code>http://localhost:9000/</code> 请求的主要步骤如下：</p><ol><li>浏览器使用 <code>GET</code> 请求访问根路径 <code>/</code> ；</li><li>Play 内部的 HTTP Server 收到请求；</li><li>Play 使用 <code>routes</code> 文件解析请求，将请求映射到对应的 <code>Action</code> 方法；</li><li><code>Action</code> 方法渲染 <code>index</code> 页面；</li><li>HTTP Server 返回 HTML 格式的响应内容。</li></ol><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/214438.png" alt="img"></p><h2 id="Play-示例项目"><a href="#Play-示例项目" class="headerlink" title="Play 示例项目"></a>Play 示例项目</h2><p><a href="https://www.playframework.com/documentation/2.8.x/Tutorials">Play Tutorials</a> 有很多 Play 的实例项目，供学习使用。</p><h1 id="Main-concepts-for-Java"><a href="#Main-concepts-for-Java" class="headerlink" title="Main concepts for Java"></a>Main concepts for Java</h1><p>参见：<a href="https://www.playframework.com/documentation/2.8.x/JavaHome">Main concepts for Java</a>。</p><h2 id="使用-Play-Configuration"><a href="#使用-Play-Configuration" class="headerlink" title="使用 Play Configuration"></a>使用 Play <code>Configuration</code></h2><p>使用依赖注入的方式在项目中使用 Play 的配置对象 <code>Config</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controllers;<br><br><span class="hljs-keyword">import</span> com.typesafe.config.Config;<br><span class="hljs-keyword">import</span> play.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.inject.Inject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Config config;<br><br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConfigController</span><span class="hljs-params">(Config config)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.config = config;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">config</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ok(Json.toJson(config));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="处理-HTTP-请求"><a href="#处理-HTTP-请求" class="headerlink" title="处理 HTTP 请求"></a>处理 HTTP 请求</h2><h3 id="Play-基础概念：Action、Controller-和-Result"><a href="#Play-基础概念：Action、Controller-和-Result" class="headerlink" title="Play 基础概念：Action、Controller 和 Result"></a>Play 基础概念：<code>Action</code>、<code>Controller</code> 和 <code>Result</code></h3><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a><code>Action</code></h4><p>Play 接收的大部分方法都交由 <code>Action</code> 处理，<code>Action</code> 用于处理请求并返回结果，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> play.mvc.<span class="hljs-function">Result <span class="hljs-title">index</span><span class="hljs-params">(play.mvc.Http.Request request)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> play.mvc.Results.ok(<span class="hljs-string">&quot;Got request &quot;</span> + request + <span class="hljs-string">&quot;!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a><code>Controller</code></h4><p>Play 中使用的 <code>Controller</code> 继承自 <code>play.mvc.Controllr</code> ，用于定义一组 <code>Action</code> ，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controllers;<br><br><span class="hljs-keyword">import</span> play.*;<br><span class="hljs-keyword">import</span> play.mvc.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;It works!&quot;</span>);<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a><code>Result</code></h4><p>HTTP Response 包括：响应行、响应头和返回数据，Play 中 <code>play.mvc.Result</code> 定义了 HTTP 响应结构，<code>play.mvc.Results</code> 定义了许多静态方法，方便返回各种 <code>Result</code>，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 200 OK</span><br>Result ok = ok(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br><span class="hljs-comment">// 404 Not Found</span><br>Result notFound = notFound();<br>Result pageNotFound = notFound(<span class="hljs-string">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span>).as(<span class="hljs-string">&quot;text/html&quot;</span>);<br><span class="hljs-comment">// 400 Bad Request</span><br>Result badRequest = badRequest(views.html.form.render(formWithErrors));<br><span class="hljs-comment">// 500 Internal Server Error</span><br>Result oops = internalServerError(<span class="hljs-string">&quot;Oops&quot;</span>);<br><span class="hljs-comment">// play.mvc.Http.Status</span><br>Result anyStatus = status(<span class="hljs-number">488</span>, <span class="hljs-string">&quot;Strange response type&quot;</span>);<br><span class="hljs-comment">// 3XX Redirection</span><br>Result redirect = redirect(<span class="hljs-string">&quot;/user/home&quot;</span>);<br>Result temporaryRedirect =  temporaryRedirect(<span class="hljs-string">&quot;/user/home&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="HTTP-映射"><a href="#HTTP-映射" class="headerlink" title="HTTP 映射"></a>HTTP 映射</h3><p><code>router</code> 的作用是将每个请求映射到一个 <code>Action</code> 方法的调用，HTTP 请求包括两个部分：</p><ul><li>请求路径（例如：<code>/clients/1234</code>、<code>/photos/list</code>），包括查询字符串；</li><li>HTTP 请求方法（<code>GET</code>、<code>POST</code> 等）。</li></ul><p>Play2 的映射定义在 <code>conf/routes</code> 文件中，Play2 会编译它，因此可以直接在浏览器中看到错误。映射定义为如下格式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Protocol</span>    <span class="hljs-string">URLPATH  ControllerMapping</span><br></code></pre></td></tr></table></figure><p>最简单的映射如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">GET</span>        <span class="hljs-string">/                    controllers.HomeController.index()</span><br><span class="hljs-attr">GET</span>        <span class="hljs-string">/hello               controllers.HomeController.hello(name:String)</span><br></code></pre></td></tr></table></figure><p>存在动态参数的映射如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># match /bookshop/book/123/</span><br><span class="hljs-attr">GET</span> <span class="hljs-string">/bookshop/book/:id/         controllers.Application.getBook(id:String)</span><br><br><span class="hljs-comment"># match </span><br><span class="hljs-comment"># /bookshop/book/images/book1.jpg</span><br><span class="hljs-comment"># /bookshop/book/images/books/book2.jpg</span><br><span class="hljs-comment"># /bookshop/book/images/books/thumbnails/small/image1.jpg</span><br><span class="hljs-attr">GET</span>  <span class="hljs-string">/bookshop/book/images/*  controllers.Application.fetchImage(name:String)</span><br><br><span class="hljs-comment"># $variablename&lt;regular expression&gt;</span><br><span class="hljs-comment"># match /bookshop/book/10/page/12/</span><br><span class="hljs-comment"># not match /bookshop/book/10/page/a/</span><br><span class="hljs-attr">GET</span>  <span class="hljs-string">/bookshop/book/:id/page/$page&lt;[0-9]+&gt;/</span><br><span class="hljs-meta">controllers.Application.fetchBookpage(bookid</span>:<span class="hljs-string">String, page:Integer)</span><br></code></pre></td></tr></table></figure><p>存在固定参数的映射如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">GET</span> <span class="hljs-string">/bookshop//authors/    controllers.Application.authors(limit: Integer = 10)</span><br></code></pre></td></tr></table></figure><p>存在可选参数的映射如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># variable? = default-value</span><br><span class="hljs-attr">GET</span>   <span class="hljs-string">/bookshop//showcomment/    controllers.Application.showComment(userid ?= null)</span><br></code></pre></td></tr></table></figure><p>参见官方文档中有更详细的介绍。</p><h3 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h3><h4 id="更改默认的-Content-Type"><a href="#更改默认的-Content-Type" class="headerlink" title="更改默认的 Content-Type"></a>更改默认的 <code>Content-Type</code></h4><p>Play2 中 HTTP 响应的 <code>ContentType</code> 会根据 Body 中内容的 Java 类型自动推导，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// text/plain</span><br>Result textResult = ok(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br><br><span class="hljs-comment">// application/json</span><br>Result jsonResult = ok(Json.toJson(object));<br></code></pre></td></tr></table></figure><p>可以通过如下方法修改 <code>Content-Type</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> play.mvc.<span class="hljs-function">Result <span class="hljs-title">as</span><span class="hljs-params">(String contentType)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Result htmlResult = ok(<span class="hljs-string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>).as(<span class="hljs-string">&quot;text/html&quot;</span>);<br>Result htmlResult = ok(<span class="hljs-string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>).as(play.mvc.Http.MimeTypes.HTML);<br></code></pre></td></tr></table></figure><h4 id="更改-HTTP-响应头"><a href="#更改-HTTP-响应头" class="headerlink" title="更改 HTTP 响应头"></a>更改 HTTP 响应头</h4><p>通过如下方法修改响应头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> play.mvc.<span class="hljs-function">Result <span class="hljs-title">withHeader</span><span class="hljs-params">(String name, String value)</span> </span>&#123;<br>&#125;<br><span class="hljs-comment">// The headers are processed in pairs, so nameValues(0) is the first header&#x27;s name, and nameValues(1) is the first header&#x27;s value, nameValues(2) is second header&#x27;s name, and so on.</span><br><span class="hljs-keyword">public</span> play.mvc.<span class="hljs-function">Result <span class="hljs-title">withHeaders</span><span class="hljs-params">(String... nameValues)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>)<br>      .as(MimeTypes.HTML)<br>      .withHeader(CACHE_CONTROL, <span class="hljs-string">&quot;max-age=3600&quot;</span>)<br>      .withHeader(ETAG, <span class="hljs-string">&quot;some-etag-calculated-value&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-Cookies"><a href="#使用-Cookies" class="headerlink" title="使用 Cookies"></a>使用 <code>Cookies</code></h4><p>通过如下方法设置 <code>Cookies</code> 或删除 <code>Cookies</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// set cookies</span><br><span class="hljs-keyword">public</span> play.mvc.<span class="hljs-function">Result <span class="hljs-title">withCookies</span><span class="hljs-params">(play.mvc.Http.Cookie... newCookies)</span> </span>&#123;<br>&#125;<br><span class="hljs-comment">// discarding cookies</span><br><span class="hljs-keyword">public</span> play.mvc.<span class="hljs-function">Result <span class="hljs-title">discardingCookie</span><span class="hljs-params">(String name)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// add a Cookie</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>)<br>      .as(MimeTypes.HTML)<br>      .withCookies(<br>          Cookie.builder(<span class="hljs-string">&quot;theme&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>)<br>              .withMaxAge(Duration.ofSeconds(<span class="hljs-number">3600</span>))<br>              .withPath(<span class="hljs-string">&quot;/some/path&quot;</span>)<br>              .withDomain(<span class="hljs-string">&quot;.example.com&quot;</span>)<br>              .withSecure(<span class="hljs-keyword">false</span>)<br>              .withHttpOnly(<span class="hljs-keyword">true</span>)<br>              .withSameSite(Cookie.SameSite.STRICT)<br>              .build());<br>&#125;<br><br><span class="hljs-comment">// discard a Cookie</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>).as(MimeTypes.HTML).discardingCookie(<span class="hljs-string">&quot;theme&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Session-And-Flash"><a href="#Session-And-Flash" class="headerlink" title="Session And Flash"></a>Session And Flash</h3><p>保存在 Session 中的数据在整个会话中有效；保存在 Flash 中的数据仅会在下次请求中生效。Play 中 Session 和 Flash 都是通过 Cookies 实现的，所以有几条注意事项：</p><ul><li>数据的大小不能超过 4K；</li><li>只能存储字符串内容；</li><li>Cookies 中的内容在浏览器中可见，可能会导致敏感信息泄漏。</li></ul><h4 id="Session-配置"><a href="#Session-配置" class="headerlink" title="Session 配置"></a>Session 配置</h4><p><code>play.http.session.cookieName</code>：Cookie 名称，默认为：<code>PLAY_SESSION</code>；</p><p><code>play.http.session.maxAge</code>：Session 的超时时间，默认没有超时时间，仅在浏览器关闭时无效。</p><h4 id="操作-Session"><a href="#操作-Session" class="headerlink" title="操作 Session"></a>操作 Session</h4><p>使用如下方式设置、读取和删除 Session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionAndFlashController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addSession</span><span class="hljs-params">(Http.Request request)</span> </span>&#123;<br>        <span class="hljs-comment">// 添加 Session</span><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/session/read&quot;</span>).addingToSession(request, <span class="hljs-string">&quot;connected&quot;</span>, <span class="hljs-string">&quot;user@gmail.com&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">readSession</span><span class="hljs-params">(Http.Request request)</span> </span>&#123;<br>        <span class="hljs-comment">// 读取 Session</span><br>        <span class="hljs-keyword">return</span> request<br>                .session()<br>                .get(<span class="hljs-string">&quot;connected&quot;</span>)<br>                .map(user -&gt; ok(<span class="hljs-string">&quot;Hello &quot;</span> + user))<br>                .orElseGet(() -&gt; unauthorized(<span class="hljs-string">&quot;Oops, you are not connected&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">clearSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 清除 Session</span><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/session/read&quot;</span>).withNewSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="操作-Flash"><a href="#操作-Flash" class="headerlink" title="操作 Flash"></a>操作 Flash</h4><p>Flash 类似 Session，但仅在下一次请求有效。使用如下方式设置、读取 Flash：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addFlash</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/flash/read&quot;</span>).flashing(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;The item has been created&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">readFlash</span><span class="hljs-params">(Http.Request request)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(request.flash().get(<span class="hljs-string">&quot;success&quot;</span>).orElse(<span class="hljs-string">&quot;Welcome!&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="请求体解析器"><a href="#请求体解析器" class="headerlink" title="请求体解析器"></a>请求体解析器</h3><h4 id="什么是请求体解析器"><a href="#什么是请求体解析器" class="headerlink" title="什么是请求体解析器"></a>什么是请求体解析器</h4><p>HTTP 请求的格式是：请求行、请求头和请求体。通常来说请求头很小，能够安全的缓存在内存中，Play 使用 <code>play.mvc.Http.RequestHeader</code> 表示请求头。请求体可能很大，因此不能直接缓存在内存中，一般称之为流。事实上很多请求体比较小而且能映射为某种模型缓存在内存中，Play 使用 <code>play.mvc.BodyParser</code> 来完成请求体从流到模型的映射。Play 是一个异步框架，因此不能使用传统的 <code>java.io.InputStream</code> 来读取请求体，Play 使用 <a href="https://doc.akka.io/docs/akka/2.6/stream/index.html?language=java&_ga=2.144468661.1268954494.1652018498-216591448.1652018498">Akka Stream</a> 完成这一操作。</p><h4 id="使用自带的请求体解析器"><a href="#使用自带的请求体解析器" class="headerlink" title="使用自带的请求体解析器"></a>使用自带的请求体解析器</h4><p>没有明确指定时 Play 根据 <code>Content-Type</code> 来选择合适的请求体解析器，如下面表格所示：</p><table><thead><tr><th>Content-Type</th><th>Type</th><th>Method</th></tr></thead><tbody><tr><td><code>text/plain</code></td><td><code>String</code></td><td><code>asText()</code></td></tr><tr><td><code>application/json</code></td><td><code>com.fasterxml.jackson.databind.JsonNode</code></td><td><code>asJson()</code></td></tr><tr><td><code>application/xml</code>、<code>text/xml</code>、<code>application/XXX+xml</code></td><td><code>org.w3c.Document</code></td><td><code>asXml()</code></td></tr><tr><td><code>application/x-www-form-urlencoded</code></td><td><code>Map&lt;String, String[]&gt;</code></td><td><code>asFormUrlEncoded()</code></td></tr><tr><td><code>multipart/form-data</code></td><td><code>play.mvc.Http.MultipartFormData</code>、<code>play.mvc.Http.MultipartFormData.FilePart</code></td><td><code>asMultipartFormData()</code></td></tr><tr><td>other</td><td><code>play.mvc.Http.RawBuffer</code></td><td><code>asRaw()</code></td></tr></tbody></table><p>使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BodyParserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">json</span><span class="hljs-params">(Http.Request request)</span> </span>&#123;<br>        JsonNode jsonNode = request.body().asJson();<br>        <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;Got name: &quot;</span> + jsonNode.get(<span class="hljs-string">&quot;name&quot;</span>).asText());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="明确指定请求体解析器"><a href="#明确指定请求体解析器" class="headerlink" title="明确指定请求体解析器"></a>明确指定请求体解析器</h4><p>使用 <code>@play.mvc.BodyParser.Of</code> 注解明确指定当前请求的请求体解析器，Play 自带的解析器作为 <code>play.mvc.BodyParser</code> 的内部类提供，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@play</span>.mvc.BodyParser.Of(BodyParser.Json.class)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">json</span><span class="hljs-params">(Http.Request request)</span> </span>&#123;<br>    JsonNode jsonNode = request.body().asJson();<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;Got name: &quot;</span> + jsonNode.get(<span class="hljs-string">&quot;name&quot;</span>).asText());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="请求体长度限制"><a href="#请求体长度限制" class="headerlink" title="请求体长度限制"></a>请求体长度限制</h4><p><code>play.http.parser.maxMemoryBuffer</code>：内存缓存限制，默认100KB；</p><p><code>play.http.parser.maxDiskBuffer</code>：磁盘缓存限制，默认10MB。</p><h3 id="组合-Action"><a href="#组合-Action" class="headerlink" title="组合 Action"></a>组合 Action</h3><p>使用组合 Action 需要两步：</p><p>1、实现一个 Action 用于完成通用功能，比如打印日志等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VerboseAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Action</span>.<span class="hljs-title">Simple</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(VerboseAction.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CompletionStage&lt;Result&gt; <span class="hljs-title">call</span><span class="hljs-params">(Http.Request req)</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;Calling action for &#123;&#125;&quot;</span>, req);<br>        <span class="hljs-keyword">return</span> delegate.call(req);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在需要打印日志的 Action 方法上增加 <code>@With()</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VerboseController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-meta">@With(VerboseAction.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">verboseIndex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;It works!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试 <code>verboseIndex</code> 请求，控制台中打印出对应的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">2022-05-15 15:58:55 INFO  controllers.actions.VerboseAction  Calling action <span class="hljs-keyword">for</span> GET /composition/index<br></code></pre></td></tr></table></figure><p> <code>@With()</code> 注解能应用在 <code>Controller</code> 中，此时其中所有的 Action 都会生效。</p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>上面 <code>@With(VerboseAction.class)</code> 也可以用一个自定义的注解实现，比如 <code>@VerboseAnnotation</code> ，这个注解自身需要添加 <code>@With</code> 注解，定义自定义注解需要三步：</p><p>1、定义一个注解，表示需要的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@With(VerboseAnnotationAction.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> VerboseAnnotation &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在 Action 中实现通用功能，比如打印日志：</p><p><code>VerboseAnnotationAction</code> 通过 <code>configuration</code> 获取 <code>@VerboseAnnotation</code> 中定义的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class VerboseAnnotationAction extends Action&lt;VerboseAnnotation&gt; &#123;<br>    private final static Logger logger = LoggerFactory.getLogger(VerboseAction.class);<br><br>    @Override<br>    public CompletionStage&lt;Result&gt; call(Http.Request req) &#123;<br>        <span class="hljs-keyword">if</span> (configuration.value()) &#123;<br>            logger.info(<span class="hljs-string">&quot;Calling action for &#123;&#125;&quot;</span>, req);<br>        &#125;<br>        <span class="hljs-built_in">return</span> delegate.call(req);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、在 Action 方法上增加自定义的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@VerboseAnnotation</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">verboseHome</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-string">&quot;It works too!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>事实上 <code>@play.mvc.Security.Authenticated</code> 和 <code>@play.cache.Cached</code> 也是通过此方式实现的。</p><h4 id="打印组合-Action-的作用顺序"><a href="#打印组合-Action-的作用顺序" class="headerlink" title="打印组合 Action 的作用顺序"></a>打印组合 Action 的作用顺序</h4><p>在 <code>logback.xml</code> 配置文件中添加如下配置，就能在日志中看到完整的 Action 组合链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;play.mvc.Action&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">2022-05-15 16:29:45 DEBUG play.mvc.Action  <span class="hljs-comment">### Start of action order</span><br>2022-05-15 16:29:45 DEBUG play.mvc.Action  1. controllers.actions.VerboseAnnotationAction defined on public play.mvc.Result controllers.VerboseController.verboseHome()<br>2022-05-15 16:29:45 DEBUG play.mvc.Action  2. play.http.DefaultActionCreator<span class="hljs-variable">$1</span>()<br>2022-05-15 16:29:45 DEBUG play.mvc.Action  3. play.core.j.JavaAction$<span class="hljs-variable">$anon</span><span class="hljs-variable">$1</span>()<br>2022-05-15 16:29:45 DEBUG play.mvc.Action  <span class="hljs-comment">### End of action order</span><br></code></pre></td></tr></table></figure><h3 id="拦截-HTTP-请求"><a href="#拦截-HTTP-请求" class="headerlink" title="拦截 HTTP 请求"></a>拦截 HTTP 请求</h3><p>Play 提供了两种方式拦截 Action 的调用，第一种是 <code>ActionCreator</code> ，通过 <code>createAction</code> 方法返回一个 Action，这个 Action 会作为 Action 组合链</p><p>中第一个 Action 或者最后一个 Action，取决于配置：<code>play.http.actionComposition.executeActionCreatorActionFirst</code>。</p><p>第二种方式是实现自定义的 <code>HttpRequestHandler</code>。</p><h4 id="Action-creators"><a href="#Action-creators" class="headerlink" title="Action creators"></a>Action creators</h4><p>默认需要在根包下定义一个名为 <code>ActionCreator</code> 且实现 <code>play.http.ActionCreator</code> 的类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionCreator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">play</span>.<span class="hljs-title">http</span>.<span class="hljs-title">ActionCreator</span> </span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Action <span class="hljs-title">createAction</span><span class="hljs-params">(Http.Request request, Method actionMethod)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Action.Simple() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> CompletionStage&lt;Result&gt; <span class="hljs-title">call</span><span class="hljs-params">(Http.Request req)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> delegate.call(req);<br>      &#125;<br>    &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">play.http.actionCreator</span> = <span class="hljs-string">&quot;com.example.MyActionCreator&quot;</span><br></code></pre></td></tr></table></figure><h2 id="异步-HTTP-编程"><a href="#异步-HTTP-编程" class="headerlink" title="异步 HTTP 编程"></a>异步 HTTP 编程</h2><h3 id="处理异步结果"><a href="#处理异步结果" class="headerlink" title="处理异步结果"></a>处理异步结果</h3><h4 id="创建和使用-CompletionStage-lt-Result-gt"><a href="#创建和使用-CompletionStage-lt-Result-gt" class="headerlink" title="创建和使用 CompletionStage&lt;Result&gt;"></a>创建和使用 <code>CompletionStage&lt;Result&gt;</code></h4><p>Java8 提供了 <code>CompletionStage</code> 表示 <code>promise</code>，<code>CompletionStage&lt;Result&gt;</code> 最终会得到一个 <code>Result</code>。通过 <code>CompletableFuture.supplyAsync()</code> 方法可以得到一个 <code>CompletionStage</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// creates new task</span><br>CompletionStage&lt;Integer&gt; promiseOfInt = CompletableFuture.supplyAsync(() -&gt; intensiveComputation());<br></code></pre></td></tr></table></figure><p><code>supplyAsync</code> 会创建一个新的任务提交到 <code>fork/join</code> 框架中执行。</p><h4 id="使用-HttpExecutionContext"><a href="#使用-HttpExecutionContext" class="headerlink" title="使用 HttpExecutionContext"></a>使用 <code>HttpExecutionContext</code></h4><p>在 Action 中使用 Java <code>CompletionStage</code> 时，必须显式提供 HTTP 执行上下文作为执行期，以确保类加载器保持在作用域内，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpExecutionContext httpExecutionContext;<br><br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AsyncController</span><span class="hljs-params">(HttpExecutionContext httpExecutionContext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.httpExecutionContext = httpExecutionContext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CompletionStage&lt;Result&gt; <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>        CompletionStage&lt;Integer&gt; promiseOfInt = CompletableFuture.supplyAsync(<span class="hljs-keyword">this</span>::intensiveComputation, httpExecutionContext.current());<br>        <span class="hljs-keyword">return</span> promiseOfInt.thenApply(integer -&gt; ok(String.valueOf(integer)));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Integer <span class="hljs-title">intensiveComputation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> value = Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;<br>            value++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <a href="https://www.playframework.com/documentation/2.8.x/ThreadPools#Class%20loaders">以确保类加载器保持在作用域内</a>。</li></ul><h4 id="使用-CustomExecutionContext-and-HttpExecution"><a href="#使用-CustomExecutionContext-and-HttpExecution" class="headerlink" title="使用 CustomExecutionContext and HttpExecution"></a>使用 <code>CustomExecutionContext</code> and <code>HttpExecution</code></h4><p>使用 <code>CompletionStage</code> 或者 <code>HttpExecutionContext</code> 时仍然使用的是 Play 默认的执行上下文，如果需要执行一些阻塞 API 比如 JDBC，最好的方式是实现自己的 <code>CustomExecutionContext</code>，将阻塞任务从 Play 的线程池中移出去，通过继承 <code>play.libs.concurrent.CustomExecutionContext</code> 实现自定义的 <code>ExecutionContex</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCustomExecutionContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CustomExecutionContext</span> </span>&#123;<br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCustomExecutionContext</span><span class="hljs-params">(ActorSystem actorSystem)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(actorSystem, <span class="hljs-string">&quot;blocking-io-dispatcher&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>blocking-io-dispatcher</code> 在 <code>application.conf</code> 中定义：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">blocking-io-dispatcher</span> <span class="hljs-string">&#123;</span><br>  <span class="hljs-attr">type</span> = <span class="hljs-string">Dispatcher</span><br>  <span class="hljs-attr">executor</span> = <span class="hljs-string">&quot;thread-pool-executor&quot;</span><br>  <span class="hljs-meta">thread-pool-executor</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-meta">fixed-pool-size</span> = <span class="hljs-string">32</span><br>  <span class="hljs-attr">&#125;</span><br>  <span class="hljs-attr">throughput</span> = <span class="hljs-string">1</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncWithCustomExecutionContentController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MyCustomExecutionContext myCustomExecutionContext;<br><br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AsyncWithCustomExecutionContentController</span><span class="hljs-params">(MyCustomExecutionContext myCustomExecutionContext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.myCustomExecutionContext = myCustomExecutionContext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CompletionStage&lt;Result&gt; <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> executor = HttpExecution.fromThread(myCustomExecutionContext);<br>        <span class="hljs-keyword">return</span> CompletableFuture.supplyAsync(() -&gt; ok(<span class="hljs-string">&quot;It&#x27;s work!&quot;</span>), executor);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用 <code>HttpExecution.fromThread</code> 方法从 <code>MyCustomExecutionContext</code> 中获取已存在的线程池。</p><h4 id="处理超时"><a href="#处理超时" class="headerlink" title="处理超时"></a>处理超时</h4><p>请求经常需要限定等待时间，避免出错时浏览器无限等待。通过 <code>play.api.libs.concurrent.Futures.timeout</code> 包装 <code>CompletionStage</code> 实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeoutController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Futures futures;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MyCustomExecutionContext myCustomExecutionContext;<br><br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TimeoutController</span><span class="hljs-params">(Futures futures, MyCustomExecutionContext myCustomExecutionContext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.futures = futures;<br>        <span class="hljs-keyword">this</span>.myCustomExecutionContext = myCustomExecutionContext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CompletionStage&lt;Result&gt; <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> futures.timeout(delayedResult(), Duration.ofSeconds(<span class="hljs-number">1</span>));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CompletionStage&lt;Result&gt; <span class="hljs-title">delayedResult</span><span class="hljs-params">()</span> </span>&#123;<br>        ExecutionContextExecutor executor = HttpExecution.fromThread(myCustomExecutionContext);<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">return</span> futures.delayed(() -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;<br>            <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>            <span class="hljs-keyword">long</span> seconds = end - start;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rendered after &quot;</span> + seconds + <span class="hljs-string">&quot; seconds&quot;</span>;<br>        &#125;, executor), Duration.of(<span class="hljs-number">3</span>, SECONDS)).thenApply(Results::ok);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，超时 <code>timeout</code> 和取消 <code>cancel</code> 不同，超时后 <code>delayedResult</code> 仍会执行，尽管结果不会被返回。</p><h3 id="流式-HTTP-响应"><a href="#流式-HTTP-响应" class="headerlink" title="流式 HTTP 响应"></a>流式 HTTP 响应</h3><h4 id="Content-Length-响应头"><a href="#Content-Length-响应头" class="headerlink" title="Content-Length 响应头"></a><code>Content-Length</code> 响应头</h4><p>HTTP1.1 支持长连接，一个 TCP 连接可以服务多次 HTTP 请求，此时服务端必须使用 <code>Content-Length</code> 响应头。默认情况下，使用 Play 不需要明确指定 HTTP 响应头，因为返回的内容是明确的，Play 可以自行计算并添加对应的响应头。HTTP 响应由响应头和响应体组成，使用 <code>play.http.HttpEntity</code> 表示响应体，Play 中一个 HTTP 响应的表示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">httpResponse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<br>        <span class="hljs-keyword">new</span> ResponseHeader(Http.Status.OK, Collections.emptyMap()),<br>        <span class="hljs-keyword">new</span> HttpEntity.Strict(ByteString.fromString(<span class="hljs-string">&quot;It&#x27;s work!&quot;</span>), Optional.of(Http.MimeTypes.TEXT))<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="发送大量数据"><a href="#发送大量数据" class="headerlink" title="发送大量数据"></a>发送大量数据</h4><p>使用 Play 返回一个文件给客户端，构建一个 <code>Source[ByteString, _]</code> 作为响应内容，然后使用 <code>play.http.HttpEntity</code> 返回，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> path = Paths.get(<span class="hljs-string">&quot;/home/xianglin/Downloads/20220504100611.json&quot;</span>);<br>    <span class="hljs-keyword">var</span> source = FileIO.fromPath(path);<br>    <span class="hljs-keyword">var</span> contentLength = Optional.&lt;Long&gt;empty();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<br>        <span class="hljs-keyword">new</span> ResponseHeader(Http.Status.OK, Collections.emptyMap()),<br>        <span class="hljs-keyword">new</span> HttpEntity.Streamed(source, contentLength, Optional.of(Http.MimeTypes.TEXT))<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的响应没有明确指定 <code>contentLength</code>，Play 就会将文件加载到内存然后计算长度。对于大文件，需要明确指定 <code>contentLength</code> 避免这种情况发送，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">index</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-keyword">var</span> path = Paths.get(<span class="hljs-string">&quot;/home/xianglin/Downloads/20220504100611.json&quot;</span>);<br>    <span class="hljs-keyword">var</span> source = FileIO.fromPath(path);<br><br>    <span class="hljs-comment">// compute the response size</span><br>    <span class="hljs-keyword">var</span> contentLength = Optional.of(Files.size(path));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<br>        <span class="hljs-keyword">new</span> ResponseHeader(Http.Status.OK, Collections.emptyMap()),<br>        <span class="hljs-keyword">new</span> HttpEntity.Streamed(source, contentLength, Optional.of(Http.MimeTypes.TEXT))<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h4><p>Play 可以使用 <code>play.mvc.Results#ok(java.io.File)</code> 方法直接返回文件，此方法会添加 <code>Content-Type</code> 和 <code>Content-Disposition</code> 响应头。默认情况下是 <code>Content-Disposition: inline; filename=</code>，如果不想浏览器下载文件而是直接打开文件，可以使用 <code>play.mvc.Results#ok(java.io.File, boolean)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">file</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/home/xianglin/Downloads/20220504100611.json&quot;</span>), Optional.of(<span class="hljs-string">&quot;示例文件.json&quot;</span>)).as(Http.MimeTypes.BINARY);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">fileToDisplay</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/home/xianglin/Downloads/20220504100611.json&quot;</span>), <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分片响应"><a href="#分片响应" class="headerlink" title="分片响应"></a>分片响应</h4><p>分块传输编码允许 HTTP 服务器发送给客户端的数据分成多个部分。Play 中可以使用 <code>play.mvc.Results#ok(java.io.InputStream)</code>  和 <code>ok().chunked()</code> 方法返回分块数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">fileStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>    <span class="hljs-keyword">return</span> ok(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;/home/xianglin/Downloads/20220504100611.json&quot;</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">trunked</span><span class="hljs-params">()</span> </span>&#123;<br>    Source&lt;ByteString, ?&gt; trunked = Source.&lt;ByteString&gt;actorRef(<span class="hljs-number">256</span>, OverflowStrategy.dropNew())<br>        .mapMaterializedValue(<br>        sourceActor -&gt; &#123;<br>            sourceActor.tell(ByteString.fromString(<span class="hljs-string">&quot;&quot;</span>), <span class="hljs-keyword">null</span>);<br>            sourceActor.tell(ByteString.fromString(<span class="hljs-string">&quot;&quot;</span>), <span class="hljs-keyword">null</span>);<br>            sourceActor.tell(ByteString.fromString(<span class="hljs-string">&quot;&quot;</span>), <span class="hljs-keyword">null</span>);<br>            sourceActor.tell(ByteString.fromString(<span class="hljs-string">&quot;&quot;</span>), <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">return</span> NotUsed.getInstance();<br>        &#125;<br>    );<br>    <span class="hljs-keyword">return</span> ok().chunked(trunked);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Play-modules"><a href="#Play-modules" class="headerlink" title="Play modules"></a>Play modules</h2><h3 id="Play-with-Mongo"><a href="#Play-with-Mongo" class="headerlink" title="Play with Mongo"></a>Play with Mongo</h3><p><a href="https://github.com/morellik/play-morphia">PlayMorphia</a> 是 <a href="https://github.com/MorphiaOrg/morphia">Morphia</a> 针对 Play 的拓展，方便使用 Morphia 进行 Play MongoDB 开发。</p><h4 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h4><p>添加 Morphia 的依赖：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">libraryDependencies ++= <span class="hljs-type">Seq</span>(<br>    guice,<br>    <span class="hljs-string">&quot;dev.morphia.morphia&quot;</span> % <span class="hljs-string">&quot;core&quot;</span> % <span class="hljs-string">&quot;1.6.1&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>从 PlayMorphia 项目中下载 <a href="https://github.com/morellik/play-morphia/tree/master/out/artifacts/play_morphia_jar">play_morphia_jar</a> 放在项目的 <code>lib</code> 目录下；</p><p>在 <code>conf/application.conf</code> 中配置 Mongo 的连接信息，最终效果如下图所示（如果使用 IDEA,可以右键点击 <code>lib</code> 选择“添加为库”）：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/214011.png" alt="image-20220515214011364"></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>简单按照 <code>controllers</code>、<code>models</code> 和 <code>repositories</code> 的结构创建三个包，以操作 <code>User</code> 为例。</p><p><code>User</code> Model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> models;<br><br><span class="hljs-keyword">import</span> dev.morphia.annotations.Entity;<br><span class="hljs-keyword">import</span> dev.morphia.annotations.Id;<br><span class="hljs-keyword">import</span> org.bson.types.ObjectId;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Entity(&quot;DB.users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> ObjectId id;<br>    <span class="hljs-keyword">private</span> String firstname;<br>    <span class="hljs-keyword">private</span> String lastname;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">// getter and setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserRepository</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> repositories;<br><br><span class="hljs-keyword">import</span> dev.morphia.Key;<br><span class="hljs-keyword">import</span> it.unifi.cerm.playmorphia.PlayMorphia;<br><span class="hljs-keyword">import</span> models.User;<br><span class="hljs-keyword">import</span> org.bson.types.ObjectId;<br><br><span class="hljs-keyword">import</span> javax.inject.Inject;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PlayMorphia playMorphia;<br><br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserRepository</span><span class="hljs-params">(PlayMorphia playMorphia)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.playMorphia = playMorphia;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> playMorphia<br>                .datastore()<br>                .createQuery(User.class)<br>                .field(<span class="hljs-string">&quot;id&quot;</span>)<br>                .equal(<span class="hljs-keyword">new</span> ObjectId(id))<br>                .first();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key&lt;User&gt; <span class="hljs-title">save</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> playMorphia<br>                .datastore()<br>                .save(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MongoController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controllers;<br><br><span class="hljs-keyword">import</span> models.User;<br><span class="hljs-keyword">import</span> play.libs.Json;<br><span class="hljs-keyword">import</span> play.mvc.Controller;<br><span class="hljs-keyword">import</span> play.mvc.Result;<br><span class="hljs-keyword">import</span> repositories.UserRepository;<br><br><span class="hljs-keyword">import</span> javax.inject.Inject;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试 MongoDB 操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserRepository userRepository;<br><br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MongoController</span><span class="hljs-params">(UserRepository userRepository)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userRepository = userRepository;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getUser</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ok(Json.toJson(userRepository.findById(id)));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">saveUser</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setFirstname(<span class="hljs-string">&quot;Xiang&quot;</span>);<br>        user.setLastname(<span class="hljs-string">&quot;Lin&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;mail@mail.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> ok(Json.toJson(userRepository.save(user)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>routes</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">GET</span>         <span class="hljs-string">/mongo/user/get            controllers.MongoController.getUser(id: String)</span><br><span class="hljs-attr">POST</span>        <span class="hljs-string">/mongo/user/save           controllers.MongoController.saveUser()</span><br></code></pre></td></tr></table></figure><p>最后使用 postman 测试接口，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/215246.png" alt="image-20220515215246529"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202205/215331.png" alt="image-20220515215331674"></p><h4 id="使用新版-Morphia"><a href="#使用新版-Morphia" class="headerlink" title="使用新版 Morphia"></a>使用新版 Morphia</h4><p>Morphia 2.0 以上版本需要 Java11，已经更高版本的 mongo-drive，请使用 <a href="https://github.com/xianglin2020/play-morphia">play-morphia</a> 中修改的 <a href="https://github.com/xianglin2020/play-morphia/blob/master/out/artifacts/play_morphia_jar/play-morphia.jar">play-morphia.jar</a>。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>play2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Docker 安装GitLab、Jenkins 配置自动化构建</title>
    <link href="/2022/04/16/%E4%BD%BF%E7%94%A8-Docker-%E5%AE%89%E8%A3%85GitLab%E3%80%81Jenkins%20%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    <url>/2022/04/16/%E4%BD%BF%E7%94%A8-Docker-%E5%AE%89%E8%A3%85GitLab%E3%80%81Jenkins%20%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Docker-配置自动化构建"><a href="#使用-Docker-配置自动化构建" class="headerlink" title="使用 Docker 配置自动化构建"></a>使用 Docker 配置自动化构建</h1><h2 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h2><p>官方文档中文：<a href="https://docs.gitlab.cn/jh/install/docker.html">https://docs.gitlab.cn/jh/install/docker.html</a></p><p>官方文档英文：<a href="https://docs.gitlab.com/ee/install/docker.html">https://docs.gitlab.com/ee/install/docker.html</a></p><p>GitLab 镜像地址：<a href="https://hub.docker.com/r/gitlab/gitlab-ce">https://hub.docker.com/r/gitlab/gitlab-ce</a></p><h3 id="创建目录存储持久数据"><a href="#创建目录存储持久数据" class="headerlink" title="创建目录存储持久数据"></a>创建目录存储持久数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p ~/.docker/data/gitlab<br></code></pre></td></tr></table></figure><h3 id="安装运行镜像"><a href="#安装运行镜像" class="headerlink" title="安装运行镜像"></a>安装运行镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --detach \<br>  --publish 443:443 --publish 80:80 --publish 22:22 \<br>  --name gitlab \<br>  --restart always \<br>  --volume ~/.docker/data/gitlab/config:/etc/gitlab \<br>  --volume ~/.docker/data/gitlab/logs:/var/<span class="hljs-built_in">log</span>/gitlab \<br>  --volume ~/.docker/data/gitlab/data:/var/opt/gitlab \<br>  --shm-size 256m \<br>  gitlab/gitlab-ee:latest<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/163723.png" alt="image-20220416173723138"></p><p>安装需要一段时间，可以使用如下命令查看安装日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f gitlab<br></code></pre></td></tr></table></figure><p>当出现如下内容时安装完成，从 <code>/etc/gitlab/initial_root_password</code> 查找 <code>root</code> 账户的密码。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/164703.png" alt="image-20220416174703755"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it gitlab grep <span class="hljs-string">&#x27;Password:&#x27;</span> /etc/gitlab/initial_root_password<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/164833.png" alt="image-20220416174833209"></p><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><h3 id="创建目录存储持久数据-1"><a href="#创建目录存储持久数据-1" class="headerlink" title="创建目录存储持久数据"></a>创建目录存储持久数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p ~/.docker/data/jenkins<br></code></pre></td></tr></table></figure><h3 id="安装运行镜像-1"><a href="#安装运行镜像-1" class="headerlink" title="安装运行镜像"></a>安装运行镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 8080:8080 -p 50000:50000 \<br>  -v ~/.docker/data/jenkins:/var/jenkins_home \<br>  --restart always \<br>  jenkins/jenkins:lts-jdk11<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/161421.png" alt="image-20220416181421427"></p><p>安装完成后，访问 <code>http://localhost:8080</code> 访问 Jenkins 首页。</p><h3 id="初始化-Jenkins"><a href="#初始化-Jenkins" class="headerlink" title="初始化 Jenkins"></a>初始化 Jenkins</h3><p>解锁 Jenkins，使用如下命令从日志中查找密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs containerId<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/162210.png" alt="image-20220416182210768"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/162013.png" alt="image-20220416182012943"></p><p>安装推荐插件</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/162735.png" alt="image-20220416182735636"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202204/162809.png" alt="image-20220416182809271"></p><p>创建用户</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/140448.png" alt="image-20220502140448072"></p><p>完成安装</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/140544.png" alt="image-20220502140544617"></p><h2 id="准备项目"><a href="#准备项目" class="headerlink" title="准备项目"></a>准备项目</h2><p>准备两个项目用于配置自动构建：一个 SpringBoot 项目，直接使用内置 tomcat 容器启动；另一个 Vue 项目，使用 nginx 提供服务。</p><h3 id="创建-SpringBoot-项目"><a href="#创建-SpringBoot-项目" class="headerlink" title="创建 SpringBoot 项目"></a>创建 SpringBoot 项目</h3><p>使用 IDEA 的 <code>Spring Initializr</code> 创建 Spring Boot 项目： </p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/141400.png" alt="image-20220502141400561"></p><p>根据项目需要选择所需的依赖项：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/141603.png" alt="image-20220502141603535"></p><p>添加一个用于测试的请求 <code>hello</code>，打印当前日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> store.xianglin.cicd.background.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@CrossOrigin(originPatterns = &quot;*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span> </span>&#123;<br>        String now = LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello &quot;</span> + name + <span class="hljs-string">&quot;， now is &quot;</span> + now;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在浏览器中测试结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/142817.png" alt="image-20220502142817685"></p><h3 id="创建-Vue-项目"><a href="#创建-Vue-项目" class="headerlink" title="创建 Vue 项目"></a>创建 Vue 项目</h3><p>使用 IDEA 创建 Vue 项目可能需要先安装 Vue.js 插件：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143042.png" alt="image-20220502143042588"></p><p>使用 IDEA 创建 Vue 项目：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143208.png" alt="image-20220502143208246"></p><p>在 Vue 中使用 axios 向 SpringBoot 发送请求并展示。首先添加 axios 的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios <br></code></pre></td></tr></table></figure><p>然后修改 <code>src/components/HelloWorld.vue</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class&#x3D;&quot;hello&quot;&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br><br>export default &#123;<br>  name: &#39;HelloWorld&#39;,<br>  data() &#123;<br>    return &#123;<br>      msg: &#39;Vue&#39;<br>    &#125;<br>  &#125;,<br>  mounted() &#123;<br>    setInterval(() &#x3D;&gt; &#123;<br>      const axios &#x3D; require(&#39;axios&#39;);<br>      const a &#x3D; this<br>      axios.get(&#39;http:&#x2F;&#x2F;localhost:9509&#x2F;hello?name&#x3D;Vue&#39;)<br>          .then(function (response) &#123;<br>            a.msg &#x3D; response.data<br>          &#125;).catch(function (error) &#123;<br>        console.log(error);<br>      &#125;)<br>    &#125;, 1000)<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>从 IDEA 中启动项目，在浏览器中测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/153716.png" alt="image-20220502153716482"></p><h3 id="将项目提交到-GitLab-上"><a href="#将项目提交到-GitLab-上" class="headerlink" title="将项目提交到 GitLab 上"></a>将项目提交到 GitLab 上</h3><p>首先需要在 GitLab 上创建项目对应的仓库，选择 “create a project” —— “创建空白项目”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143747.png" alt="image-20220502143747293"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/143853.png" alt="image-20220502143853500"></p><p>填写项目基本信息后，点击“新建项目”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/144003.png" alt="image-20220502144002812"></p><p>使用如下命令将本地仓库推送到 GitLab 上（以 Spring Boot 项目为例）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置帐号信息</span><br>git config --global user.email <span class="hljs-string">&quot;you@example.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br><br><span class="hljs-comment"># 提交修改</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;init&#x27;</span><br><br><span class="hljs-comment"># 推送远程仓库</span><br>git remote add origin http://localhost/xianglin/background.git<br>git push -u origin --all<br></code></pre></td></tr></table></figure><p>刷新 GitLab 仓库，即可看到提交信息：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/154508.png" alt="image-20220502154508544"></p><p>在 IDEA 中也可以通过以下步骤提交并推送（以 Vue 项目为例）：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/154744.png" alt="image-20220502154744439"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/154929.png" alt="image-20220502154929053"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/155034.png" alt="2022-05-02 15-46-38屏幕截图"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/155108.png" alt="image-20220502155107812"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/155223.png" alt="image-20220502155223686"></p><h2 id="配置-Jenkins-自动构建及部署"><a href="#配置-Jenkins-自动构建及部署" class="headerlink" title="配置 Jenkins 自动构建及部署"></a>配置 Jenkins 自动构建及部署</h2><h3 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h3><p>依次点击 “系统管理” —— “插件管理”、 “全局工具配置”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/161715.png" alt="image-20220502161714979"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/161805.png" alt="image-20220502161805008"></p><p>在插件管理中，选择“可选插件”，选择对应插件勾选后点击 “Install without restart” 安装插件：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/171059.png" alt="image-20220502171059565"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/170238.png" alt="image-20220502170238457"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/170535.png" alt="image-20220502170535199"></p><p>安装 NodeJS：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/173944.png" alt="image-20220502173944063"></p><p>安装 JDK，这里选择使用 Jenkins 已有的 JDK 11：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/162802.png" alt="image-20220502162802181"></p><p>安装 Maven：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/162433.png" alt="image-20220502162433577"></p><p>修改 Maven 配置，使用阿里云的 Maven 镜像（根据创建 jenkins 使用的 <code>-v ~/.docker/data/jenkins:/var/jenkins_home</code> 可以将 <code>settings.xml</code> 文件复制到对应目录）：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/163229.png" alt="image-20220502163229489"></p><h3 id="配置-Spring-Boot-自动构建"><a href="#配置-Spring-Boot-自动构建" class="headerlink" title="配置 Spring Boot 自动构建"></a>配置 Spring Boot 自动构建</h3><p>选择“新建任务”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/163615.png" alt="image-20220502163615902"></p><p>输入任务名称，选择”构建一个自由风格的软件项目“，点击“确定”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/163742.png" alt="image-20220502163742410"></p><p>在“源码管理”中选择“Git”，输入GitLab仓库地址，并添加访问的用户名和密码，其中 IP 地址可以通过命令 <code>docker inspect --format &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; &lt;container-ID&gt;</code> 获取：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/165129.png" alt="image-20220502165129270"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/164009.png" alt="image-20220502164009167"></p><p>在“构建”中选择“调用顶层 Maven 目标”，在“构建后操作”中选择“归档成品”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/173134.png" alt="image-20220502173134591"></p><p>保存后点击“立即构建”，查看构建结果：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/173240.png" alt="image-20220502173240736"></p><h3 id="配置-Vue-自动构建"><a href="#配置-Vue-自动构建" class="headerlink" title="配置 Vue 自动构建"></a>配置 Vue 自动构建</h3><p>“源码管理”和上述一样，在“构建触发器”中选择“Provide Node &amp; npm bin/folder to PATH”：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/183321.png" alt="image-20220502183321578"></p><p>在“构建”中选择“执行shell”，在“构建后操作”中选择“归档成品”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install<br>cnpm  run build<br><span class="hljs-meta">#</span><span class="bash"> 打包，方便下载和上传到服务器部署</span><br>tar -cf dist.tar dist<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/183524.png" alt="image-20220502183524271"></p><p>保存后点击“立即构建”，查看构建结果：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/183634.png" alt="image-20220502183634074"></p><h3 id="自动部署到服务器"><a href="#自动部署到服务器" class="headerlink" title="自动部署到服务器"></a>自动部署到服务器</h3><p>自动构建完成后，可以手动将构建结果下载到本地执行，也可以通过 Jenkins 自动部署到指定服务器上，借助“Publish over SSH”插件完成。安装插件后在“系统管理”——“系统配置”中配置“Publish over SSH”，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/211327.png" alt="image-20220502211327631"></p><p>配置完成后可以通过“Test Configuration”验证配置是否正确可用：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/211420.png" alt="image-20220502211420139"></p><h4 id="部署-Spring-Boot-应用"><a href="#部署-Spring-Boot-应用" class="headerlink" title="部署 Spring Boot 应用"></a>部署 Spring Boot 应用</h4><p>直接通过 <code>jar</code> 命令启动 Spring Boot 应用，计划将 jar 文件放在 <code>/root/deploy/background</code>，编写启动脚本 <code>deploy.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># deploy spring boot app</span><br><br><span class="hljs-comment"># stop server</span><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/var/run/springboot.pid&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">kill</span> -15 $(cat /var/run/springboot.pid)<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># start server</span><br>nohup /root/jdk-11.0.15+10/bin/java -jar /root/deploy/background/backgroud-0.0.1-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>在”构建后操作“——”Send build artifacts over SSH“中配置如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/220639.png" alt="image-20220502220639362"></p><p>最总效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202205/220802.png" alt="image-20220502220802535"></p><h4 id="部署-Vue-应用"><a href="#部署-Vue-应用" class="headerlink" title="部署 Vue 应用"></a>部署 Vue 应用</h4><p>Vue 上传到服务器到配置与上述相同，静态文件使用 Nginx 作为服务器，将 Jenkins 构建到 dist.tar 解压到对应目录即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># deploy vue app</span><br><br><span class="hljs-comment"># extract file</span><br>tar -xf /root/deploy/frontend/dist.tar -C /usr/share/nginx/html<br></code></pre></td></tr></table></figure><p>修改 Nginx 到配置 <code>/etc/nginx/conf.d/default.conf</code> ，如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;<br>    <span class="hljs-attribute">root</span>   /usr/share/nginx/html/dist;<br>    <span class="hljs-attribute">index</span>  index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动 Nginx 即可。</p><h3 id="GitLab-webhook"><a href="#GitLab-webhook" class="headerlink" title="GitLab webhook"></a>GitLab webhook</h3><ul><li><input disabled="" type="checkbox"> 待完成</li></ul>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-03~04 面试记录</title>
    <link href="/2022/03/01/some-interview-question/"/>
    <url>/2022/03/01/some-interview-question/</url>
    
    <content type="html"><![CDATA[<h1 id="易诚互动"><a href="#易诚互动" class="headerlink" title="易诚互动"></a>易诚互动</h1><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul><li>目前项目某个功能的数据流向、代码如何做到可扩展；</li><li>MyBatis 的工作原理；</li><li>如何实现文件上传、下载显示实时进度。</li></ul><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>线程池的使用和基础参数；</li><li>什么是线程上下文。</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>Redis 的特点、为什么快；</li><li>Redis 的使用场景；</li><li>Redis 的缓存雪崩和应对方法；</li><li>Redis 的持久化方式。</li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>如何优化 SQL 语句；</li><li>索引失效的情况；</li><li>如何降低 MySQL 的压力。</li></ul><h3 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h3><ul><li>如何处理消息的重复发送和消息丢失。</li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li>JVM 调优经验；</li><li>对象如何进入老年代。</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ul><li>项目中用了何种分布式框架、什么场景；</li><li>对 Dubbo 的掌握和理解。</li></ul><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>13K * 13</p><h1 id="易方达基金"><a href="#易方达基金" class="headerlink" title="易方达基金"></a>易方达基金</h1><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><p>涉及计算机网络、数据结构、Java 基础、项目管理等。</p><h3 id="简述题"><a href="#简述题" class="headerlink" title="简述题"></a>简述题</h3><ul><li>在浏览器中键入域名到显示页面的过程；</li><li>简述 ClassLoader 的作用和工作原理；</li><li>Java 线程中有哪些同步和交互的机制；</li><li>忘了。</li></ul><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>（在线编辑器，允许切屏使用本地 IDE）</p><ul><li>给定一个未经排序的整数数组，请使用 Java 语言编码实现找到最长且连续的的递增序列的长度。输入: [1,3,5,4,7] 输出: 3；输入: [2,2,2,2,2],输出: 1；</li><li>字符串压缩，形如 aaaa -&gt; a4, AAbbbdf -&gt; A2b3df；</li></ul><h3 id="系统设计题"><a href="#系统设计题" class="headerlink" title="系统设计题"></a>系统设计题</h3><ul><li>如何设计实现一个支持弹性伸缩和 7*24H 服务的系统。</li></ul><h3 id="编码题"><a href="#编码题" class="headerlink" title="编码题"></a>编码题</h3><p>（纯文本编辑器，没有语法提示）</p><ul><li>使用 ForkJoin 框架实现计算 1~10000 的和。</li></ul><h2 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h2><h3 id="项目相关-1"><a href="#项目相关-1" class="headerlink" title="项目相关"></a>项目相关</h3><ul><li>介绍下目前正在做的项目；</li><li>平时项目开发的具体流程；</li><li>怎么排查生产问题；</li><li>为新项目搭建环境，如何做技术选型？你会选择 Redis 还是 MongoDB？</li></ul><h3 id="Java-相关"><a href="#Java-相关" class="headerlink" title="Java 相关"></a>Java 相关</h3><ul><li>Java 中抽象类和接口的比较；</li><li>Java 字符串和字符数组、字节数组的转换 <code>toCharArray</code>、<code>getBytes</code>。</li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li>有哪些字符集；</li><li>ISO-8859-1 的了解。</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li>有哪些常用的设计模式，在哪里使用或看见过；</li><li>介绍观察者模式。</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>对 MySQL 的数据同步的了解（binlog、canal）。</li></ul><h3 id="MQ-1"><a href="#MQ-1" class="headerlink" title="MQ"></a>MQ</h3><ul><li>消息队列中消费者是否需要对消息进行确认；</li><li>对未确认的消息，队列怎么处理？消费者还能继续查看消费到它吗？</li><li>未对消息确认前业务节点异常宕机，该消息怎么处理？</li></ul><h3 id="Spring、MyBatis"><a href="#Spring、MyBatis" class="headerlink" title="Spring、MyBatis"></a>Spring、MyBatis</h3><ul><li>谈谈自己对 Spring 的了解和理解；</li><li>Spring 中怎么对 MyBatis 做事务管理；</li><li>Spring 中定义的事务传播行为，默认传播行为是什么？</li></ul><h3 id="JVM-1"><a href="#JVM-1" class="headerlink" title="JVM"></a>JVM</h3><ul><li>栈内存会溢出吗？</li><li>怎么排查 OOM 问题。</li></ul><h3 id="分布式相关"><a href="#分布式相关" class="headerlink" title="分布式相关"></a>分布式相关</h3><ul><li>有哪些 RPC 协议（RPC是上层协议，底层可以基于 TCP 协议，也可以基于 HTTP 协议）</li><li>多个系统如何查看日志（分布式监控）；</li><li>阿里云的鹰眼如何实现的？日志中 <code>[-JYLSH-null-]</code> 是如何实现的？</li><li>你如何实现鹰眼的链路追踪功能？</li><li>如何处理分布式事务。</li></ul><h2 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h2><h3 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h3><ul><li>目前项目情况；</li><li>项目中遇到的困难的问题，如何排查解决的；</li><li>最近在学习什么东西；</li><li>你觉得自己的技术水平怎么样？</li><li>你期望的工资是多少？</li></ul><p>当时说我不到三年的工作经验，价格可能要高了，所以安排我多做了一轮笔试题和面试题。</p><h2 id="笔试题（加餐）"><a href="#笔试题（加餐）" class="headerlink" title="笔试题（加餐）"></a>笔试题（加餐）</h2><h3 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h3><p>涉及计算机网络、数据结构、操作系统、Java 基础、项目管理等。</p><h3 id="简述题-1"><a href="#简述题-1" class="headerlink" title="简述题"></a>简述题</h3><ul><li>Java 的并发包（JUC）中，除了提供高性能的线程安全集合类，还提供了很多并发场景需要的原子类，请列举你熟悉的并发包类和使用场景；</li><li>Java 线程中有哪些同步和交互的机制；</li><li>在分布式架构下，如何在不影响客户请求的情况下做到弹性扩展和 7*24 小时服务可用，同时如何识别同一个客户在不同服务器的请求，请简述你的方案；</li><li>列出 Java 发生内存溢出的几种不同场景和发生原因。</li></ul><h3 id="编码题-1"><a href="#编码题-1" class="headerlink" title="编码题"></a>编码题</h3><p>（纯文本编辑器，没有语法提示）</p><ul><li>在一个大小为 N 的整形数组中，寻找第 K 大的数。要求不能对数组全部排序；</li><li>字符串压缩，形如 aaaa -&gt; a4, AAbbbdf -&gt; A2b3df；</li><li>问题描述：编写一个程序，模拟一个100米短跑的场景。每个运动员的跑步过程就是一个线程。<br>要求如下：<br>1） 发令枪鸣枪后选手们开始赛跑；<br>2） 在所有运动员达到终点后系统开始统计选手们的成绩并把成绩发送到成绩统计系统；<br>3） 对所有运动员的成绩进行排序输出。</li></ul><h2 id="面试（加餐）"><a href="#面试（加餐）" class="headerlink" title="面试（加餐）"></a>面试（加餐）</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul><li>JVM 内存划分及内存溢出情况；</li><li>不断创建线程会发生什么；</li><li>如何避免 SQL 注入；</li><li>如何获取用户的物理地址；</li><li>restful 接口。</li></ul><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul><li>目前团队的组成和分工；</li><li>举一个最近做的功能，如何对其分解设计和编码实现；</li><li>举一个排查问题的经历；</li><li>谈谈自己的编码规范，列举几个；</li><li>怎么做对外接口设计的，有哪些重要的点。</li></ul><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p>17 * 14</p><h1 id="ByteGreen"><a href="#ByteGreen" class="headerlink" title="ByteGreen"></a>ByteGreen</h1><h2 id="性格测试"><a href="#性格测试" class="headerlink" title="性格测试"></a>性格测试</h2><p>好像都可以随便选，也没看到后续有看这个，直接就叫去面试了。</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h3 id="项目相关-2"><a href="#项目相关-2" class="headerlink" title="项目相关"></a>项目相关</h3><ul><li>xxl-job 在项目中是如何工作的；</li><li>目前有在学习哪方面的内容。</li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>方法重载和方法重写的区别；</li><li>Java 方法是如何调用的，如何正确选择多个重载的方法进行调用；</li><li><code>protected</code> 关键字的作用；</li><li>Java 优先级队列：<code>proviteQueue</code>；</li><li>静态代码块、静态变量和构造函数的执行顺序是什么，为什么是这个执行顺序。</li></ul><h3 id="JVM-2"><a href="#JVM-2" class="headerlink" title="JVM"></a>JVM</h3><ul><li><p>判断垃圾对象的方法；</p></li><li><p>常见垃圾收集器的算法和实现。</p></li></ul><h3 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h3><ul><li>Redis 的缓存穿透和解决方法；</li><li>Redis 的缓存雪崩和解决方法。</li></ul><h3 id="MQ-2"><a href="#MQ-2" class="headerlink" title="MQ"></a>MQ</h3><ul><li>如何做到消息不丢失？如何判断消息已成功发送。</li></ul><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>谈谈对 Spring 中 IOC 和 APO 的理解，其对应实现原理；</li></ul><h3 id="计算机基础、网络基础"><a href="#计算机基础、网络基础" class="headerlink" title="计算机基础、网络基础"></a>计算机基础、网络基础</h3><ul><li>有没有接触过物联网操作系统；</li><li>浏览器输入地址到页面展现内容的过程，请结合计算机硬件和软件相关知识进行描述；</li><li>网际层 IP 协议如何保证收到的包是完整的。</li></ul><h2 id="复试"><a href="#复试" class="headerlink" title="复试"></a>复试</h2><p>我说太远了，能不能调整到周末去参加复试。HR 协商后说周末没有时间，就不用参加复试了。</p><h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><p>19 * 13</p><h1 id="太平洋网络科技"><a href="#太平洋网络科技" class="headerlink" title="太平洋网络科技"></a>太平洋网络科技</h1><h2 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h2><p>太难了，面试官一半的时间都在说：“这个不会没关系，我们换一个”，大致涉及如下部分：</p><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li>红黑树、二叉树；</li><li>二叉树怎么用于查找；</li><li>有向图的最短路径和算法。</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li>Redis 和 MemCache 的区别；</li><li>MemCache 如何实现集群。</li></ul><h3 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h3><ul><li>MongoDB 的了解；</li><li>MySQL 如何分库分表，数据迁移是怎么做的。</li></ul><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><ul><li>SpringCloud 怎么做负载均衡的，有哪些策略。</li></ul><h3 id="MQ-3"><a href="#MQ-3" class="headerlink" title="MQ"></a>MQ</h3><ul><li>消息如何做到分布式一致性；</li><li>如何确认消息发送成功。</li></ul><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><ul><li>有没有用过 Elasticsearch。</li></ul><h2 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h2><p>没有结果就是最好的结果。</p><h1 id="广州邮政"><a href="#广州邮政" class="headerlink" title="广州邮政"></a>广州邮政</h1><p>比较简单，就感觉像是招应届毕业生一样。</p><h2 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h2><h3 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h3><ul><li>创建 String 对象的几种方式；</li><li>ArrayList 和 LinkedList 的特点和使用场景；</li><li>List 和 Set 的区别；</li><li>Map 的实现类和使用场景。</li></ul><h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>如何做分库分表，如何迁移数据；</li><li>如何做 SQL 优化。</li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>线上排查问题时常用哪些指令；</li><li>随便说说你知道的 Linux 指令。</li></ul><h2 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h2><p>14K * 13</p><h1 id="华为外包"><a href="#华为外包" class="headerlink" title="华为外包"></a>华为外包</h1><h2 id="算法题-1"><a href="#算法题-1" class="headerlink" title="算法题"></a>算法题</h2><ul><li><p>字符串 aaabbccccd 压缩后为 3abb4cd，请编写解压函数，根据输入的字符串（只包含大小写字母和数字），判断是否为合法压缩的字符串，若合法则输出解压缩后的字符串，否则输出 !error。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">4d</span>ff -&gt; ddddf<br><br><span class="hljs-number">2d</span>ff -&gt; !error<br><br><span class="hljs-number">4d</span><span class="hljs-meta">@A</span> -&gt;!error<br></code></pre></td></tr></table></figure></li><li><p>给定 N 个正整数，为每个正整数图上一种颜色。要求同种颜色的所有数都可以被这种蓝色中最小的那个数整数。算出最少需要多少种颜色才能给这 N 个数进行上色。</p><p>输入描述：</p><p>第一行输入一个正胜数</p><p>第二行有 N 个 int 型数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span><br><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><br><span class="hljs-number">1</span><br><br><br><br><span class="hljs-number">4</span><br><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span><br><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>牌面由颜色和数字组成，颜色为红、黄、蓝、绿中的一种，数字为0-9中的一个。开始时从手牌中选取一张卡牌打出，接下来如果玩家中有他上一次打出手牌的颜色或着数字相同的手牌，则可以继续打出，直至手牌打光或者没有符合条件的手牌，请找出最大可连续出牌的次数。</p><pre><code class="java">1 4 3 4 5r y b b r3 （4y 4b 3b）1 2 3 4r y b l1</code></pre></li></ul><h2 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h2><p>确定去 ByteGreen 所以没有去参加面试。</p>]]></content>
    
    
    <categories>
      
      <category>interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>面试</tag>
      
      <tag>Java</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 中类型转换的几种方式</title>
    <link href="/2022/02/11/MySQL%20%E4%B8%AD%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/02/11/MySQL%20%E4%B8%AD%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-中类型转换的几种方式"><a href="#MySQL-中类型转换的几种方式" class="headerlink" title="MySQL 中类型转换的几种方式"></a>MySQL 中类型转换的几种方式</h1><h3 id="表达式中的隐式转换"><a href="#表达式中的隐式转换" class="headerlink" title="表达式中的隐式转换"></a>表达式中的隐式转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 在数学运算中隐式转换<br>select &#39;1&#39;, &#39;1&#39; + 0; # double<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202202/124318.png" alt="image-20220212104318664" style="zoom:50%;" /><h3 id="使用-CAST-函数"><a href="#使用-CAST-函数" class="headerlink" title="使用 CAST() 函数"></a>使用 <code>CAST()</code> 函数</h3><p><code>CAST</code>函数签名为：<code>CAST(ANY:any AS datatype:cast_datatype):TypeOf(2)</code>，作用是将任何类型的值转换为具有指定类型的值。目标类型可以是：<code>BINARY</code>、<code>CHAR</code>、<code>DATE</code>、<code>DATETIME</code>、<code>TIME</code>、<code>DECIMAL</code>、<code>SIGNED</code>、<code>UNSIGNED</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 使用 CAST 函数<br>select cast(&#39;5&#39; AS BINARY); # varbinary<br>select cast(&#39;5&#39; AS CHAR); # varchar(1)<br>select cast(&#39;2022-02-12&#39; AS DATE), cast(20220212 AS DATE); # 2022-02-12 date(yyyy-MM-dd)<br>select cast(&#39;2022-02-12&#39; AS DATETIME); # 2022-02-12 00:00:00 datetime(yyyy-MM-dd HH:mm:ss)<br>select cast(&#39;111500&#39; AS TIME), cast(&#39;11:15:00&#39; AS TIME); # 11:15:00 time(HH:mm:ss)<br>select cast(&#39;5.45&#39; AS DECIMAL), cast(&#39;5.45&#39; AS DECIMAL(10, 3)); # decimal(10, 0)<br>select cast(&#39;5&#39; AS SIGNED), cast(&#39;5&#39; AS UNSIGNED); # bigint<br></code></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li><code>DECIMAL(M, D)</code> 默认 <code>M</code> 为 10、<code>D</code> 为 0；</li><li><code>DATE</code>、<code>DATETIME</code>、<code>TIME</code> 类型的表达式不符合格式要求时返回 <code>NULL</code>。</li></ul><h3 id="使用-CONVERT-函数"><a href="#使用-CONVERT-函数" class="headerlink" title="使用 CONVERT() 函数"></a>使用 <code>CONVERT()</code> 函数</h3><p><code>CONVERT</code> 函数签名有两种：</p><ul><li><code>CONVERT(str:varchar, datatype:cast_datatype):TypeOf(2)</code>，作用是将字符串转换为具有指定类型的值，此时和 <code>CAST()</code> 函数的目标类型和使用方式基本一致；</li><li><code>CONVERT(str:varchar USING ref:reference/CHARSET):varchar</code>，用于字符串在不同的字符集间转换。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 使用 CONVERT 函数<br>select convert(20220212, DATE);<br>select convert(_latin1&#39;Müller&#39; USING utf8);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cron表达式学习</title>
    <link href="/2021/12/29/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/12/29/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Cron-表达式学习"><a href="#Cron-表达式学习" class="headerlink" title="Cron 表达式学习"></a>Cron 表达式学习</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>Cron 表达式是一种使用简单字符串来表示时间规则的方式，其基本结构如下：</p><p><strong><code>Seconds Minutes Hours DayofMonth Month DayofWeak [Year]</code></strong></p><p>其中 <code>Year</code> 是可选的，不写代表包含所有年份。</p><p>举个例子，每月1 号 0 点：<code>0 0 0 1 * ?</code>。</p><h2 id="各个域的范围"><a href="#各个域的范围" class="headerlink" title="各个域的范围"></a>各个域的范围</h2><p><code>Seconds、Minutes</code>：0 ~ 59</p><p><code>Hours</code>：0 ~ 23</p><p><code>DayofMonth</code>：1 ~ L</p><p><code>Month</code>：1 ~ 12 或者 <code>JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC</code></p><p><code>DayofWeak</code>：1 ~ 7 或者 <code>SUN MON TUE WED THU FRI SAT</code></p><p><code>Year</code>：1970 ~ 2099</p><h2 id="部分特殊字符"><a href="#部分特殊字符" class="headerlink" title="部分特殊字符"></a>部分特殊字符</h2><p><code>*</code>：表示匹配任意值，如 <code>Month</code> 使用<code>*</code>表示每个月都会触发；</p><p><code>?</code>：只能用在 <code>DayofMonth</code> 和 <code>DayofWeak</code> 两个域，因为这两个域相互影响，比如每月 1 号，是这个周的第几天是不确定的，只能用 <code>?</code>；</p><p><code>-</code>：表示范围，比如在 <code>Minutes</code> 中使用 <code>10-20</code>，表示从 10 分钟到 20 分钟每分钟触发一次；</p><p><code>/</code>：表示从起始时间开始，每隔固定间隔时间触发一次，比如在 <code>Minutes</code> 中使用 <code>5/20</code> 表示5、25、45分别触发一次；</p><p><code>,</code>：表示列出枚举值，比如在 <code>Minutes</code> 中使用 <code>5,20</code>，表示在第 5 分钟、第 20 分钟分别触发一次；</p><p><code>L、W、#</code>：<code>L</code> 表示最后，使用在<code>DayofMonth</code> 和 <code>DayofWeak</code> 两个域，如果在 <code>DayofWeak</code> 中使用 <code>5L</code> 表示最后一个周四触发；<code>xW</code> 表示最接近 <code>x</code> 的工作日，只能用在 <code>DayofMonth</code> 中，<code>LW</code> 表示每个月最后一个工作日；<code>#</code> 表示每个月第几个星期几，比如 <code>2#1</code> 表示第二个星期日。</p><h2 id="部分示例"><a href="#部分示例" class="headerlink" title="部分示例"></a>部分示例</h2><p>每天凌晨一点触发一次：<code>0 0 1 * * ? *</code></p><p>每 30 分钟触发一次：<code>0 0/30 * * * ?</code></p><p>每天凌晨 2 ~ 6 点每 20 分钟触发一次：<code>0 0/20 2-6 * * ?</code></p><p>工作日 8 点触发一次：<code>0 0 8 ? * MON-FRI</code></p><p>每月最后一天 23 点执行一次：<code>0 0 23 L * ?</code></p><p><a href="https://qqe2.com/cron">在线 CRON 表达式工具</a></p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VirtualBox_install_Win11</title>
    <link href="/2021/11/17/VirtualBox-install-Win11/"/>
    <url>/2021/11/17/VirtualBox-install-Win11/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-VirtualBox-安装-Windows11"><a href="#使用-VirtualBox-安装-Windows11" class="headerlink" title="使用 VirtualBox 安装 Windows11"></a>使用 VirtualBox 安装 Windows11</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol><li>Window11 下载链接：<a href="https://next.itellyou.cn/Original/Index#cbp=Product?ID=42e87ac8-9cd6-eb11-bdf8-e0d4e850c9c6">itellyou</a></li><li>VirtualBox 下载链接：<a href="https://www.virtualbox.org/wiki/Downloads">virtualbox</a></li><li><a href="https://blogs.oracle.com/virtualization/post/install-microsoft-windows-11-on-virtualbox">How to install Microsoft Windows 11 on VirtualBox!</a></li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="推荐设置"><a href="#推荐设置" class="headerlink" title="推荐设置"></a>推荐设置</h3><ul><li><p>系统</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202111/290931.png" alt="image-20211129093107126"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202111/290947.png" alt="image-20211129093128343"></p></li><li><p>显示</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202111/290930.png" alt="image-20211129093022869"></p></li><li><p>存储</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202111/290932.png" alt="image-20211129093201147"></p></li></ul><h3 id="安装设置"><a href="#安装设置" class="headerlink" title="安装设置"></a>安装设置</h3><ol><li><p>在安装界面，使用<code>Shift+F10</code>调出控制台，在控制台中输入<code>regedit</code>调出注册表编辑器；</p></li><li><p>在左侧依次找到如下路径：<code>HKEY_LOCAL_MACHINE\SYSTEM\Setup</code>；</p></li><li><p>在<code>Setup</code>中新增配置项<code>LabConfig</code>，新建三个**<code>DWORD（32-位）值</code>**，值都设置为 <code>1</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202111/290942.png" alt="image-20211129094157895"></p><ol><li><strong><code>BypassTPMCheck</code></strong></li><li><strong><code>BypassRAMCheck</code></strong></li><li><strong><code>BypassSecureBootCheck</code></strong></li></ol><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202111/290942.jpeg" alt="Windows 11 - bypass checks"></p></li><li><p>完成后关闭注册表和控制台，即可正常安装。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>virtual box</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS 集成、认证流程和模拟登录</title>
    <link href="/2021/07/03/CAS-%E9%9B%86%E6%88%90%E3%80%81%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%92%8C%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
    <url>/2021/07/03/CAS-%E9%9B%86%E6%88%90%E3%80%81%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%92%8C%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="CAS-集成、认证流程和模拟登录"><a href="#CAS-集成、认证流程和模拟登录" class="headerlink" title="CAS 集成、认证流程和模拟登录"></a>CAS 集成、认证流程和模拟登录</h1><p><a href="https://github.com/xianglin2020/cas-demo">cas-demo</a></p><h2 id="CAS-集成"><a href="#CAS-集成" class="headerlink" title="CAS 集成"></a>CAS 集成</h2><h3 id="CAS-Server-简单配置启动"><a href="#CAS-Server-简单配置启动" class="headerlink" title="CAS Server 简单配置启动"></a>CAS Server 简单配置启动</h3><p><a href="https://github.com/apereo/cas-overlay-template">cas-overlay-template 项目地址</a></p><p><a href="https://apereo.github.io/cas/5.3.x/">CAS 文档地址</a></p><p>CAS 服务器启动步骤：</p><ol><li><p>从 cas-overlay-template 项目中获取 5.3 分支的文件，如图；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone -b 5.3 git@github.com:apereo/cas-overlay-template.git<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/200609.png" alt="克隆源码"></p></li><li><p>CAS 默认使用 https，需要先生成证书；</p><ol><li><p>可以使用项目中已提供的脚本生成，默认存储在 <code>/etc/cas/thekeystore</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./build.sh gencert<br></code></pre></td></tr></table></figure></li><li><p>也可以手动生成，如图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 生成证书</span><br>keytool -genkey -alias cas -keyalg RSA -keystore thekeystore -storepass changeit -deststoretype pkcs12<br><span class="hljs-meta">#</span><span class="bash"> 导出证书</span><br>keytool -export -file cas.crt -alias cas -keystore thekeystore -storepass changeit<br><span class="hljs-meta">#</span><span class="bash"> 导入证书到JVM的证书库</span><br>keytool -import -keystore &quot;/usr/local/opt/openjdk@8/libexec/openjdk.jdk/Contents/Home/jre/lib/security/cacerts&quot; -file /Users/linxiang/Documents/cas/cas.crt -alias cas -storepass changeit<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/200846.png" alt="生成证书"></p></li></ol></li><li><p>将 <code>etc</code> 文件夹及内容复制到根目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r etc/cas/config /etc/cas/config<br></code></pre></td></tr></table></figure><p>启动项目前可以修改 <code>cas.properties</code> 中的配置，比如静态认证时默认的用户名密码，应用端口等。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">logging.config</span>=<span class="hljs-string">file:/etc/cas/config/log4j2.xml</span><br><span class="hljs-comment"># 静态认证用户</span><br><span class="hljs-meta">cas.authn.accept.users</span>=<span class="hljs-string">admin::admin,xianglin::xianglin</span><br><span class="hljs-meta">server.ssl.key-store</span>=<span class="hljs-string">file:/etc/cas/thekeystore</span><br><span class="hljs-meta">server.ssl.key-store-password</span>=<span class="hljs-string">changeit</span><br><span class="hljs-meta">server.ssl.key-password</span>=<span class="hljs-string">changeit</span><br></code></pre></td></tr></table></figure><p>其中 <code>server.ssl.key-store</code> 配置了证书的存储位置。可以将第 2 步生成的证书复制到 <code>/etc/cas/thekeystore</code>，也可以修改 <code>key-store</code> 的值指向证书位置。</p></li><li><p>使用 WAR 方式启动项目，访问认证页面 <code>https://cas.server.com:8443/cas/login</code>，如图；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./build.sh run<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/215314.png" alt="CAS登录页面"></p></li></ol><h3 id="客户端集成-CAS"><a href="#客户端集成-CAS" class="headerlink" title="客户端集成 CAS"></a>客户端集成 CAS</h3><p><a href="https://github.com/cas-projects/cas-sample-java-webapp">CAS 客户端示例</a></p><p><a href="https://github.com/apereo/java-cas-client#spring-boot-autoconfiguration">SpringBoot 配置</a></p><p>CAS 客户端启动步骤：</p><ol><li><p>修改 <code>web.xml</code> 配置，增加 CAS 提供的过滤器，关键参数有：</p><p><code>casServerUrlPrefix</code>：指向 CAS 服务器地址，如：<code>https://cas.server.com:8443/cas</code>，</p><p><code>serverName</code>：CAS 认证后重定向的地址，即客户端地址，如：<code>https://localhost:9443/sample</code>。</p><p>完整 <code>web.xml</code> 示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.4&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>casServerUrlPrefix<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>https://cas.server.com:8443/cas<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutHttpSessionListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>casServerLoginUrl<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>https://cas.server.com:8443/cas/login<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--这是客户端的部署地址，认证时会带着这个地址，认证成功后会跳转到这个地址--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>serverName<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>https://localhost:9443/sample<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS Validation Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.jasig.cas.client.validation.Cas30ProxyReceivingTicketValidationFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>casServerUrlPrefix<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>https://cas.server.com:8443/cas<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>serverName<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>https://localhost:9443/sample<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>redirectAfterValidation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>useSession<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>authn_method<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>mfa-duo<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 该过滤器负责实现HttpServletRequest请求的包裹，比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.jasig.cas.client.util.HttpServletRequestWrapperFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS Validation Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span><br>            index.jsp<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改 Tomcat 配置，见 <a href="https://github.com/xianglin2020/cas-demo/blob/master/server.xml">server.xml</a>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="hljs-comment">               connectionTimeout=&quot;20000&quot;</span><br><span class="hljs-comment">               redirectPort=&quot;8443&quot; /&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;9443&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attr">SSLEnabled</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scheme</span>=<span class="hljs-string">&quot;https&quot;</span> <span class="hljs-attr">secure</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">clientAuth</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sslProtocol</span>=<span class="hljs-string">&quot;TLS&quot;</span> <span class="hljs-attr">keystoreFile</span>=<span class="hljs-string">&quot;/Users/linxiang/Documents/cas/thekeystore&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">keystorePass</span>=<span class="hljs-string">&quot;changeit&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动客户端，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/220633.png" alt="客户端集成 CAS"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/221034.png" alt="重定向到客户端"></p></li></ol><p>Spring Boot 应用简单集成CAS 认证：</p><ol><li><p>在 <code>pom.xml</code> 中添加 CAS 客户端的依赖；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jasig.cas.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cas-client-support-springboot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>application.yaml</code> 添加 CAS 相关配置；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7443</span><br>  <span class="hljs-attr">ssl:</span><br>    <span class="hljs-attr">key-store:</span> <span class="hljs-string">classpath:thekeystore</span><br>    <span class="hljs-attr">key-store-password:</span> <span class="hljs-string">changeit</span><br>    <span class="hljs-attr">key-store-type:</span> <span class="hljs-string">pkcs12</span><br>    <span class="hljs-attr">key-alias:</span> <span class="hljs-string">cas</span><br><br><span class="hljs-attr">cas:</span><br>  <span class="hljs-attr">server-url-prefix:</span> <span class="hljs-string">https://cas.server.com:8443/cas</span><br>  <span class="hljs-attr">server-login-url:</span> <span class="hljs-string">https://cas.server.com:8443/cas/login</span><br>  <span class="hljs-attr">client-host-url:</span> <span class="hljs-string">https://client1.server.com:7443/</span><br></code></pre></td></tr></table></figure></li><li><p>使用注解 <code>@EnableCasClient</code>来启用 CAS；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCasClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootCasDemoApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootCasDemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动客户端，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/221708.png" alt="重定向到客户端"></p></li></ol><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><h3 id="CAS-名词"><a href="#CAS-名词" class="headerlink" title="CAS 名词"></a>CAS 名词</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/223343.png" alt="CAS架构"></p><p>通过 Fiddler 抓包学习 CAS 的认证流程前，先熟悉几个名词 （见 <a href="https://apereo.github.io/cas/5.3.x/protocol/CAS-Protocol.html">CAS Protocol</a>）：</p><ul><li><code>TGC</code>：（Ticket-granting Cookie），存放 SSO 用户身份凭据的 Cookie，类似 JSESSIONID。</li><li><code>TGT</code>：（Ticket Granting Ticket），在 SSO 中标识一位用户，类似 Session。</li><li><code>ST</code>：（Service Ticket），作为一个参数跟在 url 后面， 代表 CAS 为某一用户访问 CAS 客户端签发的凭据。</li></ul><blockquote><ul><li>The <code>TGT</code> (Ticket Granting Ticket), stored in the <code>TGC</code> cookie, represents a SSO session for a user.</li><li>The <code>ST</code> (Service Ticket), transmitted as a <code>GET</code> parameter in urls, stands for the access granted by the CAS server to the <em>CASified</em> application for a specific user.</li></ul></blockquote><h3 id="首次认证流程"><a href="#首次认证流程" class="headerlink" title="首次认证流程"></a>首次认证流程</h3><p>按上述步骤启动 CAS 相关应用后，打开浏览器，访问 <code>https://localhost:9443/sample/</code>，输入口令完成登录，在 Fiddler 中过滤无关请求，需要学习的请求如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/195016.png" alt="CAS认证流程"></p><ol><li><p>序号 930，第一次访问 <code>https://localhost:9443/sample/</code>，会经过 CAS 提供的过滤器 <code>org.jasig.cas.client.authentication.AuthenticationFilter</code>，过滤器判断到当前用户没有登录，将请求重定向到认证中心，如图；</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/195836.png" alt="CAS认证--重定向到 CAS 服务器"></p><p>重定向的地址是在过滤器参数中配置的 <code>casServerLoginUrl</code>，<code>service</code> 参数值则是过滤器参数中配置的 <code>serverName</code>，即认证后要跳转的地址。</p></li><li><p>序号 932，CAS 服务器接收到登录请求，返回登录页面；</p></li><li><p>序号 956，用户输入口令后提交登录，CAS 服务器验证用户名密码是否有效（这里使用静态认证），如图；</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/201037.png" alt="CAS 认证--登录提交"></p><p>使用 <code>POST</code> 请求的方式提交登录表单，用户认证成功后，请求的响应码是 302，指示浏览器将请求重定向到最开始访问的地址。重定向的地址通过 querySpring 携带了一个 <code>ticket</code> 参数。同时会设置一个名为 <code>TGC</code> 的 Cookie，路径为 <code>/cas/</code>。下次访问 <code>https://cas.server.com:8443</code> 时会携带这个 Cookie，服务器可以根据这个 <code>TGC</code>，查找与之对应的 <code>TGT</code>，从而判断用户是否认证过，是否需要展示登录页面。<code>TGT</code> 与 <code>TGC</code> 的关系就像 <code>SESSION</code> 与 Cookie 中 <code>JSESSIONID</code> 的关系；</p></li><li><p>序号 957，浏览器向 <code>https://localhost:9443/sample/</code> 发起请求，请求携带 CAS 服务器签发的 <code>ST</code>，<code>localhost:9443</code> 在过滤器中获取到 ticket 值，通过 HTTP 请求的方式调用 CAS 服务验证该 ticket 是否有效，过滤器全称 <code>org.jasig.cas.client.validation.Cas30ProxyReceivingTicketValidationFilter</code> ，验证方法在 <code>org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator#validate</code>， 如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/222841.png" alt="validate"></p><p>此时，CAS 服务器的日志如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/223002.png" alt="CAS 认证--ST 验证"></p><p><code>localhost:9443</code> 收到 CAS 服务器返回，知道用户合法，即可正常响应请求，展示页面，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/092357.png" alt="CAS 认证--客户端响应"></p></li><li><p>序号 958，<code>ST</code> 验证通过后再次重定向是在 <code>Cas30ProxyReceivingTicketValidationFilter</code> 过滤器中使用了 <code>redirectAfterValidation</code> 参数（默认为  <code>true</code>），将其配置成 <code>false</code> 即可在验证用户后返回正常页面，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/223200.png" alt="CAS 认证--重定向"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/094105.png" alt="CAS认证--访问客户端"></p></li></ol><h3 id="再次认证流程"><a href="#再次认证流程" class="headerlink" title="再次认证流程"></a>再次认证流程</h3><p>第一次访问 <code>localhost:9443</code> 的步骤已梳理完成，保持用户在 SSO 的会话，尝试访问 <code>localhost:7443</code>，观察其流程。请求重定向到 CAS 服务器时，携带了值为 <code>TGC</code> 的 Cookie。CAS 服务器通过此 <code>TGC</code> 查找到对应的 <code>TGT</code>，判断到用户已经登录，便不再展示登录页面，即少了 CAS 服务器登录这个步骤，剩余步骤和首次登录一致，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/172811.png" alt="image-20210710172810940"></p><p>官方文档中的时序图如下，见 <a href="https://apereo.github.io/cas/5.3.x/protocol/CAS-Protocol.html#web-flow-diagram">CAS - CAS Protocol</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/163239.png" alt="CAS 时序图"></p><h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><p>示例代码见 <a href="https://github.com/xianglin2020/cas-demo/blob/master/cas-simulation-login/src/main/java/store/xianglin/Simulation.java">Simulation.java</a></p><h3 id="使用-HttpClient-模拟登录"><a href="#使用-HttpClient-模拟登录" class="headerlink" title="使用 HttpClient 模拟登录"></a>使用 HttpClient 模拟登录</h3><p>分析首次登录流程可知，模拟登录时只需要处理好 CAS 认证、重定向到客户端两个步骤，就可以获取包含 <code>JSESSIONID</code> 的 Cookie，使用此 Cookie 便可以完成其它后续请求的模拟，模拟登录的简单示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Simulation</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SERVER_LOGIN_URL = <span class="hljs-string">&quot;https://cas.server.com:8443/cas/login&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CLIENT_HOST_URL = <span class="hljs-string">&quot;https://client1.server.com:7443/&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CloseableHttpClient client;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        client = HttpClients.createDefault();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模拟登录，返回包含 JSESSIONID 的 Cookie</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName userName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> CookieValue</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">simulationLogin</span><span class="hljs-params">(String userName, String password)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        CloseableHttpResponse response;<br>        String url = SERVER_LOGIN_URL + <span class="hljs-string">&quot;?service=&quot;</span> + CLIENT_HOST_URL;<br>        <span class="hljs-comment">// 1、获取 CAS 登录页面</span><br>        HttpGet httpGet = <span class="hljs-keyword">new</span> HttpGet(url);<br>        response = client.execute(httpGet);<br>        StatusLine statusLine = response.getStatusLine();<br>        <span class="hljs-keyword">int</span> statusCode = statusLine.getStatusCode();<br>        <span class="hljs-keyword">if</span> (HttpStatus.SC_OK != statusCode) &#123;<br>            System.out.println(<span class="hljs-string">&quot;获取 CAS 登录页面返回错误！&quot;</span> + statusLine);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        String casLoginPageHtml = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);<br>        IOUtils.closeQuietly(response);<br>        <span class="hljs-comment">// 使用 JSoup 解析表单</span><br>        Document document = Jsoup.parse(casLoginPageHtml);<br>        Element fm1Element = document.getElementById(<span class="hljs-string">&quot;fm1&quot;</span>);<br>        Elements inputElements = fm1Element.getElementsByTag(<span class="hljs-string">&quot;input&quot;</span>);<br>        <span class="hljs-comment">// 提交参数</span><br>        List&lt;NameValuePair&gt; casLoginBody = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">for</span> (Element inputElement : inputElements) &#123;<br>            String type = inputElement.attr(<span class="hljs-string">&quot;type&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;submit&quot;</span>.equals(type)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            String name = inputElement.attr(<span class="hljs-string">&quot;name&quot;</span>);<br>            String value = inputElement.attr(<span class="hljs-string">&quot;value&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;username&quot;</span>.equals(name)) &#123;<br>                value = userName;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;password&quot;</span>.equals(name)) &#123;<br>                value = password;<br>            &#125;<br>            casLoginBody.add(<span class="hljs-keyword">new</span> BasicNameValuePair(name, value));<br>        &#125;<br>        <span class="hljs-comment">// 2、提交登录表单</span><br>        HttpEntity loginEntity = <span class="hljs-keyword">new</span> UrlEncodedFormEntity(casLoginBody, StandardCharsets.UTF_8);<br>        HttpPost httpPost = <span class="hljs-keyword">new</span> HttpPost(url);<br>        httpPost.setEntity(loginEntity);<br>        response = client.execute(httpPost);<br>        statusLine = response.getStatusLine();<br>        <span class="hljs-keyword">if</span> (HttpStatus.SC_MOVED_TEMPORARILY != statusLine.getStatusCode()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录 CAS 返回错误！&quot;</span> + statusLine);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 处理响应头</span><br>        Header cookie = response.getFirstHeader(<span class="hljs-string">&quot;Set-Cookie&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;cookie: &quot;</span> + cookie.getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + cookie.getValue());<br>        Header location = response.getFirstHeader(<span class="hljs-string">&quot;Location&quot;</span>);<br>        String locationUrl = location.getValue();<br>        System.out.println(<span class="hljs-string">&quot;locationUrl : &quot;</span> + locationUrl);<br>        IOUtils.closeQuietly(response);<br>        <span class="hljs-comment">// 3、重定向到客户端</span><br>        httpGet = <span class="hljs-keyword">new</span> HttpGet(locationUrl);<br>        response = client.execute(httpGet);<br>        statusLine = response.getStatusLine();<br>        <span class="hljs-keyword">if</span> (HttpStatus.SC_MOVED_TEMPORARILY != statusLine.getStatusCode()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录客户端返回错误！&quot;</span> + statusLine);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 处理响应头，返回 Cookie</span><br>        cookie = response.getFirstHeader(<span class="hljs-string">&quot;Set-Cookie&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;cookie: &quot;</span> + cookie.getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + cookie.getValue());<br>        location = response.getFirstHeader(<span class="hljs-string">&quot;Location&quot;</span>);<br>        locationUrl = location.getValue();<br>        System.out.println(<span class="hljs-string">&quot;locationUrl : &quot;</span> + locationUrl);<br>        IOUtils.closeQuietly(response);<br>        <span class="hljs-keyword">return</span> cookie.getValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="忽略-SSL-证书"><a href="#忽略-SSL-证书" class="headerlink" title="忽略 SSL 证书"></a>忽略 SSL 证书</h4><p>CAS 默认不支持 HTTP 请求，使用 HttpClient 模拟登录时可能会遇到如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target<br>at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:131)<br>.........<br>Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target<br>at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:439)<br></code></pre></td></tr></table></figure><p>有两种方式解决这个问题：</p><ol><li><p>使用如下语句将证书导入 JVM 的证书库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keytool -import -keystore &quot;JAVA_HOME/jre/lib/security/cacerts&quot; -file &lt;path-to-cert&gt; -alias cas -storepass changeit<br></code></pre></td></tr></table></figure></li><li><p>设置 HttpClient 忽略 SSL 证书，如示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>  <span class="hljs-comment">// client = HttpClients.createDefault();</span><br>  SSLContext sslContext;<br>  <span class="hljs-keyword">try</span> &#123;<br>    sslContext = SSLContexts.custom().loadTrustMaterial(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> TrustStrategy() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException </span>&#123;<br>        <span class="hljs-comment">// 返回 true 即忽略认证</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>      &#125;<br>    &#125;).build();<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>  &#125;<br>  client = HttpClients<br>    .custom()<br>    .setSslcontext(sslContext)<br>    .build();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="忽略主机名称验证"><a href="#忽略主机名称验证" class="headerlink" title="忽略主机名称验证"></a>忽略主机名称验证</h4><p>HttpClient 在 SSL 握手时会验证对方主机名称，防止链接被重定向到其他地址上去，若服务器证书上的 HostName 和实际访问的 URL 不匹配时，会抛出如下异常：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; javax.net.ssl.SSLPeerUnverifiedException: Host name &#x27;client1.server.com&#x27; does not match the certificate subject provided by the peer (CN=cas.server.com, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown)<br></code></pre></td></tr></table></figure><p>这里是因为 CAS 登录后会重定向到客户端 <code>client1.server.com</code>，可以通过如下配置忽略这个问题，参考 <a href="https://stackoverflow.com/questions/34655031/javax-net-ssl-sslpeerunverifiedexception-host-name-does-not-match-the-certifica">Host name does not match the certificate subject provided by the peer - Stack Overflow</a>：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// client = HttpClients.createDefault();</span><br>    client = HttpClients.custom()<br>    .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)<br>    .build();<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>NoopHostnameVerifier</code> 在 <code>verify</code> 方法中返回 <code>true</code> 忽略主机名验证。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verify</span><span class="hljs-params">(String s, SSLSession sslSession)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关闭-HttpClient-自动重定向"><a href="#关闭-HttpClient-自动重定向" class="headerlink" title="关闭 HttpClient 自动重定向"></a>关闭 HttpClient 自动重定向</h4><p><code>simulationLogin</code> 方法期望返回 <code>client.server.com</code> 响应头中的 Cookie 信息，实际执行时控制台打印如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cookie: Set-Cookie =&gt; TGC=eyJhbGciOiJIUzUxMiJ9.ZXlKNmFYQWlPaUpFUlVZaUxDSmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UTBKRExVaFRNalUySW4wLi5lZGRGZVhZT3A1ekVscy10aTFlRFhnLm1wemwtdnFxMEo0UDM2cGp3SFZnMTN4cVc3UWxlUUtfSzdhNkFOUHI4TFkwRFZDUnYzby13VUE2V2FCMG1zamQ3OGVNcmh4MVAxTDdpdDZBMWhveUZ5dDJMZkxTTEpNbjRNa0dhT3lHTWxERjV5SXZhd0xvQWlxNVZsclR4S0dPY3J5S3FXMF9wdl9aa09TT3RoMmVuT2NLSFg4VkMzMkhiaENyRHFGcWdYNlBtQ2RZdUNRMWl6aUVYVTM5X2tMdy45RVdvbVgzaVBQbEhzd2lCQlB4Q1Zn.YKSYFjFhm1TXHOr1Bzrb3z9-oSDsGECpJK7kOMeTz4oAeOF8Nd2WYii6oV1kb9Bzat4w7NhPxUxjvLmPjoe8Jg; Path=/cas/; Secure; HttpOnly<br>locationUrl : https://client1.server.com:7443/?ticket=ST-16-eYyvOXKLcocogqqtv84HVwxhuuMLindeMacBook-Pro<br>登录客户端返回错误！HTTP/1.1 200 <br>cookie =&gt; null<br></code></pre></td></tr></table></figure><p>发现“3、重定向到客户端”这一步并没有像在“认证流程”中分析的那样返回 302 状态，而是直接返回 200，这是因为 HttpClient 默认自动处理重定向，可以通过 Fiddler 抓包观察到这一点。自动重定向后的请求返回响应头中并没有 Cookie 信息，想要获取 Cookie 可以配置 HttpClient 不自动重定向，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// client = HttpClients.createDefault();</span><br>    <span class="hljs-keyword">final</span> RequestConfig config = RequestConfig<br>    .custom()<br>    .setRedirectsEnabled(<span class="hljs-keyword">false</span>)<br>    .build();<br>    client = HttpClients.custom()<br>    .setDefaultRequestConfig(config)<br>    .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)<br>    .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>再次执行，即可获取到 Cookie 信息，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/173641.png" alt="HttpClient 获取 Cookie"></p><p>HttpClient 自动重定向默认不支持 POST 请求，这也是有“3、重定向到客户端”这一步的原因，HttpClient 使用 <code>RedirectStrategy</code> 来完成重定向的处理，默认实现类 <code>DefaultRedirectStrategy</code> 中只允许 <code>GET</code>、<code>HEAD</code>方法的重定向，如果需要支持 <code>POST</code> 可以使用 <code>LaxRedirectStrategy</code>，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">client = HttpClients.custom()<br>  .setRedirectStrategy(LaxRedirectStrategy.INSTANCE)<br>  .build();<br></code></pre></td></tr></table></figure><h4 id="使用-Fillder-观察-HttpClient-请求"><a href="#使用-Fillder-观察-HttpClient-请求" class="headerlink" title="使用 Fillder 观察 HttpClient 请求"></a>使用 Fillder 观察 HttpClient 请求</h4><p>正常情况下 Fillder 是无法抓取 HttpClient 请求的，可以通过设置代理的方式，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpHost httpHost = <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8866</span>);<br><span class="hljs-keyword">final</span> RequestConfig config = RequestConfig.custom()<br>  .setRedirectsEnabled(<span class="hljs-keyword">false</span>)<br>  .setProxy(httpHost)<br>  .build();<br>client = HttpClients.custom()<br>  .setDefaultRequestConfig(config)<br>  .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)<br>  .build();<br></code></pre></td></tr></table></figure><h4 id="获取-Cookie-信息"><a href="#获取-Cookie-信息" class="headerlink" title="获取 Cookie 信息"></a>获取 Cookie 信息</h4><p>HttpClient 自动重定向时，可能无法在响应头中获取到 Cookie，而且自己解析请求头获取 Cookie 也比较繁琐。可以借助 <code>CookieStore</code> 来管理 Cookie，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> CookieStore cookieStore = <span class="hljs-keyword">new</span> BasicCookieStore();<br>client = HttpClients.custom()<br>  .setDefaultCookieStore(cookieStore)<br>  .build();<br><br><span class="hljs-comment">// 遍历 Cookie</span><br>List&lt;Cookie&gt; cookieList = cookieStore.getCookies();<br><span class="hljs-keyword">for</span> (Cookie cookie1 : cookieList) &#123;<br>  System.out.println(cookie1.getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + cookie1.getValue() + <span class="hljs-string">&quot; =&gt; &quot;</span> + cookie1.getPath());<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下，第一个是 <code>client1.server.com</code> 的 Cookie，第二个是 <code>cas.server.com</code> 的 Cookie。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">JSESSIONID =&gt; A07EF954C7591C5F1F724EFAA8141E86 =&gt; /<br>TGC =&gt; eyJhbGciOiJIUzUxMiJ9.ZXlKNmFYQWlPaUpFUlVZaUxDSmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UTBKRExVaFRNalUySW4wLi4ycXMwX2lJZzYya1o1bDN5alcyTFpnLnVjOWdlR2VlbjJpM3lmdTZQd25jYzZqLUxpOThGNk5zTzE4d2NFaHBvdmI3REMtaG16TmVEbXhhNGhpVDJNU2FqWUdsNU5CSm16d3FfVkgzVFZCZG9rcG5HUFVBZkkyUE1LZ2pkOWthMTZYOVlfdnE1S3ZwdWlSdmE3QTJSSTlWM0pBS3IzS2p6aUVIUUpLQUQzLTM0Rmd3R3VQVUViak5LM3psZHA1UnVfRlktS0lMUmZPaFNYd2tqaF9wbGRiVS42Uy1CWTFTaUozNkN5b2tEV2VsbzVR.CsMVzXEYTWg5v7Oyh_DvosrY4mhFaqWTUqyn5Vzg2Spx3EMwhul12u9sovG8HS5lh73T5bKshw8UUtL82elLnQ =&gt; /cas/<br></code></pre></td></tr></table></figure><h3 id="借助-Postman-简化编码"><a href="#借助-Postman-简化编码" class="headerlink" title="借助 Postman 简化编码"></a>借助 Postman 简化编码</h3><p>遇到不会写或者代码繁杂的请求，可以借助 Postman 的示例代码快速完成开发。比如我不会使用 HttpClient 上传文件，可以先使用 Postman 完成文件上传接口的验证，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/160238.png" alt="Postman 上传文件"></p><p>在右侧工具栏找到 Code 标签，在 Code snippet 中选择 “Java - OkHttp”，即可复用代码，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/160623.png" alt="Postman 代码片段"></p><p>将其复制到自己的代码中，简化开发，Cookie 可以使用上面提到的方法获取，详细代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upload</span><span class="hljs-params">(String cookie, String filePath)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>  OkHttpClient client = <span class="hljs-keyword">new</span> OkHttpClient().newBuilder().hostnameVerifier(NoopHostnameVerifier.INSTANCE)<br>    .build();<br>  RequestBody body = <span class="hljs-keyword">new</span> MultipartBody.Builder().setType(MultipartBody.FORM)<br>    .addFormDataPart(<span class="hljs-string">&quot;file&quot;</span>, filePath.substring(filePath.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>)),<br>                     RequestBody.create(MediaType.parse(<span class="hljs-string">&quot;application/octet-stream&quot;</span>),<br>                                        <span class="hljs-keyword">new</span> File(filePath)))<br>    .build();<br>  Request request = <span class="hljs-keyword">new</span> Request.Builder()<br>    .url(CLIENT_HOST_URL + <span class="hljs-string">&quot;upload&quot;</span>)<br>    .method(<span class="hljs-string">&quot;POST&quot;</span>, body)<br>    .addHeader(<span class="hljs-string">&quot;Cookie&quot;</span>, cookie)<br>    .build();<br>  Response response = client.newCall(request).execute();<br>  ResponseBody responseBody = response.body();<br>  <span class="hljs-keyword">if</span> (responseBody != <span class="hljs-keyword">null</span>) &#123;<br>    String string = responseBody.string();<br>    System.out.println(string);<br>  &#125;<br>  IOUtils.closeQuietly(response);<br>  IOUtils.closeQuietly(responseBody);<br>&#125;<br></code></pre></td></tr></table></figure><p>配合 <code>simulationLogin()</code> 方法可以完整的实现模拟 CAS 登录并上传文件的需求，结果如图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String filePath = <span class="hljs-string">&quot;/Users/linxiang/Documents/cas/cas-demo/server.xml&quot;</span>;<br>        Simulation simulation = <span class="hljs-keyword">new</span> Simulation();<br>        String cookie = simulation.simulationLogin(<span class="hljs-string">&quot;xianglin&quot;</span>, <span class="hljs-string">&quot;xianglin&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;cookie =&gt; &quot;</span> + cookie);<br>        simulation.upload(cookie, filePath);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/2021-07/173935.png" alt="CAS模拟登录、上传文件"></p>]]></content>
    
    
    <categories>
      
      <category>work record</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>cas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口打包、安装到本地、上传至仓库</title>
    <link href="/2021/04/23/%E6%8E%A5%E5%8F%A3%E6%89%93%E5%8C%85%E3%80%81%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%81%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%BB%93%E5%BA%93/"/>
    <url>/2021/04/23/%E6%8E%A5%E5%8F%A3%E6%89%93%E5%8C%85%E3%80%81%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%81%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="使用jar命令将-class-文件打包成-jar-文件"><a href="#使用jar命令将-class-文件打包成-jar-文件" class="headerlink" title="使用jar命令将 class 文件打包成 jar 文件"></a>使用<code>jar</code>命令将 class 文件打包成 jar 文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jar cvf test.jar .\store\xianglin\mvn\test\<br></code></pre></td></tr></table></figure><h2 id="将生成的-jar-文件安装至本地仓库"><a href="#将生成的-jar-文件安装至本地仓库" class="headerlink" title="将生成的 jar 文件安装至本地仓库"></a>将生成的 jar 文件安装至本地仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install:install-file -Dfile=C:\Users\xianglin\Documents\mvn\target\classes\test-1.0.jar -DgroupId=store.xianglin -DartifactId=mvn -Dversion=1.0 -Dpackaging=jar<br></code></pre></td></tr></table></figure><h2 id="将生成的-jar-文件上传至-Maven-私服"><a href="#将生成的-jar-文件上传至-Maven-私服" class="headerlink" title="将生成的 jar 文件上传至 Maven 私服"></a>将生成的 jar 文件上传至 Maven 私服</h2><pre><code class="shell">mvn deploy:deploy-file -DgroupId=store.xinaglin -DartifactId=test  -Dversion=1.0   -Dfile=test-1.0.jar   -Durl=http://127.0.0.1/nexus/content/repositories/mvn/ -DrepositoryId=mvn</code></pre>]]></content>
    
    
    <categories>
      
      <category>work record</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安装 Oracle-11g</title>
    <link href="/2021/04/06/Docker-%E5%AE%89%E8%A3%85-Oracle-11g/"/>
    <url>/2021/04/06/Docker-%E5%AE%89%E8%A3%85-Oracle-11g/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装-Oracle-11g"><a href="#Docker-安装-Oracle-11g" class="headerlink" title="Docker 安装 Oracle-11g"></a>Docker 安装 Oracle-11g</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>DockerHub：<a href="https://hub.docker.com/r/jaspeen/oracle-11g">jaspeen/oracle-11g (docker.com)</a></li><li>Oracle Database：<a href="https://www.oracle.com/cn/database/enterprise-edition/downloads/oracle-db11g-linux.html">适用于 Linux x86-64 的 Oracle Database 11g 第 2 版 | Oracle 中国</a></li><li>Docker CE 清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">docker-ce | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="Docker-安装步骤"><a href="#Docker-安装步骤" class="headerlink" title="Docker 安装步骤"></a>Docker 安装步骤</h3><ol><li><p>删除旧版 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get remove docker docker-engine docker.io<br></code></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common<br></code></pre></td></tr></table></figure></li><li><p>导入 Docker GPG 公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure></li><li><p>添加软件仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo add-apt-repository \<br>   &quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \<br><span class="hljs-meta">   $</span><span class="bash">(lsb_release -cs) \</span><br>   stable&quot;<br></code></pre></td></tr></table></figure></li><li><p>安装 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install docker-ce<br></code></pre></td></tr></table></figure></li><li><p>替换国内源，编辑<code>/etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;http://registry.docker-cn.com&quot;</span>,<br>    <span class="hljs-string">&quot;http://docker.mirrors.ustc.edu.cn&quot;</span>,<br>    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span>: [<br>    <span class="hljs-string">&quot;registry.docker-cn.com&quot;</span>,<br>    <span class="hljs-string">&quot;docker.mirrors.ustc.edu.cn&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;debug&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;experimental&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将当前用户加入 docker 组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo gpasswd -a username docker<br>newgrp docker<br></code></pre></td></tr></table></figure></li></ol><h3 id="Oracle-11g-安装步骤"><a href="#Oracle-11g-安装步骤" class="headerlink" title="Oracle-11g 安装步骤"></a>Oracle-11g 安装步骤</h3><ol><li><p>下载 <code>linux.x64_11gR2_database_1of2.zip</code>、<code>linux.x64_11gR2_database_2of2.zip</code>两个文件，将其解压。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/20210406103144.png" alt="image-20210406103137806"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/20210406103230.png" alt="image-20210406103230234"></p></li><li><p>拉取 Oracle-11g 的 docker 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull jaspeen/oracle-11g<br></code></pre></td></tr></table></figure></li><li><p>安装启动 Oracle Database</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --privileged --name oracle11g -p 1521:1521 -v /home/xianglin/oracle:/install jaspeen/oracle-11g<br></code></pre></td></tr></table></figure><p>安装过程较长，查看输出，有 <code>100% complete</code> 时，表示安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/20210406103421.png" alt="image-20210406103420985"></p></li></ol><h3 id="解除账户限制"><a href="#解除账户限制" class="headerlink" title="解除账户限制"></a>解除账户限制</h3><ol><li><p>连接到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it oracle11g /bin/bash<br></code></pre></td></tr></table></figure></li><li><p>切换到 oracle 用户，然后链接到 sql 控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@9b255eb5dd63 /]# su - oracle<br>Last login: Tue Apr  6 02:14:23 UTC 2021 on pts/0<br>[oracle@9b255eb5dd63 ~]$ sqlplus / as sysdba<br><br>SQL*Plus: Release 11.2.0.1.0 Production on Tue Apr 6 02:38:35 2021<br><br>Copyright (c) 1982, 2009, Oracle.  All rights reserved.<br><br><br>Connected to:<br>Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production<br>With the Partitioning, OLAP, Data Mining and Real Application Testing options<br><br><span class="hljs-meta">SQL&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>解锁账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">SQL&gt;</span><span class="bash"> alter user scott account unlock;</span><br><br>User altered.<br><br><span class="hljs-meta">SQL&gt;</span><span class="bash"> conn scott/tiger</span><br>ERROR:<br>ORA-28001: the password has expired<br><br><br>Changing password for scott<br>New password:<br>Retype new password:<br>Password changed<br>Connected.<br><span class="hljs-meta">SQL&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用可视化工具登录</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/20210406104925.png" alt="image-20210406104925250"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Sentinel</title>
    <link href="/2021/02/27/Redis-Sentinel/"/>
    <url>/2021/02/27/Redis-Sentinel/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h1><h2 id="Redis-Sentinel-的作用"><a href="#Redis-Sentinel-的作用" class="headerlink" title="Redis Sentinel 的作用"></a>Redis Sentinel 的作用</h2><p>Redis 的 Sentinel 系统用于管理多个 Redis 服务器（instance），Redis Sentinel 主要有三个作用：</p><ul><li>监控（Monitoring）：Sentinel 会不断的检查 Redis 主服务器和从服务器是否运行正常。</li><li>提醒（Notification）：当被监控的某个 Redis 服务器出现问题时，Sentinel 可以通过 API 向管理员或其它应用程序发送通知。</li><li>自动故障迁移（Atomic failover）：当一个主服务器不能正常工作时，Sentinel 会开始启动一次自动故障迁移。它会将失效主服务器的其中一个从服务器升级为新的主服务器，并让其它从服务器改为同步新主服务器的数据。当客户端试图连接失效主服务器时，集群会向客户端返回新主服务器的地址。</li></ul><p>Redis Sentinel 是一个分布式系统，可以在一个架构中运行多个 Sentinel 进程，这些进程使用流言协议（Gossip Protocol）来接收关于主服务器是否下线的信息，并使用投票协议（Agreement Protocol）来决定是否执行自动故障迁移，以及选择哪个从服务器作为新的主服务器。</p><h2 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h2><p>有两种方式可以配置 Redis 的复制功能，分别是使用<code>slaveof host port</code>命令或修改 Slave 的配置文件。</p><p>先复制三个配置文件，分别为<code>master.conf</code>、<code>slave1.conf</code>、<code>slave2.conf</code>，修改对应的 <code>port</code> 和 <code>deamon yes</code> 配置，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/121329.png" alt="conf"></p><p>然后使用如下命令启动 master 进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">src/redis-server conf/master.conf<br></code></pre></td></tr></table></figure><h3 id="使用slaveof命令配置复制功能"><a href="#使用slaveof命令配置复制功能" class="headerlink" title="使用slaveof命令配置复制功能"></a>使用<code>slaveof</code>命令配置复制功能</h3><p>使用如下命令启动 Slave1 进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">src/redis-server conf/slave1.conf<br></code></pre></td></tr></table></figure><p>然后登陆 Slave1，使用 <code>slaveof</code> 命令配置复制功能，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/113540.png" alt="image-20210227113539217" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/114440.png" alt="image-20210227114440310" style="zoom:50%;" /></p><h3 id="使用配置文件配置复制功能"><a href="#使用配置文件配置复制功能" class="headerlink" title="使用配置文件配置复制功能"></a>使用配置文件配置复制功能</h3><p>为 <code>slave2.conf</code> 中添加如下配置项：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">slaveof</span> <span class="hljs-string">127.0.0.1 6379</span><br></code></pre></td></tr></table></figure><p>然后启动 slave2 进程，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/114911.png" alt="image-20210227114910857" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/114937.png" alt="image-20210227114937122" style="zoom:50%;" /></p><p>连接至 master 进程后使用<code>info</code>命令查看 <code>Replication</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/115121.png" alt="image-20210227115121194"></p><ul><li><input disabled="" type="checkbox"> TODO</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 基础</title>
    <link href="/2021/01/17/JVM%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/01/17/JVM%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-基础"><a href="#JVM-基础" class="headerlink" title="JVM 基础"></a>JVM 基础</h1><h2 id="Java-基础知识"><a href="#Java-基础知识" class="headerlink" title="Java 基础知识"></a>Java 基础知识</h2><h2 id="谈谈对-Java-的理解"><a href="#谈谈对-Java-的理解" class="headerlink" title="谈谈对 Java 的理解"></a>谈谈对 Java 的理解</h2><ul><li>平台无关性</li><li>GC</li><li>语言特性：泛型、反射、Lambda</li><li>面向对象：封装、继承、多态</li><li>类库：网络、IO、集合、多线程</li><li>异常处理</li></ul><h3 id="Java-的平台无关性是如何实现的"><a href="#Java-的平台无关性是如何实现的" class="headerlink" title="Java 的平台无关性是如何实现的"></a>Java 的平台无关性是如何实现的</h3><p><code>javac</code> 命令将 Java 源程序编译成平台无关的字节码文件（.class），<code>java</code> 命令执行 Java 程序时通过不同平台上的 JVM 解析成机器指令。</p><p>Java 平台无关性是建立在 Java 虚拟机的平台有关性基础之上的，是因为 Java 虚拟机屏蔽了底层操作系统和硬件的差异。</p><h3 id="Java-常用命令行工具"><a href="#Java-常用命令行工具" class="headerlink" title="Java 常用命令行工具"></a>Java 常用命令行工具</h3><h3 id="Java-反射基础用法"><a href="#Java-反射基础用法" class="headerlink" title="Java 反射基础用法"></a>Java 反射基础用法</h3><p>反射是在运行时，非编译时，动态获取类型的信息，比如接口信息、成员信息、方法信息、构造器信息等，根据这些动态获取到的信息创建对象、访问/修改成员、调用方法的高级语言特性。</p><h2 id="JVM-架构"><a href="#JVM-架构" class="headerlink" title="JVM 架构"></a>JVM 架构</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202101/image-20210117152159865.png" alt="image-20210117152159865"></p><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><ul><li>启动类加载器（Bootstrap ClassLoader）：这个类加载器是 Java 虚拟机实现的一部分，不是 Java 语言实现的，一般是 C++ 实现的，它负责加载 Java 的基础类，主要是 <code>JAVA_HOME/lib/rt.jar</code>。</li><li>扩展类加载器（Extension ClassLoader）：负责加载 Java 的一些扩展类，一般是 <code>JAVA_HOME/lib/ext</code>目录中的 jar 包。</li><li>应用程序类加载器（Application ClassLoader）：负责加载应用程序的类，包括自己写的和引入的第三方类库，即所有在类路径中指定的类。</li></ul><h3 id="类的装载过程"><a href="#类的装载过程" class="headerlink" title="类的装载过程"></a>类的装载过程</h3><p><img src="https://github.com/xianglin2020/gallery/blob/master/202101/143838.jpg?raw=true" alt="类的装载过程"></p><ol><li>加载：通过 ClassLoader 加载 class 文件字节码，生成 Class 对象。<ol><li>通过全类名获取定义此类的二进制字节流。</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区这些数据结构的入口。</li></ol></li><li>连接：<ol><li>验证：检查加载的 class 正确性和安全性。</li><li>准备：为类变量分配存储空间并设置类变量初始值。</li><li>解析：JVM 将常量池的符号引用转化为直接引用。</li></ol></li><li>初始化：执行类变量赋值和静态代码块。</li></ol><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202101/image-20210117192054967.png" alt="双亲委派机制"></p><p>类加载过程：</p><ol><li>判断是否已经加载过，加载过了直接返回 Class 对象，一个类只会被一个 ClassLoader 加载一次；</li><li>如果没有被加载，先让父 ClassLoader 去加载，如果加载成功，返回得到的 Class 对象；</li><li>在父 ClassLoader 没有加载成功的前提下，自己尝试加载类。</li></ol><p>双亲委派模型的好处：</p><ul><li>避免多份同样字节码的加载。</li><li>保证 Java 核心 API 不被篡改。</li></ul><h3 id="Java-运行时数据区"><a href="#Java-运行时数据区" class="headerlink" title="Java 运行时数据区"></a>Java 运行时数据区</h3><p>线程私有部分：</p><ul><li>程序计数器：<ul><li>字节码解释器通过改变程序计数器来依次读取指令，实现代码的流程控制。</li><li>程序计数器用于记录当前线程执行的位置，方便线程切换后继续执行。</li></ul></li><li>Java 虚拟机栈：<ul><li>描述 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</li><li>Java 虚拟机栈包括：局部变量表、操作数栈、动态链接、方法出口信息。</li></ul></li><li>本地方法栈为本地方法服务。</li><li>方法区：元空间（MetaSpace）使用本地内存，永久代（PermGen）使用的是 JVM 内存。</li><li>堆：<ul><li>对象实例的分配区域。</li><li>GC 管理的主要区域。</li></ul></li></ul><h3 id="JVM-性能调优参数的含义"><a href="#JVM-性能调优参数的含义" class="headerlink" title="JVM 性能调优参数的含义"></a>JVM 性能调优参数的含义</h3><ul><li><code>-Xss</code>：规定了每个线程虚拟机栈的大小</li><li><code>-Xms</code>：堆的初始值</li><li><code>-Xmx</code>：堆能达到的最大值</li></ul><h3 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h3><p>内存分配策略：静态存储、栈式存储、堆式存储。</p><p>引用对象、数组时，栈里定义变量保存在堆中目标的首地址。</p><ul><li>管理方式：栈自动释放，堆需要 GC。</li><li>空间大小：栈空间比堆空间小。</li><li>碎片相关：栈产生的碎片远小于堆。</li><li>分配方式：栈支持静态分配和动态分配，而堆空间仅支持动态分配。</li><li>效率：栈空间效率比堆空间高。</li></ul><h3 id="String-的-intern-方法在-JDK6-和以后的区别"><a href="#String-的-intern-方法在-JDK6-和以后的区别" class="headerlink" title="String 的 intern() 方法在 JDK6 和以后的区别"></a>String 的 intern() 方法在 JDK6 和以后的区别</h3><p><strong>JDK7 字符串常量池从永久代移动到堆中。</strong></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3>]]></content>
    
    
    <categories>
      
      <category>interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 数据库知识</title>
    <link href="/2020/12/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/12/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202101/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="关系型数据库"></p><h2 id="数据库模块划分"><a href="#数据库模块划分" class="headerlink" title="数据库模块划分"></a>数据库模块划分</h2><h2 id="关键语法"><a href="#关键语法" class="headerlink" title="关键语法"></a>关键语法</h2><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><ul><li>满足 SELECT 子句中的列名必须为分组列或列函数</li><li>列函数对于 GROUP BY 子句定义的每一个组各返回一个结果</li></ul><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><ul><li>通常与 GROUP BY 子句一起使用</li><li>WHERE 过滤行，HAVING 过滤组</li><li>关键字的顺序：WHERE – GROUP BY – HAVING</li></ul><h2 id="索引相关内容"><a href="#索引相关内容" class="headerlink" title="索引相关内容"></a>索引相关内容</h2><h3 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h3><p>全表扫描适用范围窄，借助字典的思想，使用索引可以加快查询速度。</p><h3 id="什么样的字段可以作为索引"><a href="#什么样的字段可以作为索引" class="headerlink" title="什么样的字段可以作为索引"></a>什么样的字段可以作为索引</h3><p>主键、唯一键等能使数据区分开的字段。</p><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><ul><li>二叉查找树</li><li>B - Tree</li><li>B+ - Tree</li><li>Hash 索引</li></ul><p>MySQL 索引使用的数据结构主要有 BTree 索引和哈希索引。对于哈希索引，底层数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快。其余场景，建议选择 BTree 索引，MySQL 的 BTree 索引使用的是 B+Tree。</p><h3 id="密集索引和稀疏索引的区别"><a href="#密集索引和稀疏索引的区别" class="headerlink" title="密集索引和稀疏索引的区别"></a>密集索引和稀疏索引的区别</h3><ul><li>密集索引文件中的每一个搜索码值都对应一个索引值。</li><li>稀疏索引文件只为索引码的某些值建立索引项。</li></ul><p>InnoDB 存储引擎的必须仅有一个密集索引，其选取规则如下：</p><ul><li>若一个主键被定义，该主键则作为密集索引；</li><li>若没有主键被定义，该表的第一个唯一非空索引作为密集索引；</li><li>若不满足以上条件，InnoDB 内部会生成一个隐藏主键。</li></ul><p>非主键索引存储相关键位和其对应的主键值，包含两次查找。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227155720085.png" alt="image-20201227155720085"></p><p>如图：表 <code>test.innodb</code> 使用 InnoDB 存储引擎，其数据和索引存储在文件 <code>innodb.ibd</code> 中；表 <code>test.myisam</code> 使用 MyISAM 存储引擎，其数据文件保存在 <code>myisam.MYD</code> 中，索引文件保存在 <code>myisam.MYI</code> 中。</p><h3 id="如何定位并优化慢查询-SQL"><a href="#如何定位并优化慢查询-SQL" class="headerlink" title="如何定位并优化慢查询 SQL"></a>如何定位并优化慢查询 SQL</h3><ul><li>根据慢日志定位慢查询 SQL；</li><li>使用 explain 等工具分析 SQL；</li><li>修改 SQL 或者尽量让 SQL 走索引。</li></ul><p>慢查询相关配置</p><p>使用 <code>show variables like &#39;%query%&#39;;</code> 查询当前数据库对慢查询的配置，主要有以下几个参数：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227160625055.png" alt="image-20201227160625055"></p><table><thead><tr><th><code>Variable_name</code></th><th><code>Value</code></th><th>描述</th></tr></thead><tbody><tr><td><code>show_query_log</code></td><td><code>OFF / ON</code></td><td>是否记录慢SQL</td></tr><tr><td><code>slow_query_log_file</code></td><td><code>/var/lib/mysql/*-slow.log</code></td><td>慢日志文件路径</td></tr><tr><td><code>long_query_time</code></td><td><code>10.0000</code></td><td>执行时间多长判定为慢 SQL</td></tr></tbody></table><p>可以修改 MySQL 的配置文件 <code>/etc/mysql/my.cnf</code>，修改这些参数，使其永久有效。</p><p>也可以通过设置全局变量的方式使其在 MySQL 服务重启前一直生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global long_query_time &#x3D; 1;<br>set global slow_query_log &#x3D; on;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227163312968.png" alt="image-20201227163312968"></p><p>可以使用 <code>show status like &#39;%slow_queries%&#39;</code> 来查询当前会话的慢 SQL 数：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227162732599.png" alt="image-20201227162732599"></p><p>在慢查询日志 <code>/var/lib/mysql/manjaro-slow.log </code>中查看慢 SQL 。</p><p>使用 <code>explain</code> 分析 SQL 执行计划：</p><p><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> person_info_large <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227164335683.png" alt="image-20201227164335683"></p><p>主要需要关注的字段有：</p><p><code>id</code>：执行编号</p><p><code>type</code>：访问类型</p><p><code>extra</code>：查询优化器对查询计划的补充信息</p><h3 id="联合索引的最作匹配原则"><a href="#联合索引的最作匹配原则" class="headerlink" title="联合索引的最作匹配原则"></a>联合索引的最作匹配原则</h3><p>由多列组成的索引称为联合索引。</p><p>有如下表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`person_info_large`</span> (<br><span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br><span class="hljs-string">`account`</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">10</span> ) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-string">`area`</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-string">`title`</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br><span class="hljs-string">`motto`</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">50</span> ) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>PRIMARY <span class="hljs-keyword">KEY</span> ( <span class="hljs-string">`id`</span> ),<br><span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`account`</span> ( <span class="hljs-string">`account`</span> ),<br><span class="hljs-keyword">KEY</span> <span class="hljs-string">`index_area_title`</span> ( <span class="hljs-string">`area`</span>, <span class="hljs-string">`title`</span> ) <br>) <span class="hljs-keyword">ENGINE</span> = <span class="hljs-keyword">INNODB</span> AUTO_INCREMENT = <span class="hljs-number">196606</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> = utf8;<br></code></pre></td></tr></table></figure><p>索引 <code>index_area_title</code> 是对 <code>area</code> 和 <code>title</code> 两个字段建立的联合索引。考虑以下查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>person_info_large <br><span class="hljs-keyword">WHERE</span><br>area = <span class="hljs-string">&#x27;nTtqWvRzVvuuYXBk5AFC&#x27;</span> <br><span class="hljs-keyword">AND</span> title = <span class="hljs-string">&#x27;lLrm20htGVVqRqJDWBU0&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>person_info_large <br><span class="hljs-keyword">WHERE</span><br>area = <span class="hljs-string">&#x27;nTtqWvRzVvuuYXBk5AFC&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>person_info_large <br><span class="hljs-keyword">WHERE</span><br>title = <span class="hljs-string">&#x27;lLrm20htGVVqRqJDWBU0&#x27;</span>;<br></code></pre></td></tr></table></figure><p>前两个查询的分析结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227171132275.png" alt="image-20201227171132275"></p><p>最后一个查询的分析结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227171109740.png" alt="image-20201227171109740"></p><p>最左前缀匹配原则是指：</p><ul><li>MySQL 会一直向右匹配直到遇到范围查询（<code>&gt;</code> 、<code>&lt;</code>、 <code>between</code>、 <code>like</code>）就停止匹配。比如 <code>a = 3 and b = 4 and c &gt; 5 and d = 6</code>，如果建立 <code>(a, b, c, d)</code>顺序的索引，则 d 是用不到索引的，如果建立 <code>(a, b, d, c)</code> 的索引则都可以用到，且 a b d 的顺序可以任意调整。</li><li><code>=</code> 和 <code>in</code> 可以乱序，比如 <code>a = 1 and b = 2 and c = 3</code> 建立<code>(a, b, c)</code> 索引可以任意顺序，MySQL 的查询优化器会优化成索引可以识别的形式。</li></ul><p>最左匹配原则的成因：如图，创建联合索引时，数据库依据联合索引最左的字段来构建 B+Tree，即会按索引字段顺序对数据排序。比如 a 的值是有序的： 1,1,2,2,3,3 ，B 的值是无序的。当 a 值相等时，b 的值是有序的。所以最左匹配原则遇上范围查询就会停止，因为在一个范围中，剩下的字段不是有序的，剩下的字段都无法使用索引。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227172424787.png" alt="image-20201227172424787"></p><h3 id="索引是建立得越多越好吗"><a href="#索引是建立得越多越好吗" class="headerlink" title="索引是建立得越多越好吗"></a>索引是建立得越多越好吗</h3><ul><li>数据量小的表不需要建立索引，建立索引会带来额外的开销。</li><li>数据变化时需要维护索引，因此更多的索引意味着更多的维护成本（参照同理）。</li><li>更多的索引意味着需要更多的空间。</li></ul><h2 id="锁相关内容"><a href="#锁相关内容" class="headerlink" title="锁相关内容"></a>锁相关内容</h2><h3 id="MySQL-MyISAM-和-InnoDB-存储引擎"><a href="#MySQL-MyISAM-和-InnoDB-存储引擎" class="headerlink" title="MySQL MyISAM 和 InnoDB 存储引擎"></a>MySQL MyISAM 和 InnoDB 存储引擎</h3><p>查看存储引擎相关的命令：</p><p>查看 MySQL 提供的所有存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">engines</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227180549669.png" alt="image-20201227180549669"></p><p>查看默认的存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%storage_engine%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227180806196.png" alt="image-20201227180806196"></p><p>查看表相关内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">status</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;shop_info_small&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201227181032409.png" alt="image-20201227181032409"></p><p>MyISAM 和 InnoDB 的区别</p><p>MySQL 5.5 之前使用 MyISAM 作为默认的数据库存储引擎，MyISAM 提供了全文索引、压缩和空间函数等特性，但是不支持事务和行级锁。MySQL 5.5 版本时引入 InnoDB 作为其默认的存储引擎。主要的区别有：</p><ul><li>是否支持行级锁：MyISAM 只有表级锁，而 InnoDB 默认为行级锁，支持表表级锁。</li><li>对事务和安全恢复的支持：MyISAM 强调性能，故不提供事务支持。InnoDB 支持事务，外部键等功能，具有事务、回滚和崩溃修复能力。</li><li>是否支持外键：MyISAM 不支持外键，InnoDB 支持。</li></ul><h3 id="MyISAM-与-InnoDB-关于锁方面的区别"><a href="#MyISAM-与-InnoDB-关于锁方面的区别" class="headerlink" title="MyISAM 与 InnoDB 关于锁方面的区别"></a>MyISAM 与 InnoDB 关于锁方面的区别</h3><ul><li><p>MyISAM 默认是表级锁，不支持行级锁。</p></li><li><p>InnoDB 默认是行级锁，也支持行级锁。</p></li><li><p>表级锁: MySQL 中锁定<strong>粒度最大</strong>的一种锁,对当前操作的整张表加锁,实现简单,资源消耗也比较少,加锁快,不会出现死锁。其锁定粒度最大,触发锁冲突的概率最高,并发度最低, MyISAM 和 InnoDB 引擎都支持表级锁。</p></li><li><p>行级锁: MySQL 中锁定<strong>粒度最小</strong>的一种锁,只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小,并发度高,但加锁的开销也最大,加锁慢,会出现死锁。</p></li></ul><p>手动锁定表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;<br><br><span class="hljs-keyword">lock</span> <span class="hljs-keyword">tables</span> table_name <span class="hljs-keyword">read</span> | write;<br><span class="hljs-keyword">unlock</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure><p>MyISAM 适合的场景</p><ul><li>频繁执行全表 count 语句。</li><li>对数据进行增删改的频率不高，查询非常频繁。</li><li>不需要事务。</li></ul><p>InnoDB 使合的场景</p><ul><li>数据增删改查都相当频繁。</li><li>可靠性要求比较高，需要使用事务。</li></ul><p>数据库锁的分类</p><ul><li>按锁的粒度划分，可分为表级锁、行级锁、页级锁</li><li>按锁级别划分，可分为共享锁、排它锁</li><li>按加锁方式划分，可分为自动锁、显示锁</li><li>按操作划分，可分为 DML 锁，DDL 锁</li><li>按使用方式划分，可分为乐观锁、悲观锁</li></ul><h3 id="数据事务的四大特性"><a href="#数据事务的四大特性" class="headerlink" title="数据事务的四大特性"></a>数据事务的四大特性</h3><ol><li><p>原子性（Atomicity）：事务是最小的执行单位,不允许分割。事务的原子性确保动作要么全部<br>完成,要么完全不起作用;</p></li><li><p>一致性（Consistency）：执行事务前后,数据保持一致，多个事务对同一个数据读取的结果是<br>相同的;</p></li><li><p>隔离性（Isolation）：并发访问数据库时，一个用户的事务不被其他事务所干扰,各并发事务<br>之间数据库是独立的;</p></li><li><p>持久性（Durability）：一个事务被提交之后。它对数据库中数据的改变是持久的,即使数据<br>库发生故障也不应该对其有任何影响。</p></li></ol><h3 id="事务并发访问引起的问题"><a href="#事务并发访问引起的问题" class="headerlink" title="事务并发访问引起的问题"></a>事务并发访问引起的问题</h3><ul><li>更新丢失（Lost to modify，MySQL 所有事务隔离级别均已避免此类问题）</li><li>脏读（Dirty read）：一个事务读到另一个事务未提交的事务。</li><li>不可重复读（Unrepeatable-read）：在一个事务下多次读取同一记录得到的数据不一致。</li><li>幻读（Phantom read）：事务 A 读取了多行，事务 B 在事务 A 未完成前对 A 读取范围内的数据做增删操作，导致事务 A 多次读取的记录数不一致的情况。</li></ul><h3 id="REPEATABLE-READ-如何避免幻读"><a href="#REPEATABLE-READ-如何避免幻读" class="headerlink" title="REPEATABLE READ 如何避免幻读"></a>REPEATABLE READ 如何避免幻读</h3><p>当前读和快照读</p><p>当前读：加了锁的 SQL 语句，读取的是记录的最新版本，且其它事务无法修改记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ... <span class="hljs-keyword">lock</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">share</span> <span class="hljs-keyword">mode</span>; <br><span class="hljs-keyword">select</span> ... <span class="hljs-keyword">from</span> <span class="hljs-keyword">update</span>;<br><span class="hljs-keyword">update</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">insert</span><br></code></pre></td></tr></table></figure><p>快照读：不加锁的非阻塞读，基于 MVCC 实现。</p><p>next-key 锁（行锁 + Gap 锁）</p><p>行锁</p><p>Gap 锁：如果 where 条件全部命中，则不会加 Gap 锁。</p><p>Gap 锁会用在非唯一索引和无索引的当前读中。</p><h2 id="数据库理论知识"><a href="#数据库理论知识" class="headerlink" title="数据库理论知识"></a>数据库理论知识</h2><h3 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h3>]]></content>
    
    
    <categories>
      
      <category>interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络相关知识总结</title>
    <link href="/2020/12/20/%E7%BD%91%E5%85%B3%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2020/12/20/%E7%BD%91%E5%85%B3%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172139.png" alt="计算机网络"></p><h2 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h2><p>国际标准化组织 ISO 提出的开放系统互联基本参考模型（Open Systems Interconnection Reference Model），简称为 OSI ，是一个概念模型。TCP/IP 是一个四层的体系结构，它包含应用层、 运输层、网际层和网络接口层。在阐述计算机网络原理时，通常综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172207.png" alt="image-20201223085010412"></p><h3 id="应用层（application-layer）"><a href="#应用层（application-layer）" class="headerlink" title="应用层（application layer）"></a>应用层（application layer）</h3><p>应用层的作用是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（主机中正在运行的程序）间通信和交互的规则。如域名系统 DNS、支持万维网的 HTTP 协议和支持电子邮件的 SMTP 协议。应用层交互的数据单元称为报文（message）。</p><h3 id="运输层（transport-layer）"><a href="#运输层（transport-layer）" class="headerlink" title="运输层（transport layer）"></a>运输层（transport layer）</h3><p>运输层的任务就是负责向两台主机中进程间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。运输层具有复用和分用两个功能。复用是指多个应用层进程可以同时使用下面运输层的服务，分用是指运输层把收到的信息分别交付给上面应用层中的相应进程。运输层主要使用 TCP 和 UDP 两种协议。</p><ul><li>传输控制协议 TCP（Transmission Control Protocol）：提供面向连接的、可靠的数据传输服务，其数据传输的单位是报文段。</li><li>用户数据报协议 UDP（User Datagram Protocol）：提供无连接的、尽最大努力交付（不保证数据传输可靠性）的数据传输服务，其数据传输的单位是用户数据报。</li></ul><h3 id="网络层（network-layer）"><a href="#网络层（network-layer）" class="headerlink" title="网络层（network layer）"></a>网络层（network layer）</h3><p>网络层主要有两个任务：</p><ol><li>为分组交换组网上的不同主机提供通信服务，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。</li><li>选择合适的路由，使源主机运输层所传下来的分组，能够通过网络中的路由器找到目的主机。</li></ol><h3 id="数据链路层（data-link-layer）"><a href="#数据链路层（data-link-layer）" class="headerlink" title="数据链路层（data link layer）"></a>数据链路层（data link layer）</h3><p>两台主机之间的数据传输，总是在一段一段的数据链路上传送的，这就需要专门的链路层协议。在两个相邻节点传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传递帧。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</p><h3 id="物理层（physical-layer）"><a href="#物理层（physical-layer）" class="headerlink" title="物理层（physical layer）"></a>物理层（physical layer）</h3><p>在物理层上传输的单位是比特。物理层需要考虑多大的电压表示 “1” 或 “0” ，以及接收方如何识别发送方所发送的比特。物理层还要确定连接电缆的插头应该有多少根引脚以及各引脚应如何连接。</p><h2 id="TCP-IP-协议族"><a href="#TCP-IP-协议族" class="headerlink" title="TCP/IP 协议族"></a>TCP/IP 协议族</h2><p>TCP/IP 的体系结构只有四层。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172109.png" alt="image-20201224220142706"></p><p>可以分层画出具体的协议来表示 TCP/IP 协议族，它的特点是上下两头大而中间小：应用层和网络接口层都有多种协议，而中间的 IP 层很小，上层的各种协议都向下汇聚到一个 IP 协议中。这表明：TCP/IP 协议可以为各式各样的应用提供服务，同时 TCP/IP 协议也允许 IP 协议在各式各样的网络构成的互联网上运行。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172347.png" alt="image-20201224220539509"></p><h2 id="TCP-基础知识"><a href="#TCP-基础知识" class="headerlink" title="TCP 基础知识"></a>TCP 基础知识</h2><h3 id="TCP-的主要特点"><a href="#TCP-的主要特点" class="headerlink" title="TCP 的主要特点"></a>TCP 的主要特点</h3><ul><li>TCP 是面向连接的运输层协议。应用程序在使用 TCP 协议之前，必须建立 TCP 连接。在传送完数据之后，必须释放已经建立的 TCP 连接。</li><li>每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的。</li><li>TCP 连接提供可靠交付的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达。</li><li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。</li><li>面向字节流。TCP 中的 流（stream）指的是流入到进程或从进程流出的字节序列。</li></ul><h3 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h3><p>TCP 报文段的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项。因此 TCP 首部的最小长度是 20 字节。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172357.png" alt="image-20201223220408024"></p><ul><li>源端口和目的端口：各占 2 个字节，分别写入源端口号和目的端口号。</li><li>序号：占 4 个字节。序号范围是 [0, 2^32 -1] ，且使用 mod 2^32 运算。TCP 是面向字节流的，在一个 TCP 连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在建立连接时设置。首部中的序号字段值则指的是本报文段所发送的数据的第一个字节序号。</li><li>确认号：占 4 个字节，是期望收到对方下一个报文段的第一个数据字节的编号。例如，B 正确收到了 A 发送的一个报文段，其序号字段值是 501，而数据长度是 200 字节，这表明 B 正确收到了 A 发送的到序号 700 为止的数据。因此，B 期望收到 A 的下一个数据序号是 701，于是 B 在发给 A 的确认报文段中把确认号设置为 701 。</li><li>数据偏移：占 4 位，指出 TCP 报文段的首部长度。“数据偏移”的单位是 32 位字（4 字节），4 位二进制最大表示十进制 15，因此“数据偏移”字段的最大值是 60 字节，这同时是 TCP 首部的最大长度。</li><li>保留：占 6 位，目前应置为 0 。</li><li>六个标志位：<ul><li>紧急 URG ：当 URG = 1 时，表明紧急字段有效。发送应用进程告诉系统 TCP 有紧急数据要传送，于是 TCP 就把紧急数据插入本报文段数据的最前面，而后面的数据仍是普通数据。这时需要与首部中紧急指针字段配合使用。</li><li>确认 ACK ： 仅当 ACK = 1 时确认号字段才有效。当 ACK = 0 时，确认号无效。TCP 规定，在建立连接后所有传送的报文段都必须把 ACK 置 1 。</li><li>推送 PSH ：发送方 TCP 把 PSH 置 1，并理立即创建一个报文段发送出去。接收方 TCP 收到 PSH = 1 的报文段，就尽快地交付接收应用程序。</li><li>复位 RST ：当 RST = 1 时，表明 TCP 连接中出现严重差错，必须释放连接，然后再重新建立运输连接。</li><li>同步 SYN ：在连接建立时用来同步序号。当 SYN = 1 而 ACK = 0 时，表明这是一个连接请求报文段。对方若同意建立连接，则在相应的报文段中使用 SYN = 1 和 ACK = 1 。因此，SYN 置为 1 就表示这是一个请求或接收建立连接报文。</li><li>终止 FIN ：用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已发送完毕，并要求释放运输连接。</li></ul></li><li>窗口：占 2 个字节。窗口值是 [0, 2^16 -1] 之间的整数。窗口指发送本报文段的一端的接收窗口。窗口值作为接收方让发送方设置其发送窗口的依据。</li><li>校验和：占 2 个字节。校验和字段校验的范围包括首部和数据这两部分。同样需要伪首部。</li><li>紧急指针：占 2 个字节。仅在 URG = 1 时才有意义。即使窗口为零时也可以发送紧急数据。</li><li>选项：长度可变，最长可达 40 字节。</li></ul><h3 id="TCP-可靠传输的工作原理"><a href="#TCP-可靠传输的工作原理" class="headerlink" title="TCP 可靠传输的工作原理"></a>TCP 可靠传输的工作原理</h3><p>TCP 所发送的报文段是交给 IP 层传送的，但是 IP 层只能提供最大努力服务，也就是说，TCP 下面的网络所提供的是不可靠的传输。TCP 必须采用适当的措施才能使得两个运输层之间的通信变得可靠。</p><h4 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h4><p>“停止等待协议”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</p><ol><li><p>无差错情况</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172406.png" alt="image-20201224221251156" style="zoom:50%;" /><p>A 发送分组 M1，发送完后暂停发送，等待 B 的确认。B 收到了 M1 就向 A 发送确认。A 在收到对 M1 的确认后，在发送下一个分组 M2 。同样，在收到 B 对 M2 的确认后，再发送 M3 。</p></li><li><p>出现差错</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172416.png" alt="image-20201224221531171" style="zoom:50%;" /><p>分组在传输过程中出现差错，B 在接收 M1 时检测到差错，就丢弃 M1，其它什么也不做（也不通知 A 收到有差错的分组）。也可能是 M1 在传输过程中丢失了，这时 B 什么都不知道。可靠传输协议中超时重传的设计是：A 只要超过一段时间仍然没有收到确认，就会认为刚才发送的分组丢失了，因而重传前面发送的分组。</p></li><li><p>确认丢失和确认迟到</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172430.png" alt="image-20201224222109531" style="zoom:67%;" /><p>A 发送分组后等待超时就会重传分组，B 在接受到重复分组时：丢弃重复的分组，对分组进行确认。A 在收到重复的确认时：收下后就丢弃。</p></li></ol><h4 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h4><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172443.png" alt="image-20201224222656888" style="zoom:67%;" /><p>发送方维持一个发送窗口，它的意义是：位于发送窗口的 5 个分组都可以连续发送出去，而不需要等待对方的确认。可以提高信道利用率。发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。</p><p>接收方一般都是采用累积确认的方式。不必对接收到的分组逐个发送确认，而是在收到几个分组后，对按顺序到达的最后一个分组发送确认，表示到这个分组为止的所有分组都已经正确接收了。</p><h3 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h3><ul><li><p>以字节为单位的滑动窗口</p></li><li><p>超时重传时间的选择</p></li><li><p>选择确认 SACK</p></li></ul><h2 id="TCP-滑动窗口协议"><a href="#TCP-滑动窗口协议" class="headerlink" title="TCP 滑动窗口协议"></a>TCP 滑动窗口协议</h2><p>TCP 的滑动窗口是以字节为单位的。</p><h3 id="发送方的滑动窗口"><a href="#发送方的滑动窗口" class="headerlink" title="发送方的滑动窗口"></a>发送方的滑动窗口</h3><ol><li><p>构建发送窗口</p><p>现假定 A 收到了 B 发来的确认报文段，其窗口值是 20 字节，确认号是 31 。根据这两个数据，A 可以构造出自己的发送窗口。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172450.png" alt="image-20201224223718570"></p><p>发送窗口表示：在没有收到 B 的确认的情况下，A 可以连续把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。</p><p>发送窗口后沿的后面部分表示已经发送且已收到确认。这些数据不需要再保留。而发送窗口前沿的前面部分表示不允许发送，因为接收方都没有为这部分数据保留临时存放的缓冲区。</p></li><li><p>部分发送但未收到确认</p><p>假定 A 发送了序号为 31 ~ 41 的数据。这时，发送窗口位置未改变，但发送窗口内靠后面有 11 个字节表示已发送但未收到确认。发送窗口内靠前面的 9 个字节是允许发送但尚未发送的。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172459.png" alt="image-20201224224655408" style="zoom:67%;" /></li><li><p>收到确认后发送窗口向前滑动</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172502.png" alt="image-20201224231519787" style="zoom:67%;" /><p>发送方 A 在收到 B 的确认号 33 后，就可以把发送窗口向前滑动 3 个序号，此时可发送的序号范围是 42 ~ 53 。</p></li></ol><h3 id="接收方的滑动窗口"><a href="#接收方的滑动窗口" class="headerlink" title="接收方的滑动窗口"></a>接收方的滑动窗口</h3><p>接收窗口的状态有三种：已经接收且已回复、允许接收但未收到、不允许接收。</p><ol><li><p>接收方接收窗口的初始状态</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172519.png" alt="image-20201224231946417"></p><p>B 的接收窗口大小是 20 ，在接收窗口外面，到 30 号为止的数据是已经发送过确认且上交给主机的。接收窗口内的序号 31 ~ 50 是允许接收的。</p><p>B 只能对按顺序收到的数据中的最高序号给予确认，因此 B 即使收到了序号为 32、33 的数据，因为序号为 31 的数据未收到，此时 B 对 A 的确认报文中的确认号仍然是 31 。</p></li><li><p>B 接收到序号连续的数据</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172614.png" alt="image-20201224233004635" style="zoom:67%;" /><p>当 B 接收到序号为 31 的数据，并把序号为 31 ~ 33 的数据交付主机，然后 B 删除这些数据。接着把接收窗口向前移动 3 个序号，同时给 A 发送确认，其中窗口值仍是 20 ，但确认号是 34 。</p></li></ol><h3 id="窗口与缓存的关系"><a href="#窗口与缓存的关系" class="headerlink" title="窗口与缓存的关系"></a>窗口与缓存的关系</h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172633.png" alt="image-20201224233353821" style="zoom:67%;" /><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2><p>TCP 是面向链接的协议。运输连接是用来传送 TCP 报文的。TCP 运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。因此，运输连接就有三个阶段，即：建立连接、数据传输和释放连接。在 TCP 连接建立过程中要解决以下三个问题：</p><ol><li>要使每一方能够明知对方的存在。</li><li>要允许双方协商一些参数。</li><li>能够对运输实体资源进行分配。 </li></ol><p>TCP 连接的建立采用客户端服务器方式。主动发起连接建立的应用进程叫做客户端，而被动等待连接建立的应用进程叫做服务器。</p><h3 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h3><p>TCP 建立连接的过程叫做握手，握手需要在客户端和服务器之间交换三个 TCP 报文段。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172716.png" alt="image-20201226143243361" style="zoom:67%;" /><p>最初两端的 TCP 进程都处于 CLOSED 状态。一开始，B 的 TCP 服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。然后服务器就处于 LISTEN 状态，等待客户的连接请求。如有，即作出相应。A 的 TCP 客户进程也是首先创建传输控制模块 TCB。</p><ol><li><p>在打算建立 TCP 连接时，A 向 B 发出连接请求报文段，这时首部中的同步位 SYN = 1，同时选择一个初始序号 seq = x 。TCP规定，SYN 报文段不能携带数据，但要消耗一个序号。这时，TCP 客户端进程进入 SYN-SENT 状态。</p></li><li><p>B 在接受到连接请求报文段后，如果同意建立连接，则向 A 发送确认。在确认报文段中应把 SYN 位和 ACK 位都置 1，确认号是 ack = x + 1，同时也为自己选择一个初始序号 seq = y。这个报文段也不能携带数据，但同样需要消耗掉一个序号。这时 TCP 服务器进程进入 SYN-RCVD 状态。</p></li><li><p>TCP 客户端进程收到 B 的确认后，还要向 B 给出确认。确认报文段的 ACK 置 1 。确认号 ack = y + 1，而自己的序号 seq = x + 1 。TCP 的标准规定， ACK 报文段可以携带数据。但如果不携带数据则不消耗序号，下一个数据报文段的序号仍是 seq = x + 1 。这时，TCP 连接已经建立，A 进入 ESTABLISHED 状态。</p><p>当 B 收到 A 的确认后，也进入 ESTABLISHED 状态。</p></li></ol><h4 id="为什么客户端-TCP-最后还要发送一次确认"><a href="#为什么客户端-TCP-最后还要发送一次确认" class="headerlink" title="为什么客户端 TCP 最后还要发送一次确认"></a>为什么客户端 TCP 最后还要发送一次确认</h4><p>主要是为了防止已失效的连接请求报文段突然又传到了服务器 TCP，因而产生错误。即 A 发出的第一个连接请求报文段并没有丢失，而是在某些网络节点长时间滞留了，以至延误到连接释放以后的某个时间才来到 B。本来这是一个早就失效的报文段。但 B 收到此失效的连接请求报文段后，就误认为是 A 又发出一次新的连接请求。于是就向 A 发出确认报文段，同意建立连接。假定不采用报文握手，那么只要 B 发出确认，新的连接就建立了。但是实际上 A 并没有发出建立连接的请求，因此不会理睬 B 的确认报文，也不会向 B 发送数据。导致 B 一直等待，浪费资源。</p><h3 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h3><p>数据传输结束后，通信双方都可以释放连接。现在 A 和 B 都处于 ESTABLISHED 状态。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172724.png" alt="image-20201226150209725" style="zoom:67%;" /><ol><li><p>A 的应用进程先向其 TCP 进程发出连接释放报文段，再停止发送数据，主动关闭 TCP 连接。</p><p>A 把连接释放报文段首部的终止控制位 FIN 置 1 ， 其序号 seq = u 。这时 A 进入 FIN-WAIT1 状态，等待 B 的确认。TCP 规定，FIN 报文段即使不携带数据，也要消耗一个序号。</p></li><li><p>B 收到连接释放报文段后即发出确认，确认号 ack = u + 1，而确认报文段自己的序号时 seq = v 。然后 B 就进入 CLOSE-WAIT 状态。TCP 服务器进程这时应通知高层应用进程，因而从 A 到 B 这个方向的连接就释放了，这时 TCP 连接处于半关闭状态，即使 A 已经没有数据要发送来了，但 B 若发送数据，A 仍要接收，即从 B 到 A 这个方向的连接并未关闭。</p><p>A 收到来自 B 的确认后，就进入 FIN-WAIT2 状态.等待 B 发出连接释放报文段。</p></li><li><p>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。这时 B 发出的连接释放报文段把 FIN 置为 1 。假定 B 的序号为 seq = w，B 还必须重复上次已发送过的确认号 ack = u + 1 。这时 B 就进入 LAST-ACK 状态，等待 A 的确认。</p></li><li><p>A 在收到 B 的连接释放报文段后，必须对此发出确认。在确认报文段中把 ACK 置 1，确认号 ack = w + 1，而自己的序号是 seq = u + 1 。然后进入到 TIME-WAIT 状态，现在 TCP 连接还没有释放掉，必须经过时间等待计时器设置的时间 2MSL后，A 才进入到CLOSED 状态。因此，从 A 进入到 TIME-WAIT 状态后，要经过 2MSL 时间才能进入到 CLOSED 状态，才能开始建立下一个新的连接。当 A 撤销相应的 TCB 后，就结束了这次的 TCP 连接。</p><p>B 在收到 A 的确认后进入 CLOSED 状态。</p><p>时间 MSL 叫做最长报文段寿命，TCP 建议设为 2 分钟。Linux 服务器默认设置为 60 秒。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> xianglin @ manjaro <span class="hljs-keyword">in</span> ~ [15:24:57] </span><br><span class="hljs-meta">$</span><span class="bash"> cat /proc/sys/net/ipv4/tcp_fin_timeout </span><br>60<br></code></pre></td></tr></table></figure></li></ol><h4 id="为什么在-TIME-WAIT-状态要等待-2MSL-的时间"><a href="#为什么在-TIME-WAIT-状态要等待-2MSL-的时间" class="headerlink" title="为什么在 TIME-WAIT 状态要等待 2MSL 的时间"></a>为什么在 TIME-WAIT 状态要等待 2MSL 的时间</h4><ol><li>为了保证 A 发送的最后一个确认释放连接的 ACK 报文能到达 B。这个报文可能丢失，因而处于 LAST-ACK 状态的 B 收不到对已发送的 FIN + ACK 报文段的确认会重传这个 FIN + ACK 报文段，而 A 就能在 2MSL 时间内收到这个重传的 FIN + ACK 报文段。A 重新确认，重新启动 2MSL 计时器。</li><li>A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续时间内所产生的报文段都从网络中消失。这样就避免了下一次新的连接中不会出现这种旧的连接请求报文段。</li></ol><h4 id="查看-Linux-服务器下-TCP-连接状态"><a href="#查看-Linux-服务器下-TCP-连接状态" class="headerlink" title="查看 Linux 服务器下 TCP 连接状态"></a>查看 Linux 服务器下 TCP 连接状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ netstat -n | awk &#x27;/^tcp/&#123;++S[$NF]&#125;END&#123;for(a in S) print a,S[a]&#125;&#x27;<br>ESTABLISHED 17<br>FIN_WAIT1 1<br>TIME_WAIT 2<br></code></pre></td></tr></table></figure><h2 id="UDP-基础知识"><a href="#UDP-基础知识" class="headerlink" title="UDP 基础知识"></a>UDP 基础知识</h2><h3 id="UDP-的主要特点"><a href="#UDP-的主要特点" class="headerlink" title="UDP 的主要特点"></a>UDP 的主要特点</h3><ul><li>UDP 是无连接的，即发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延。</li><li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的连接状态。</li><li>UDP 是面向报文的。UDP 对应用层交下来的报文，既不合并，也不拆分。在添加首部后就向下交付给 IP 层。</li><li>UDP 没有拥塞控制，网络出现拥塞不会使源主机的发送速率降低。适用于 IP 电话、实时视频会议、视频直播等场景。</li><li>UDP 支持一对一、一对多、多对多的交互通信。</li><li>UDP 的首部开销小，只有 8 个字节。</li></ul><h3 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h3><p>用户数据报 UDP 有两个字段：数据字段和首部字段。首部字段占用 8 个字节，由四个字段组成。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172735.png" alt="image-20201223214151844"></p><ul><li>源端口：源端口号，在需要对方回信时选用，不需要时可用全 0 。</li><li>目的端口：目的端口号，在终点交付报文时必须使用。</li><li>长度：UDP 用户数据报的长度，其值最小是 8 （仅有首部）。</li><li>校验和：检测 UDP 用户数据报在传输中是否有错，有错就丢弃。</li></ul><p><em>伪首部用于 UDP 计算校验和，既不向下传送也不向上递交</em></p><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>HTTP 协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。HTTP 是面向事务的应用层协议，它是万维网上能够可靠地交换文件的重要基础。HTTP 使用了面向连接的 TCP 作为运输层协议，保证了数据的可靠传输。HTTP 不必考虑数据在传输过程中被丢弃后又怎样重传的问题。但是，HTTP 协议本身是无连接的，HTTP 协议是无状态的。</p><p>HTTP/1.1 协议的持续连接有两种工作方式。即非流水线方式和流水线方式。非流水线方式是指客户端在收到前一个相应后才能发出下一请求。流水线方式是指客户端在收到 HTTP 的相应报文之前就能够接着发送新的请求报文。</p><h3 id="HTTP-报文格式"><a href="#HTTP-报文格式" class="headerlink" title="HTTP 报文格式"></a>HTTP 报文格式</h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172751.png" alt="img" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172802.png" alt="Response HTTP响应报文格式" style="zoom:67%;" /><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><table><thead><tr><th align="center"></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td align="center">1XX</td><td>Information（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td align="center">2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td align="center">3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td align="center">4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td align="center">5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器无法处理请求</td></tr></tbody></table><ul><li>2XX 成功<ul><li><strong>200 OK</strong>：表示从客户端发来的请求在服务器被正常处理了。</li><li>204 No Content：表示服务器接收的请求已被成功处理，但在返回的响应报文中不含实体的主体部分。</li><li>206 Partial Content：表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 <code>Content-Range</code> 指定范围的实体内容。</li></ul></li><li>3XX<ul><li>301 moved Permanently：永久性重定向，表示资源已被分配新的 URI。</li><li>302 Found：临时性重定向。</li><li>304 Not Modified：服务器资源未改变，可以直接使用客户端未过期的缓存。</li></ul></li><li>4XX<ul><li><strong>400 Bad Request</strong>：表示请求报文中存在语法错误。</li><li><strong>401 Unauthorized</strong>：表示发送的请求需要通过有 HTTP 认证的认证信息。</li><li><strong>403 Forbidden</strong>：表示对请求资源的访问被服务器拒绝了。</li><li><strong>404 Not Found</strong>：表示服务器上无法找到请求的资源。</li></ul></li><li>5XX<ul><li><strong>500 Internal Server Error</strong>：表示服务端在执行请求时发生了错误。</li><li><strong>503 Service Unavailable</strong>：表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul></li></ul><h3 id="GET-请求与-POST-请求的区别"><a href="#GET-请求与-POST-请求的区别" class="headerlink" title="GET 请求与 POST 请求的区别"></a>GET 请求与 POST 请求的区别</h3><ul><li>从 HTTP 报文层面：GET 请求将信息附加在 URL 上，POST 请求一般是将请求参数放在报文体中。</li><li>数据库层面：GET 请求符合幂等性和安全性。</li><li>GET 请求可以被缓存、被存储，POST 请求不行。</li></ul><p>GET 和 POST 到底有什么区别？ - 大宽宽的回答 - 知乎 <a href="https://www.zhihu.com/question/28586791/answer/767316172">https://www.zhihu.com/question/28586791/answer/767316172</a></p><h3 id="Cookis-和-Session-的区别"><a href="#Cookis-和-Session-的区别" class="headerlink" title="Cookis 和 Session 的区别"></a>Cookis 和 Session 的区别</h3><p>HTTP 是无状态的协议。</p><p>Cookies：</p><ul><li>是由服务器发给客户端的特殊信息，以文本的形式存放在客户端。</li><li>客户端再次请求的时候，会把 Cookies 回发。</li><li>服务器接收到请求后会解析 Cookies 相关的内容。</li></ul><p>Session：</p><ul><li>服务端的机制，在服务器上保存会话信息。</li><li>解析客户端请求并操作 sessionId，按需保存状态信息。</li></ul><p>Session 的实现方式</p><ul><li>使用 Cookies 来实现：JSESSIONID。</li><li>使用 URL 回写来实现。</li></ul><p>主要区别</p><ul><li>Cookies 数据存放在客户端的浏览器上，Session 数据放在服务器上</li><li>Session 相对于 Cookies 更安全</li><li>应当使用 Cookies 来减轻服务器的开销</li></ul><h3 id="HTTP-和-HTTPS-协议的区别"><a href="#HTTP-和-HTTPS-协议的区别" class="headerlink" title="HTTP 和 HTTPS 协议的区别"></a>HTTP 和 HTTPS 协议的区别</h3><p>SSL（Security Sockets Layer）</p><ul><li>为网络通信提供安全及数据完整性的一种安全协议。</li><li>是操作系统对外的 API，SSL3.0 之后更名为 TLS。</li><li>采用身份验证和数据加密保证网络通信的安全和数据完整性。</li></ul><p>HTTPS 数据传输流程</p><ul><li>浏览器将支持的加密算法信息发送给服务器；</li><li>服务器选择一套浏览器支持的加密算法，以证书的形式回发给浏览器；</li><li>浏览器验证证书合法性，并结合证书公钥加密信息并发送给服务器；</li><li>服务器使用私钥解密信息，验证哈希，加密响应消息回发给浏览器；</li><li>浏览器解密响应消息，并对消息进行验真，之后进行加密交互数据。</li></ul><p>HTTPS 和 HTTP 协议的区别</p><ul><li>HTTPS 需要到 CA 申请证书。</li><li>HTTPS 密文传输，HTTP 明文传输。</li><li>连接方式不同，HTTPS 默认使用 443 端口，HTTP 使用 80 端口。</li><li>HTTPS = HTTP + 加密 + 认证 + 完整性保护。</li></ul><p>HTTPS 存在的问题：浏览器默认填充 http://，请求需要进行跳转，有被劫持的风险</p><h3 id="浏览器地址栏键入-URL，按下回车之后经历的流程"><a href="#浏览器地址栏键入-URL，按下回车之后经历的流程" class="headerlink" title="浏览器地址栏键入 URL，按下回车之后经历的流程"></a>浏览器地址栏键入 URL，按下回车之后经历的流程</h3><ol><li>DNS 解析</li><li>TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析并渲染页面</li><li>关闭连接</li></ol><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket 是对 TCP/IP 协议的抽象，是操作系统对外开放的接口。</p><h3 id="Socket-通信过程"><a href="#Socket-通信过程" class="headerlink" title="Socket 通信过程"></a>Socket 通信过程</h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202102/172823.jpg" alt="Socket通信过程" style="zoom:50%;" /><h3 id="Java-使用-Socket-通信"><a href="#Java-使用-Socket-通信" class="headerlink" title="Java 使用 Socket 通信"></a>Java 使用 Socket 通信</h3><p>使用 Socket 编写网络应用程序，分别用 TCP 和 UDP 的方式实现。</p><ul><li><p>使用 TCP 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 Sockets 实现 Tcp服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个Sockets服务，并绑定在本机的9509端口上</span><br>            ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9509</span>);<br>            <span class="hljs-comment">// 循环监听客户端链接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-comment">// 有客户端链接才返回</span><br>                Socket socket = serverSocket.accept();<br>                <span class="hljs-comment">// 新建一个服务线程处理任务</span><br>                <span class="hljs-keyword">new</span> TcpService(socket).start();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Socket socket;<br><br>    TcpService(Socket socket) &#123;<br>        <span class="hljs-keyword">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取socket对应的输入流和输出流</span><br>            InputStream inputStream = <span class="hljs-keyword">this</span>.socket.getInputStream();<br>            OutputStream outputStream = <span class="hljs-keyword">this</span>.socket.getOutputStream();<br>            <span class="hljs-comment">// 读取客户端发送的数据</span><br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> read = inputStream.read(bytes);<br>            String content = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, read);<br>            System.out.println(<span class="hljs-string">&quot;收到客户端信息：&quot;</span> + content);<br>            <span class="hljs-comment">// 返回字符串长度</span><br>            outputStream.write(String.valueOf(content.length()).getBytes(StandardCharsets.UTF_8));<br>            <span class="hljs-comment">// 关闭连接资源</span><br>            outputStream.close();<br>            inputStream.close();<br>            <span class="hljs-keyword">this</span>.socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Sockets 完成Tcp客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建Socket对象，指定ip地址和端口</span><br>            Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9509</span>);<br>            <span class="hljs-comment">// 使用输出流向服务端发送数据</span><br>            OutputStream outputStream = socket.getOutputStream();<br>            outputStream.write(<span class="hljs-string">&quot;Hello World!&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>            <span class="hljs-comment">// 使用输入流接收服务端返回的数据</span><br>            InputStream inputStream = socket.getInputStream();<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> read = inputStream.read(bytes);<br>            System.out.println(<span class="hljs-string">&quot;收到服务端回应：&quot;</span> + <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, read));<br>            <span class="hljs-comment">// 关闭连接资源</span><br>            outputStream.close();<br>            inputStream.close();<br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 UDP 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Socket实现UDP服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 为本机创建一个DatagramSocket对象，并绑定到9509端口</span><br>            DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9509</span>);<br>            <span class="hljs-comment">// 创建DatagramPacket对应接收客户端发送的数据</span><br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            DatagramPacket datagramPacket = <span class="hljs-keyword">new</span> DatagramPacket(bytes, bytes.length);<br>            <span class="hljs-comment">// 将客户端发送的数据保存到DatagramPacket对象中</span><br>            datagramSocket.receive(datagramPacket);<br>            <span class="hljs-comment">// 打印内容</span><br>            <span class="hljs-keyword">byte</span>[] data = datagramPacket.getData();<br>            String content = <span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, datagramPacket.getLength());<br>            System.out.println(<span class="hljs-string">&quot;接收客户端请求：&quot;</span> + content);<br><br>            <span class="hljs-comment">// 创建DatagramPacket对象，封装需要发送给客户端的内容</span><br>            <span class="hljs-keyword">byte</span>[] sendBytes = String.valueOf(content.length()).getBytes(StandardCharsets.UTF_8);<br>            <span class="hljs-comment">// 获取客户端的地址和端口</span><br>            DatagramPacket datagramPacket1 = <span class="hljs-keyword">new</span> DatagramPacket(sendBytes, sendBytes.length, datagramPacket.getAddress(), datagramPacket.getPort());<br>            <span class="hljs-comment">// 将数据发送给客户端</span><br>            datagramSocket.send(datagramPacket1);<br>            datagramSocket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Socket实现UDP客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 客户端发送给服务端的内容</span><br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">&quot;Hello World!&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>            <span class="hljs-comment">// 获取本机对应的InetAddress对象</span><br>            InetAddress localHost = InetAddress.getLocalHost();<br>            <span class="hljs-comment">// 创建DatagramSocket对象</span><br>            DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket();<br>            <span class="hljs-comment">// 将需要发送的内容封装成DatagramPacket对象，并指定服务端的ip和端口</span><br>            DatagramPacket datagramPacket = <span class="hljs-keyword">new</span> DatagramPacket(bytes, bytes.length, localHost, <span class="hljs-number">9509</span>);<br>            <span class="hljs-comment">// 发送数据给服务端</span><br>            datagramSocket.send(datagramPacket);<br><br>            <span class="hljs-comment">// 接收服务端的返回</span><br>            <span class="hljs-keyword">byte</span>[] receive = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-comment">// 创建DatagramPacket对象存储服务端返回的数据</span><br>            DatagramPacket datagramPacket1 = <span class="hljs-keyword">new</span> DatagramPacket(receive, receive.length);<br>            <span class="hljs-comment">// 接收数据，并存储到DatagramPacket中</span><br>            datagramSocket.receive(datagramPacket1);<br>            <span class="hljs-comment">// 打印服务端返回的内容</span><br>            System.out.println(<span class="hljs-string">&quot;服务端返回：&quot;</span> + <span class="hljs-keyword">new</span> String(datagramPacket1.getData(), <span class="hljs-number">0</span>, datagramPacket1.getLength()));<br>            datagramSocket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper 基础</title>
    <link href="/2020/12/13/Zookeeper/"/>
    <url>/2020/12/13/Zookeeper/</url>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="理解-Zookeeper"><a href="#理解-Zookeeper" class="headerlink" title="理解 Zookeeper"></a>理解 Zookeeper</h2><h3 id="为什么需要-Zookeeper"><a href="#为什么需要-Zookeeper" class="headerlink" title="为什么需要 Zookeeper"></a>为什么需要 Zookeeper</h3><ul><li>用起来像单机但是又比单机更可靠</li><li>类似于 Leader 在团队里面的协调作用</li><li>在多节点中尽量压缩数据同步时间</li></ul><h3 id="Zookeeper-是什么"><a href="#Zookeeper-是什么" class="headerlink" title="Zookeeper 是什么"></a>Zookeeper 是什么</h3><ul><li>Zookeeper 是开源的高性能的分布式应用协调系统，一个高性能的分布式数据一致性解决方案</li><li>它的设计目标是将那些复杂的容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户。</li></ul><h3 id="Zookeeper-的特点"><a href="#Zookeeper-的特点" class="headerlink" title="Zookeeper 的特点"></a>Zookeeper 的特点</h3><ul><li>顺序一致性：从同一客户端发起的事务请求，会严格的按照顺序被应用到 Zookeeper 服务器中</li><li>原子性：所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的</li><li>单一视图：无论连接哪一个 Zookeeper 节点，看到的服务端数据模型都是一致性的</li><li>可靠性：一旦一次更改请求被应用，更改的结果就会被持久化，直到被下一次更改覆盖</li><li>及时性</li></ul><h3 id="Zookeeper-与-CAP-的关系"><a href="#Zookeeper-与-CAP-的关系" class="headerlink" title="Zookeeper 与 CAP 的关系"></a>Zookeeper 与 CAP 的关系</h3><ul><li>CP：一致性+分区容错性</li><li>任何时候都能得到一致的数据结果，同时系统对网络具有容错性</li><li>它不能保证每次服务请求的可用性</li></ul><h3 id="Zookeeper-的作用"><a href="#Zookeeper-的作用" class="headerlink" title="Zookeeper 的作用"></a>Zookeeper 的作用</h3><ul><li>分布式服务注册与订阅</li><li>统一配置文件</li><li>生成分布式唯一 ID：通过 Zookeeper 的顺序节点生成全局唯一ID</li><li>Master 节点选举</li><li>分布式锁：通过创建唯一节点获得分布式锁，当获取锁的一方执行完代码或挂掉后就释放锁</li><li>数据发布/订阅：通过 Watcher 机制可以很方便的实现数据的发布与订阅。当你将数据发布到 Zookeeper 被监听的节点上，其它机器可以通过监听 Zookeeper 上节点的变化来实现配置的</li></ul><h2 id="Zookeeper-的重要概念"><a href="#Zookeeper-的重要概念" class="headerlink" title="Zookeeper 的重要概念"></a>Zookeeper 的重要概念</h2><h3 id="数据模型-DataModel"><a href="#数据模型-DataModel" class="headerlink" title="数据模型 DataModel"></a>数据模型 DataModel</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/172917.png" alt="image-20201213141229663"></p><ul><li>Zookeeper 数据模型采用层次化的多叉树结构，每个节点上可以存储数据（数字、字符串、二进制序列）</li><li>每个节点还可以用于多个子节点，最上层是根节点，用<code>/</code>表示</li><li>每个数据节点在 Zookeeper 中被称为 znode，它是 Zookeeper 中数据的最小单元</li><li>每个 znode 都有一个唯一的路径标识</li></ul><h3 id="数据节点-Znode"><a href="#数据节点-Znode" class="headerlink" title="数据节点 Znode"></a>数据节点 Znode</h3><h3 id="znode-的四种类型"><a href="#znode-的四种类型" class="headerlink" title="znode 的四种类型"></a>znode 的四种类型</h3><ul><li>持久节点（PRESISTENT）：一旦创建就一直存在即是 Zookeeper 集群宕机，直到被删除</li><li>临时节点（EPHEMERAL）：临时节点与客户端会话（Session）绑定，会话消失则节点消失。临时节点只能做叶子节点，不能创建子节点</li><li>持久顺序节点（PRESISTENT_SEQUENTIAL）：子节点的名称具有顺序</li><li>临时顺序节点（EPHEMERAL_SEQUENTIAL）：子节点的名称具有顺序</li></ul><h3 id="Znode-的数据结构"><a href="#Znode-的数据结构" class="headerlink" title="Znode 的数据结构"></a>Znode 的数据结构</h3><p>每个 znode 由两部分组成</p><ul><li>stat：状态信息</li><li>data：节点存放的数据的具体内容</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[zk: 127.0.0.1:2181(CONNECTED) 6] get /zk_node<br>content<br><br>[zk: 127.0.0.1:2181(CONNECTED) 7] stat /zookeeper<br><span class="hljs-meta">#</span><span class="bash"> create ZXID 数据节点被创建时的事务 ID</span><br>cZxid = 0x0<br><span class="hljs-meta">#</span><span class="bash"> create time 节点的创建时间</span><br>ctime = Thu Jan 01 08:00:00 CST 1970<br><span class="hljs-meta">#</span><span class="bash"> modified ZXID 节点最后一次更新时的事务 ID</span><br>mZxid = 0x0<br><span class="hljs-meta">#</span><span class="bash"> modified time 节点最后一次更新时间</span><br>mtime = Thu Jan 01 08:00:00 CST 1970<br><span class="hljs-meta">#</span><span class="bash"> 该节点的子节点列表最后一次修改时的事务 ID，只有子节点列表变更才会更新 pZxid，子节点内容变更不会更新</span><br>pZxid = 0x0<br><span class="hljs-meta">#</span><span class="bash"> 子节点版本号，当前节点的子节点每次变化时值增加 1</span><br>cversion = -2<br><span class="hljs-meta">#</span><span class="bash"> 数据节点内容版本号，节点创建时为 0，每更新一次节点内容（无论数据有无变化）该版本号值增加 1</span><br>dataVersion = 0<br><span class="hljs-meta">#</span><span class="bash"> 节点的 ACL 版本号，表示该节点 ACL 信息变更次数</span><br>aclVersion = 0<br><span class="hljs-meta">#</span><span class="bash"> 创建该临时节点的会话 sessionId，如果当前节点为持久节点，则 ephemeralOwner = 0</span><br>ephemeralOwner = 0x0<br><span class="hljs-meta">#</span><span class="bash"> 数据节点内容长度</span><br>dataLength = 0<br><span class="hljs-meta">#</span><span class="bash"> 当前节点的子节点个数</span><br>numChildren = 2<br></code></pre></td></tr></table></figure><h3 id="权限控制-ACL"><a href="#权限控制-ACL" class="headerlink" title="权限控制 ACL"></a>权限控制 ACL</h3><p>Zookeeper 采用 ACL（AccessControlLists）策略进行权限控制，类似于 UNIX文件系统的权限控制</p><p>对于 znode 操作的权限，Zookeeper 提供了一下 5 种：</p><ul><li>CREATE：能够创建子节点</li><li>READ：能回去节点数据和列出其子节点</li><li>WRITE：能设置/更新节点数据</li><li>DELETE：能删除子节点</li><li>ADMIN：能设置节点 ACL 的权限</li></ul><p>对于身份认证，提供了一下几种方式：</p><ul><li>world：默认方式，任何用户都可以无条件访问</li><li>auth：代表任何已认证的用户</li><li>digest：用户名:密码认证方式：username:password</li><li>IP：对指定 IP 进行限制</li></ul><h3 id="Watcher-事件监听器"><a href="#Watcher-事件监听器" class="headerlink" title="Watcher 事件监听器"></a>Watcher 事件监听器</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/180938.png" alt="img"></p><ul><li>Watcher 事件监听器，是 Zookeeper 中一个很重要的特征。</li><li>Zookeeper 允许用户在指定的节点上注册一些 Watcher，并且在一些特定事件触发时，Zookeeper 服务端会将事件通知到感兴趣的客户端上去，该特性是 Zookeeper 实现分布式协调服务的重要特性。</li><li>使用场景：统一资源配置</li><li>Watcher 事件类型<ul><li>NodeCreated</li><li>NodeDeleted</li><li>NodeDataChanged</li><li>NodeChildrenChanged</li></ul></li></ul><h3 id="会话-Session"><a href="#会话-Session" class="headerlink" title="会话 Session"></a>会话 Session</h3><ul><li>Session 可以看做是 Zookeeper 服务器与客户端之间的一个 TCP 长连接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向 Zookeeper 服务器发送请求并接受响应，同时还能够通过该连接接受来自服务器的 Watcher 事件通知。</li><li>Session 有一个属性叫做 sessionTimeout，代表会话的超时时间。客户端断开连接后，只要在 sessionTimeout 规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话仍然有效。</li><li>在为客户端创建会话之前，服务端首先会为每个客户端都分配一个 sessionID，sessionID 是 Zookeeper 会话的一个重要标识，是全局唯一的。</li></ul><h2 id="Zookeeper-集群"><a href="#Zookeeper-集群" class="headerlink" title="Zookeeper 集群"></a>Zookeeper 集群</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/181709.png" alt="image-20201213134852212"></p><ul><li>每个 Server 代表一个运行 Zookeeper 服务的服务器。组成 Zookeeper 服务的服务器会在内存中维护当前的服务器状态，并且每台服务器之间都互相保持着通信。</li><li>集群间通过 ZAB 协议（Zookeeper Atomic BroadCast）来保持数据的一致性。</li></ul><h3 id="Zookeeper-集群角色"><a href="#Zookeeper-集群角色" class="headerlink" title="Zookeeper 集群角色"></a>Zookeeper 集群角色</h3><p>Zookeeper 没有选择传统的 Master/Slave 概念，而是引入了 Leader、Follower和 Observer 三种角色。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/182405.png" alt="zookeeper集群中的角色.png"></p><ul><li>Zookeeper 集群中所有机器通过一个 Leader 选举过程来选定一台称为 Leader 的机器。</li><li>Leader 可以为客户端提供读写服务。除 Leader 外，Follower 和 Observer 都只能提供读服务。</li><li>Follower 和 Observer 的唯一区别在于 Observer 集群不参与 Leader 的选举过程，也不参与写操作的“过半写成功”策略。</li></ul><p>当 Leader 服务器出现异常时，就会进入 Leader 选举过程，这个过程会选举产生新的 Leader 服务器。</p><h3 id="Zookeeper-集群中服务器状态"><a href="#Zookeeper-集群中服务器状态" class="headerlink" title="Zookeeper 集群中服务器状态"></a>Zookeeper 集群中服务器状态</h3><ul><li>LOOKING：寻找 Leader</li><li>LEADING：Leader 状态，对应节点为 Leader</li><li>FOLLOWING：Follower 状态，对应节点为 Follower</li><li>OBSERVING：Observer 状态，对应节点为 Observer，该节点不参与 Leader 选举</li></ul><h3 id="Zookeeper-集群最好是基数台"><a href="#Zookeeper-集群最好是基数台" class="headerlink" title="Zookeeper 集群最好是基数台"></a>Zookeeper 集群最好是基数台</h3><ul><li>Zookeeper 集群在宕机几个 Zookeeper 服务器后，如果剩下的 Zookeeper 服务器个数大于宕机个数的话整个 Zookeeper 才依然可用。</li></ul><h2 id="ZAB-协议和-Paxos-算法"><a href="#ZAB-协议和-Paxos-算法" class="headerlink" title="ZAB 协议和 Paxos 算法"></a>ZAB 协议和 Paxos 算法</h2><h3 id="ZAB-协议"><a href="#ZAB-协议" class="headerlink" title="ZAB 协议"></a>ZAB 协议</h3><ul><li>ZAB（Zookeeper Atomic BroadCast 原子广播）协议是为分布式协调服务 Zookeeper 专门设计的一种支持崩溃恢复的原子广播协议。</li><li>在 Zookeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性。基于该协议，Zookeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</li></ul><h3 id="ZAB-协议的两种基本模式"><a href="#ZAB-协议的两种基本模式" class="headerlink" title="ZAB 协议的两种基本模式"></a>ZAB 协议的两种基本模式</h3><ul><li>崩溃恢复：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。</li><li>消息广播：当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</li></ul><h2 id="安装、配置-Zookeeper"><a href="#安装、配置-Zookeeper" class="headerlink" title="安装、配置 Zookeeper"></a>安装、配置 Zookeeper</h2><h3 id="CentOS-下安装-Zookeeper"><a href="#CentOS-下安装-Zookeeper" class="headerlink" title="CentOS 下安装 Zookeeper"></a>CentOS 下安装 Zookeeper</h3><ul><li><p>使用 wget 命令下载 Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf apache-zookeeper-3.6.2-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>启动停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  bin ./zkServer.sh start<br>/usr/bin/java<br>ZooKeeper JMX enabled by default<br>Using config: /root/zookeeper/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg<br>Starting zookeeper ... STARTED<br>➜  bin ./zkServer.sh stop<br>/usr/bin/java<br>ZooKeeper JMX enabled by default<br>Using config: /root/zookeeper/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg<br>Stopping zookeeper ... STOPPED<br></code></pre></td></tr></table></figure></li></ul><h2 id="Zookeeper-的使用"><a href="#Zookeeper-的使用" class="headerlink" title="Zookeeper 的使用"></a>Zookeeper 的使用</h2><h3 id="Zookeeper-的常用命令"><a href="#Zookeeper-的常用命令" class="headerlink" title="Zookeeper 的常用命令"></a>Zookeeper 的常用命令</h3><ul><li><p>启动 Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  apache-zookeeper-3.6.2-bin bin/zkServer.sh start<br>/usr/bin/java<br>ZooKeeper JMX enabled by default<br>Using config: /root/zookeeper/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg<br>Starting zookeeper ... STARTED<br></code></pre></td></tr></table></figure></li><li><p>连接到 Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  apache-zookeeper-3.6.2-bin bin/zkCli.sh -server 127.0.0.1:2181<br>/usr/bin/java<br>Connecting to 127.0.0.1:2181<br><span class="hljs-meta">#</span><span class="bash"> ....</span><br>WatchedEvent state:SyncConnected type:None path:null<br>[zk: 127.0.0.1:2181(CONNECTED) 0]<br></code></pre></td></tr></table></figure></li><li><p>查看节点<code>ls</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[zk: 127.0.0.1:2181(CONNECTED) 1] ls /<br>[zookeeper]<br><br>[zk: 127.0.0.1:2181(CONNECTED) 2] ls /zookeeper<br>[config, quota]<br></code></pre></td></tr></table></figure></li><li><p>查看状态<code>stat</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[zk: 127.0.0.1:2181(CONNECTED) 3] stat /<br>cZxid = 0x0<br>ctime = Thu Jan 01 08:00:00 CST 1970 # 创建时间<br>mZxid = 0x0<br>mtime = Thu Jan 01 08:00:00 CST 1970 # 修改时间<br>pZxid = 0x0<br>cversion = -1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0 # 节点类型<br>dataLength = 0<br>numChildren = 1 # 子节点数量<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>创建、删除节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建节点</span><br>[zk: 127.0.0.1:2181(CONNECTED) 11] create /xianglin 123<br>Created /xianglin<br><br><span class="hljs-meta">#</span><span class="bash"> 创建顺序节点</span><br>[zk: 127.0.0.1:2181(CONNECTED) 0] create -s /xianglin/s<br>Created /xianglin/s0000000000<br>[zk: 127.0.0.1:2181(CONNECTED) 1] create -s /xianglin/s<br>Created /xianglin/s0000000001<br><br><span class="hljs-meta">#</span><span class="bash"> 创建临时节点</span><br>[zk: 127.0.0.1:2181(CONNECTED) 2] create -e /xianglin/tmp 123<br>Created /xianglin/tmp<br><span class="hljs-meta">#</span><span class="bash"> 断开连接后重新连接</span><br>[zk: 127.0.0.1:2181(CONNECTED) 2] stat /xianglin/tmp<br>Node does not exist: /xianglin/tmp<br><br><span class="hljs-meta">#</span><span class="bash"> 修改节点</span><br>[zk: 127.0.0.1:2181(CONNECTED) 14] set /xianglin 456<br><span class="hljs-meta">#</span><span class="bash"> 乐观锁的使用</span><br>[zk: 127.0.0.1:2181(CONNECTED) 6] set -v 1 /xianglin 123<br>version No is not valid : /xianglin<br><br><span class="hljs-meta">#</span><span class="bash"> 删除节点</span><br>[zk: 127.0.0.1:2181(CONNECTED) 22] ls /xianglin<br>[s0000000001]<br>[zk: 127.0.0.1:2181(CONNECTED) 23] delete /xianglin/s0000000001<br>[zk: 127.0.0.1:2181(CONNECTED) 24] delete /xianglin<br>[zk: 127.0.0.1:2181(CONNECTED) 25]<br></code></pre></td></tr></table></figure></li><li><p>查看节点数据和状态<code>get</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[zk: 127.0.0.1:2181(CONNECTED) 12] get /xianglin<br>123<br></code></pre></td></tr></table></figure></li></ul><h2 id="Java-使用-Zookeeper"><a href="#Java-使用-Zookeeper" class="headerlink" title="Java 使用 Zookeeper"></a>Java 使用 Zookeeper</h2><h3 id="使用原生的-JavaAPI"><a href="#使用原生的-JavaAPI" class="headerlink" title="使用原生的 JavaAPI"></a>使用原生的 JavaAPI</h3><ul><li><p>引入 Zookeeper 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>简单的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br></code></pre></td></tr></table></figure></li></ul><h3 id="原生-Java-API-的缺点"><a href="#原生-Java-API-的缺点" class="headerlink" title="原生 Java API 的缺点"></a>原生 Java API 的缺点</h3><ul><li>不支持连接超时后的自动重连</li><li>Watcher 注册一次后会失效</li><li>不支持递归创建节点</li></ul><h3 id="使用-Apache-Curator"><a href="#使用-Apache-Curator" class="headerlink" title="使用 Apache Curator"></a>使用 Apache Curator</h3><ul><li><input disabled="" type="checkbox"> TODO</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 和微服务</title>
    <link href="/2020/12/06/SpringCloud%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2020/12/06/SpringCloud%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="微服务的基础概念"><a href="#微服务的基础概念" class="headerlink" title="微服务的基础概念"></a>微服务的基础概念</h2><h3 id="单体应用的不足"><a href="#单体应用的不足" class="headerlink" title="单体应用的不足"></a>单体应用的不足</h3><ul><li>部署效率低下：依赖众多、应用体积较大、启动时间较长</li><li>团队协作开发成本高</li><li>系统可用性差</li></ul><h3 id="服务化"><a href="#服务化" class="headerlink" title="服务化"></a>服务化</h3><ul><li>把传统的单机应用中的本地方法调用，改造成通过 RPC、HTTP 产生的远程方法调用</li><li>把模块从单体应用中拆分出来，独立成一个服务部署</li></ul><h3 id="微服务概念"><a href="#微服务概念" class="headerlink" title="微服务概念"></a>微服务概念</h3><ul><li>一种架构风格</li><li>开发单个应用作为一系列小型服务的套件，其中每个服务都运行在自己的进程中，并且通过轻量级的机制实现彼此间的通信，这通常是 HTTP 资源 API</li><li>这些服务是围绕着业务功能构建的，并且可以通过完全自动化的部署机制进行独立部署</li><li>这些服务的集中化管理做到了最小化（例如 docker 相关技术），每一种服务都可以通过不同的编程语言进行编写，并且可以使用不同的数据存储技术</li></ul><h3 id="微服务的特点"><a href="#微服务的特点" class="headerlink" title="微服务的特点"></a>微服务的特点</h3><ul><li>组件以服务形式来提供</li><li>微服务是产品而不是项目</li><li>轻量级通信、独立进程</li><li>分散治理、去中心化治理</li><li>容错性设计</li><li>会带来团队组织架构的调整</li></ul><h3 id="微服务的优缺点"><a href="#微服务的优缺点" class="headerlink" title="微服务的优缺点"></a>微服务的优缺点</h3><ul><li><p>服务简单、便于学习和上手、相对易于维护</p></li><li><p>独立部署、灵活扩展</p></li><li><p>技术栈丰富</p></li><li><p>运维成本过高</p></li><li><p>接口可能不匹配</p></li><li><p>代码可能重复</p></li><li><p>架构复杂度提高</p></li></ul><h2 id="微服的两大门派"><a href="#微服的两大门派" class="headerlink" title="微服的两大门派"></a>微服的两大门派</h2><ul><li>Spring Cloud：众多子项目</li><li>dubbo：高性能、轻量级的开源 JavaRPC 框架，它提供了三大核心能力：面向接口的远程方法调用、智能容错和负载均衡、服务自动注册和发现</li></ul><h3 id="通信协议：RPC、HTTP"><a href="#通信协议：RPC、HTTP" class="headerlink" title="通信协议：RPC、HTTP"></a>通信协议：RPC、HTTP</h3><ul><li>RPC 的整体效率较高</li><li>服务提供方与调用方接口依赖方式太强</li><li>服务对平台敏感，难以简单复用</li></ul><h2 id="微服务重要模块"><a href="#微服务重要模块" class="headerlink" title="微服务重要模块"></a>微服务重要模块</h2><ul><li>服务描述</li><li>注册中心</li><li>服务框架</li><li>负载均衡</li><li>熔断和降级</li><li>网关</li></ul><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><ul><li>SpringCloud 是一个成熟的微服务框架，定位为开发人员提供工具，以快速构建分布式系统</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/134047.png" alt="image-20201206134046945"></p><h2 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h2><h3 id="Netflix-Eureka"><a href="#Netflix-Eureka" class="headerlink" title="Netflix Eureka"></a>Netflix Eureka</h3><ul><li>服务中心，云端服务发现，一个基于 REST 的服务，用于定位服务。</li></ul><h3 id="Netflix-Hystrix"><a href="#Netflix-Hystrix" class="headerlink" title="Netflix Hystrix"></a>Netflix Hystrix</h3><ul><li>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。</li></ul><h3 id="Netflix-Zuul"><a href="#Netflix-Zuul" class="headerlink" title="Netflix Zuul"></a>Netflix Zuul</h3><ul><li>Zuul 是提供动态路由、监控、弹性、安全等边缘服务的框架。</li></ul><h2 id="基础项目结构搭建"><a href="#基础项目结构搭建" class="headerlink" title="基础项目结构搭建"></a>基础项目结构搭建</h2><h3 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h3><ul><li><p>实现一个课程列表和课程价格的接口服务</p></li><li><p>创建两个项目：<code>course-list</code>和<code>course-price</code></p></li><li><p>实现两个接口：</p><ul><li><p>返回课程列表：<code>/courses</code></p></li><li><p>返回单个课程价格：<code>/price</code></p></li></ul></li></ul><h3 id="表设计如下"><a href="#表设计如下" class="headerlink" title="表设计如下"></a>表设计如下</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`course`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`course_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;课程 ID&#x27;</span>,<br>  <span class="hljs-string">`course_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;课程名&#x27;</span>,<br>  <span class="hljs-string">`valid`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`course`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`course_id`</span>, <span class="hljs-string">`course_name`</span>, <span class="hljs-string">`valid`</span>)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-number">362</span>,<span class="hljs-string">&#x27;Java 并发编程精讲&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">409</span>,<span class="hljs-string">&#x27;玩转 Java 并发工具&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">345</span>,<span class="hljs-string">&#x27;Nginx 教程&#x27;</span>,<span class="hljs-number">0</span>);<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`course_price`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`course_id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;课程 ID&#x27;</span>,<br>  <span class="hljs-string">`price`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;课程价格&#x27;</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`course_price`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`course_id`</span>, <span class="hljs-string">`price`</span>)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-number">362</span>,<span class="hljs-number">348</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">409</span>,<span class="hljs-number">399</span>);<br></code></pre></td></tr></table></figure><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ul><li><p>搭建一个空的 springboot 项目<code>spring-cloud-exercise-course</code>，作为整个项目的 <code>parent</code>，删掉无用的<code>src</code>目录</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/190928.png" alt="image-20201206181615615"></p></li><li><p>新建一个空的 <code>maven </code>项目<code>course-service</code>作为<code>course-list</code>和<code>course-price</code>的<code>parent</code>，删掉无用的<code>src</code>目录。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/181920.png" alt="image-20201206181920496"></p><p>引入一些公共依赖，比如 <code>jdbc</code>、<code>mybatis</code>等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新建<code>course-list</code>和<code>course-price</code>两个 <code>module</code>，开发<code>/courses</code>和<code>/price</code>接口。因为需要的依赖已经在<code>course-service</code>中引入，这两个 <code>module</code> 无需引入依赖。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/182519.png" alt="image-20201206182430587"></p></li><li><p>开发<code>/courses</code>接口</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/185335.png" alt="image-20201206185335187"></p></li><li><p>开发<code>/price</code>接口</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/185847.png" alt="image-20201206185846958"></p></li><li><p>简单测试这两个接口</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/190055.png" alt="image-20201206190055492"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/190108.png" alt="image-20201206190108465"></p></li><li><p>准备工作已经完成，基于 springboot 使用 MyBatis 的查询项目很简单。</p></li></ul><h3 id="版本搭配"><a href="#版本搭配" class="headerlink" title="版本搭配"></a>版本搭配</h3><ul><li><p>SpringBoot 与 SpringCloud 的版本选择，可以参见<code>https://start.spring.io/actuator/info</code>的返回</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/190657.png" alt="image-20201206190657723"></p></li><li><p>SpringBoot 和 MyBatis 的版本选择，可以参见<code>http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/190811.png" alt="image-20201206190811467"></p></li></ul><h2 id="服务注册与发现-Eureka"><a href="#服务注册与发现-Eureka" class="headerlink" title="服务注册与发现 Eureka"></a>服务注册与发现 Eureka</h2><ul><li>服务中心又称为注册中心，管理各种服务功能包括服务的注册、发现、熔断、负载、降级等。</li></ul><h3 id="Eureka-介绍"><a href="#Eureka-介绍" class="headerlink" title="Eureka 介绍"></a>Eureka 介绍</h3><ul><li>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务注册和发现。</li><li>Eureka 采用了 C-S 的设计架构，Eureka Server 作为服务注册的服务器，它是服务注册中心。</li><li>系统中的其它微服务，使用 Eureka 的客户端连接到 Eureka Server，并维持心跳连接。</li><li>系统维护人员可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。</li><li>Spring Cloud 的其它模块可以通过 Eureka Server 来发现系统中的其它微服务，并执行性格逻辑。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/214640.png" alt="image-20201209214640027"></p><ul><li>如图所示：<ul><li>Eureka Server：提供服务注册于发现</li><li>Service Provider：服务提供方，将自身服务注册到 Eureka，使得消费者能到找到</li><li>Service Consumer：服务消费方，从 Eureka 获取注册服务列表，从而消费服务</li></ul></li></ul><h2 id="使用-Eureka-Server"><a href="#使用-Eureka-Server" class="headerlink" title="使用 Eureka Server"></a>使用 Eureka Server</h2><ul><li>基于上面的案例，<code>course-price</code>模块需要使用<code>course-list</code>模块提供的服务，可以启动一个 Eureka Server，将两个模块作为 Eureka Client 注册到服务中心，<code>course-list</code>作为服务提供者，<code>course-price</code>作为服务消费者。</li></ul><h3 id="配置-EurekaServer"><a href="#配置-EurekaServer" class="headerlink" title="配置 EurekaServer"></a>配置 EurekaServer</h3><ul><li><p>新建一个模块<code>eureka-server</code> 作为注册中心</p></li><li><p>引入 Eureka Server 的依赖</p><p>首先在整个项目的顶层 <code>POM</code>文件中加入对 Spring Cloud 版本的定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在<code>eureka-server</code>模块引入Eureka Server 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时整个项目的情况是</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/220327.png" alt="image-20201209220327274" style="zoom:50%;" /></li><li><p>配置 Eureka Server</p><p>新建配置文件<code>application.yml</code>，对 Eureka Server 进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-string">off</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><ul><li><code>eureka.client.fetch-registry</code>：是否需要从注册中心获取其它服务的地址，因为当前模块是注册中心，设置为 <code>false</code></li><li><code>eureka.client.register-with-eureka</code>：是否将自己作为服务注册到服务中心，设置为<code>false</code>，取消默认的注册行为</li><li><code>eureka.client.service-url.defaultZone</code>：设置与 Eureka Server 交互地址，查询服务和注册服务都依赖这个地址，默认是<code>http://localhost:8761/eureka/</code>。</li></ul></li><li><p>为<code>eureka-server</code>模块编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动服务后，访问配置的地址</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/222016.png" alt="image-20201209222016692"></p><p>此时没有任务服务注册到 Eureka Server，如果将上面的<code>register-with-eureka</code>设置为<code>true</code>。Eureka Server 会将自己注册到服务中心。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/223104.png" alt="image-20201209223104463"></p></li></ul><h3 id="将course-list和course-price两个模块注册到服务中心"><a href="#将course-list和course-price两个模块注册到服务中心" class="headerlink" title="将course-list和course-price两个模块注册到服务中心"></a>将<code>course-list</code>和<code>course-price</code>两个模块注册到服务中心</h3><ul><li><p>为 Eureka Client 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在配置文件中增加 Eureka Server 的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://localhost:8000/eureka/</span><br></code></pre></td></tr></table></figure></li><li><p>启动服务后，访问<code>http://localhost:8000</code>，发现<code>course-list</code>和<code>course-price</code>已经正确注册到服务中心。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/223814.png" alt="image-20201209223813993"></p></li></ul><h3 id="多节点注册中心"><a href="#多节点注册中心" class="headerlink" title="多节点注册中心"></a>多节点注册中心</h3><ul><li><p>Eureka 可以通过互相注册的方式实现集群部署，只需要将 Eureka Server 的<code>service-url.defaultZone</code>配置为其它节点的地址即可。</p></li><li><p>保证多个节点的应用名一致，<code>register-with-eureka</code>和<code>fetch-registry</code>配置为<code>true</code>。如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">eureka-server1</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">xianglin1</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://xianglin2:8000/eureka/,http://xianglin3:9000/eureka/</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">eureka-server2</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">xianglin2</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://xianglin1:7000/eureka/,http://xianglin3:9000/eureka/</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">eureka-server3</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">xianglin3</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://xianglin1:7000/eureka/,http://xianglin2:9000/eureka/</span><br></code></pre></td></tr></table></figure><p>在本机上启动三个 Eureka Server 的实例，相互同步注册信息。</p></li><li><p>为三个 hostname 添加解析</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/150929.png" alt="image-20201212150928999" style="zoom:50%;" /></li><li><p>将 spring boot 应用打包后使用：<code>--spring.profiles.active=</code>参数分别启动三个应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean package -Dmaven.test.skip=true<br><br>java -jar eureka-server-0.0.1-SNAPSHOT.jar --spring.profiles.active=eureka-server<br></code></pre></td></tr></table></figure></li><li><p>打开浏览器查看 Eureka Server 的启动情况</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/151208.png" alt="image-20201212151208691"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/151230.png" alt="image-20201212151229920"></p></li><li><p>再次启动<code>course-list</code>和<code>course-price</code>两个模块，可以发现，三个注册中心都同步了应用的注册信息</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/151446.png" alt="image-20201212151446100"></p></li></ul><h2 id="服务间调用-Feign"><a href="#服务间调用-Feign" class="headerlink" title="服务间调用 Feign"></a>服务间调用 Feign</h2><ul><li>Feign 是一个声明式的webservice 调用客户端。</li><li>只需要创建接口和使用 Feign 提供的注解。</li><li>Spring Cloud 为 Feign 提供了基于 Spring MVC 注解的支持，并且使用<code>HttpMessageConverters</code>作为默认的序列化工具。</li><li>Spring Cloud 整合了Ribbon 和 Eureka ，使得 Feign 具有负载均衡的作用。</li></ul><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><ul><li>RandomRule：随机策略</li><li>RoundRobinRule：轮询策略</li><li>WeightedResponseTimeRule：加权，根据平均响应时间动态加权</li><li>配置负载均衡策略：<code>course-list.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RoundRobinRule</code></li></ul><h2 id="使用-Feign-调用服务"><a href="#使用-Feign-调用服务" class="headerlink" title="使用 Feign 调用服务"></a>使用 Feign 调用服务</h2><h3 id="course-price使用-Feign-调用course-list提供的-courses服务"><a href="#course-price使用-Feign-调用course-list提供的-courses服务" class="headerlink" title="course-price使用 Feign 调用course-list提供的/courses服务"></a><code>course-price</code>使用 Feign 调用<code>course-list</code>提供的<code>/courses</code>服务</h3><ul><li><p>在<code>course-price</code>模块中添加 Feign 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>course-price</code>的启动类上添加<code>@EnableFeignClients</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoursePriceApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CoursePriceApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 Feign Client 调用<code>course-list</code>的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;course-list&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CourseListClient</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取所有的课程信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 所有的课程信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/courses&quot;)</span><br>    <span class="hljs-function">List&lt;Course&gt; <span class="hljs-title">courseList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>course-price</code>新增一个 REST 请求，用于验证服务间调用是否正常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoursePriceController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CourseListClient courseListClient;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/feign/courses&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title">courseList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> courseListClient.courseList();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动Eureka Server 、<code>course-list</code>和<code>course-price</code>三个模块，请求<code>http://localhost:8082/feign/courses</code>接口</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/154956.png" alt="image-20201212154955865"></p></li></ul><h3 id="负载均衡测试"><a href="#负载均衡测试" class="headerlink" title="负载均衡测试"></a>负载均衡测试</h3><ul><li><p>在<code>course-list</code>模块新增一个方法，用于输出应用启动的端口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String port;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/rule&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">rule</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;course-list instance port : &quot;</span> + port;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>course-price</code>中使用 Feign 进行调用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;course-list&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CourseListClient</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试负载均衡</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 端口信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/courses&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">rule</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/feign/port&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">port</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> courseListClient.rule();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在调用方<code>course-price</code>中为服务配置负载均衡策略</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置负载均衡</span><br><span class="hljs-meta">course-list.ribbon.NFLoadBalancerRuleClassName</span>=<span class="hljs-string">com.netflix.loadbalancer.RandomRule</span><br></code></pre></td></tr></table></figure></li><li><p>启动多个<code>course-list</code>实例，调用<code>/feign/port</code>接口，观察输出</p><p>![image-20201212162254699](/Users/xianglin/Library/Application Support/typora-user-images/image-20201212162254699.png)</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">course-list instance port : 8091<br>course-list instance port : 8071<br></code></pre></td></tr></table></figure></li></ul><h3 id="Feign-调用携带-Session"><a href="#Feign-调用携带-Session" class="headerlink" title="Feign 调用携带 Session"></a>Feign 调用携带 Session</h3><p>服务间的 Feign 调用是基于 HTTP 请求的，也就是说，服务间调用是无状态的，类似于 Session 信息无法在服务间传递，此时可以使用<code>FeignRequestInterceptor</code>拦截器对请求增加指定的请求头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Feign 请求的拦截器，为请求增加请求头</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RequestInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取到请求</span><br>        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-keyword">if</span> (requestAttributes == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();<br>        <span class="hljs-comment">// 将网关的请求头附加到 Feign 调用的请求中</span><br>        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();<br>        <span class="hljs-keyword">if</span> (headerNames != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (headerNames.hasMoreElements()) &#123;<br>                String name = headerNames.nextElement();<br>                Enumeration&lt;String&gt; values = request.getHeaders(name);<br>                <span class="hljs-keyword">while</span> (values.hasMoreElements()) &#123;<br>                    String value = values.nextElement();<br>                    requestTemplate.header(name, value);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="熔断器-Hystrix"><a href="#熔断器-Hystrix" class="headerlink" title="熔断器 Hystrix"></a>熔断器 Hystrix</h2><h3 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h3><p>微服务架构中基本是多个服务层相互调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种情况被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”不可用导致“服务消费者”不可用，并将不可用逐渐放大的过程。</p><h3 id="Hystrix-特性"><a href="#Hystrix-特性" class="headerlink" title="Hystrix 特性"></a>Hystrix 特性</h3><h4 id="断路器机制"><a href="#断路器机制" class="headerlink" title="断路器机制"></a>断路器机制</h4><p>当Hystrix Command 请求后端服务失败超过一定比例时，断路器会自动切换到开路（OPEN）状态，这时候所有请求会直接失败而不是发送到后端服务。断路器保持在开路状态一段时间后，自动切换到半开状态（HALF-OPEN），这时会判断下一次请求的返回状况。如果请求成功，断路器切回关闭（CLOSE）状态， 否则重新切换到开路状态。</p><h4 id="FallBack"><a href="#FallBack" class="headerlink" title="FallBack"></a>FallBack</h4><p>fallback 相当于降级操作。对于查询操作，我们可以实现一个 fallback 方法，当请求后端服务异常时，可以使用 fallback 的返回值。fallback 的返回值一般是设置的默认值或者缓存。</p><h4 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h4><h2 id="熔断器使用"><a href="#熔断器使用" class="headerlink" title="熔断器使用"></a>熔断器使用</h2><h3 id="在服务调用方配置熔断器"><a href="#在服务调用方配置熔断器" class="headerlink" title="在服务调用方配置熔断器"></a>在服务调用方配置熔断器</h3><ul><li><p>在<code>course-price</code>模块中配置使用熔断器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 熔断器使用</span><br><span class="hljs-meta">feign.hystrix.enabled</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li><li><p>为<code>CourseListClient</code>创建回调类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CourseList 的 回调类 调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseListClientHystrix</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CourseListClient</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/courses&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title">courseList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.emptyList();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>@FeignClient</code>注解上指定回调类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;course-list&quot;, fallback = CourseListClientHystrix.class)</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目，验证熔断器</p><p>先验证服务是否正常</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/171230.png" alt="image-20201212171230361" style="zoom:50%;" /><p>将<code>course-list</code>服务停止后再次访问</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/171330.png" alt="image-20201212171330624" style="zoom:50%;" /><p>后再次启动<code>course-list</code>服务后访问，发现服务恢复正常。</p></li></ul><h2 id="服务网关-Zuul"><a href="#服务网关-Zuul" class="headerlink" title="服务网关 Zuul"></a>服务网关 Zuul</h2><p>Spring Cloud Zuul路由是微服务架构的不可或缺的一部分，提供动态路由，监控，弹性，安全等的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。</p><h3 id="Zuul-简单使用"><a href="#Zuul-简单使用" class="headerlink" title="Zuul 简单使用"></a>Zuul 简单使用</h3><ul><li><p>新建一个网关项目<code>course-zuul</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置网关相关内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">course-zuul</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8000/eureka/</span><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-comment">#  定义网关前缀</span><br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">/course</span><br>  <span class="hljs-comment">#  为服务指定前缀</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">course-list:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/list/*</span><br>      <span class="hljs-attr">service-id:</span> <span class="hljs-string">course-list</span><br>    <span class="hljs-attr">course-price:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/price/*</span><br>      <span class="hljs-attr">service-id:</span> <span class="hljs-string">course-price</span><br></code></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Zuul 网关启动类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ZuulApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ZuulApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过网关访问<code>/courses</code>接口</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/174409.png" alt="image-20201212174409807"></p></li></ul><h3 id="Zuul-的核心应用"><a href="#Zuul-的核心应用" class="headerlink" title="Zuul 的核心应用"></a>Zuul 的核心应用</h3><p>Filter是Zuul的核心，用来实现对外服务的控制。Filter的生命周期有4个，分别是“PRE”、“ROUTING”、“POST”、“ERROR”，整个生命周期可以用下图来表示。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/175248.png" alt="image-20201212175248087"></p><p>Zuul 中大部分功能都是基于过滤器实现的，这些过滤器对应于请求的典型生命周期：</p><ul><li><code>PRE</code>：在请求被路由之前调用，可以用于身份校验，在集群中选择请求的微服务等。</li><li><code>ROUTING</code>：将请求路由到微服务，用于构建发送给微服务的请求，使用 Apache HTTPClient 或者Netflix Ribbon请求微服务。</li><li><code>POST</code>：在请求从微服务返回后执行，可以用于设置统一的响应头，收集统计信息等。</li><li><code>ERROR</code>：在其他阶段发生错误时执行该过滤器。</li><li>自定义过滤器</li></ul><h4 id="Zuul-中默认实现的过滤器"><a href="#Zuul-中默认实现的过滤器" class="headerlink" title="Zuul 中默认实现的过滤器"></a>Zuul 中默认实现的过滤器</h4><table><thead><tr><th align="left">类型</th><th align="left">顺序</th><th align="left">过滤器</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><code>pre</code></td><td align="left">-3</td><td align="left"><code>ServletDetectionFilter</code></td><td align="left">标记处理Servlet的类型</td></tr><tr><td align="left"><code>pre</code></td><td align="left">-2</td><td align="left"><code>Servlet30WrapperFilter</code></td><td align="left">包装HttpServletRequest请求</td></tr><tr><td align="left"><code>pre</code></td><td align="left">-1</td><td align="left"><code>FormBodyWrapperFilter</code></td><td align="left">包装请求体</td></tr><tr><td align="left"><code>route</code></td><td align="left">1</td><td align="left"><code>DebugFilter</code></td><td align="left">标记调试标志</td></tr><tr><td align="left"><code>route</code></td><td align="left">5</td><td align="left"><code>PreDecorationFilter</code></td><td align="left">处理请求上下文供后续使用</td></tr><tr><td align="left"><code>route</code></td><td align="left">10</td><td align="left"><code>RibbonRoutingFilter</code></td><td align="left">serviceId请求转发</td></tr><tr><td align="left"><code>route</code></td><td align="left">100</td><td align="left"><code>SimpleHostRoutingFilter</code></td><td align="left">url请求转发</td></tr><tr><td align="left"><code>route</code></td><td align="left">500</td><td align="left"><code>SendForwardFilter</code></td><td align="left">forward请求转发</td></tr><tr><td align="left"><code>post</code></td><td align="left">0</td><td align="left"><code>SendErrorFilter</code></td><td align="left">处理有错误的请求响应</td></tr><tr><td align="left"><code>post</code></td><td align="left">1000</td><td align="left"><code>SendResponseFilter</code></td><td align="left">处理正常的请求响应</td></tr></tbody></table><p>可以在配置文件中配置需要禁用的过滤器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">FormBodyWrapperFilter:</span><br>    <span class="hljs-attr">pre:</span><br>      <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="自定义-Filter"><a href="#自定义-Filter" class="headerlink" title="自定义 Filter"></a>自定义 Filter</h4><p>自定义 Filter 需要继承<code>com.netflix.zuul.ZuulFilter</code>，并实现四个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerZuulFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ZuulFilter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">filterType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 定义过滤器的类型</span><br>        <span class="hljs-keyword">return</span> FilterConstants.PRE_TYPE;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">filterOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 定义同类过滤器的执行顺序，数字越小，优先级越高</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 判断是否需要执行此过滤器</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ZuulException </span>&#123;<br>        <span class="hljs-comment">// 过滤器要执行的具体操作</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Zuul-的其它应用"><a href="#Zuul-的其它应用" class="headerlink" title="Zuul 的其它应用"></a>Zuul 的其它应用</h3><h4 id="路由熔断"><a href="#路由熔断" class="headerlink" title="路由熔断"></a>路由熔断</h4><p>当后端服务出现异常时，不希望直接将异常抛出给最外层，而是希望服务可以自动进行降级。此时可以实现<code>org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider</code>。其中<code>getRoute</code>方法告诉 Zuul 它负责哪个 <code>route</code>定义的熔断，<code>fallbackResponse</code>用于处理请求并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FallbackProvider</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">getRoute</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">ClientHttpResponse <span class="hljs-title">fallbackResponse</span><span class="hljs-params">(String route, Throwable cause)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>为<code>course-price</code>定制熔断内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为 course-price 服务定制熔断内容</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoursePriceFallbackProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FallbackProvider</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;course-price&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title">fallbackResponse</span><span class="hljs-params">(String route, Throwable cause)</span> </span>&#123;<br>        String message = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (cause != <span class="hljs-keyword">null</span> &amp;&amp; cause.getCause() != <span class="hljs-keyword">null</span>) &#123;<br>            message = cause.getCause().getMessage();<br>        &#125;<br>        String finalMessage = message;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ClientHttpResponse() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> HttpStatus <span class="hljs-title">getStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.OK;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRawStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.OK.value();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStatusText</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.OK.name();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getBody</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ByteArrayInputStream((<span class="hljs-string">&quot;服务异常，请稍后！&quot;</span> + finalMessage).getBytes());<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> HttpHeaders <span class="hljs-title">getHeaders</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpHeaders() &#123;&#123;<br>                    setContentType(MediaType.APPLICATION_JSON);<br>                &#125;&#125;;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>course-price</code>服务停止后，再次调用则会返回“服务异常”的提示</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/183544.png" alt="image-20201212183544655"></p><blockquote><p> Zuul 目前只支持服务级别的熔断，不支持具体到某个URL进行熔断。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring cloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ 基础</title>
    <link href="/2020/12/05/RabbitMQ/"/>
    <url>/2020/12/05/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul><li><p>MQ（Message Queue）：MQ 的模型大致如下</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/095535.png" alt="image-20201206095534595" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/133513.png" alt="image-20201205133512771" style="zoom:25%;" /></li></ul><h3 id="消息队列的特性"><a href="#消息队列的特性" class="headerlink" title="消息队列的特性"></a>消息队列的特性</h3><ul><li>业务无关性</li><li>FIFO</li><li>容灾</li><li>性能</li></ul><h3 id="使用消息队列的原因"><a href="#使用消息队列的原因" class="headerlink" title="使用消息队列的原因"></a>使用消息队列的原因</h3><ul><li>系统解耦</li><li>异步调用</li><li>流量削峰</li></ul><h2 id="RabbitMQ-介绍"><a href="#RabbitMQ-介绍" class="headerlink" title="RabbitMQ 介绍"></a>RabbitMQ 介绍</h2><h3 id="RabbitMQ-基础思想"><a href="#RabbitMQ-基础思想" class="headerlink" title="RabbitMQ 基础思想"></a>RabbitMQ 基础思想</h3><ul><li>核心思想：接收并转发消息，可以类比于邮局</li><li>producer：生产者、消息发送者</li><li>queue：消息存储队列</li><li>consumer：消费者</li></ul><h3 id="RabbitMQ-的特点"><a href="#RabbitMQ-的特点" class="headerlink" title="RabbitMQ 的特点"></a>RabbitMQ 的特点</h3><ul><li>开源、跨语言</li><li>Erlang 语言编写、内建集群</li><li>应用广泛</li><li>社区活跃、API 丰富</li></ul><h3 id="RabbitMQ-核心概念"><a href="#RabbitMQ-核心概念" class="headerlink" title="RabbitMQ 核心概念"></a>RabbitMQ 核心概念</h3><ul><li>RabbitMQ 是基于 AMPQ 协议的开源实现，其模型如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/135354.png" alt="image-20201205135354320"></p><ul><li><p>Server：服务</p></li><li><p>connection：与 Server 建立的连接</p></li><li><p>channel：信道，几乎所有的操作都是在信道上完成的，客户端可以建立多个信道</p><p>项目与 RabbitMQ 之间使用 TCP 连接，引入信道的概念，所有需要发布消息的线程都包装成一条信道在 TCP 中传输，理论上一条 TCP 连接支持无限多个信道。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/100054.png" alt="image-20201206100054120" style="zoom:15%;" /></li><li><p>message：消息，由 properties 和 body 组成</p></li><li><p>virtual host：虚拟主机，顶层隔离。统一虚拟主机下，不能有重复的交换机和 queue</p></li><li><p>exchange：交换机，接收生产者的消息，根据指定的路由键去把消息转发到所绑定的队列上</p></li><li><p>binding：绑定交换机和队列</p><p>用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</p></li><li><p>routing key：路由键，路由规则</p></li><li><p>queue：队列，消费者只需要监听队列来消费消息</p><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接这个队列将其取走。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/135927.png" alt="image-20201205135927070"></p><h2 id="AMQP-协议"><a href="#AMQP-协议" class="headerlink" title="AMQP 协议"></a>AMQP 协议</h2><ul><li><p>Advanced Message Queuing Protocol</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/135009.png" alt="image-20201205135009261"></p></li></ul><h2 id="RabbitMQ-的安装启动"><a href="#RabbitMQ-的安装启动" class="headerlink" title="RabbitMQ 的安装启动"></a>RabbitMQ 的安装启动</h2><p>官方教程见：<a href="https://www.rabbitmq.com/install-rpm.html">https://www.rabbitmq.com/install-rpm.html</a></p><h3 id="CentOS7-下使用-YUM-安装-Erlang"><a href="#CentOS7-下使用-YUM-安装-Erlang" class="headerlink" title="CentOS7 下使用 YUM 安装 Erlang"></a>CentOS7 下使用 YUM 安装 Erlang</h3><ul><li><p>新建erlang 的源配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ vim /etc/yum.repos.d/rabbitmq_erlang.repo<br><br>[rabbitmq-erlang]<br>name=rabbitmq-erlang<br>baseurl=https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/22/el/7<br>gpgcheck=1<br>gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc<br>repo_gpgcheck=0<br>enabled=1<br></code></pre></td></tr></table></figure></li><li><p>更新源信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ yum clear all<br>➜  ~ yum makecache<br></code></pre></td></tr></table></figure></li><li><p>安装 erlang</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ yum install erlang<br><span class="hljs-meta">#</span><span class="bash"> 确认源为 rabbitmq-erlang</span><br>================================================================================<br> Package      架构         版本                     源                     大小<br>================================================================================<br>正在安装:<br> erlang       x86_64       22.3.4.12-1.el7          rabbitmq-erlang        19 M<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="CentOS7-下安装-RabbitMQ"><a href="#CentOS7-下安装-RabbitMQ" class="headerlink" title="CentOS7 下安装 RabbitMQ"></a>CentOS7 下安装 RabbitMQ</h3><ul><li><p>导入秘钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc<br></code></pre></td></tr></table></figure></li><li><p>新建 rabbitMq 源信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ vim /etc/yum.repos.d/rabbitmq.repo<br><br>[bintray-rabbitmq-server]<br>name=bintray-rabbitmq-rpm<br>baseurl=https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/7/<br>gpgcheck=0<br>repo_gpgcheck=0<br>enabled=1<br></code></pre></td></tr></table></figure></li><li><p>更新源信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ yum clear all<br>➜  ~ yum makecache<br></code></pre></td></tr></table></figure></li><li><p>安装 rabbitmq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ yum install rabbitmq-server.noarch<br></code></pre></td></tr></table></figure></li></ul><h3 id="RabbitMQ-的运行与管理"><a href="#RabbitMQ-的运行与管理" class="headerlink" title="RabbitMQ 的运行与管理"></a>RabbitMQ 的运行与管理</h3><ul><li><p>启动 RabbitMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用 systemd 管理服务</span><br>➜  ~ systemctl start rabbitmq-server<br><span class="hljs-meta">#</span><span class="bash"> 使用 rabbitmq 可执行文件启动 -detached 参数指定为后台启动</span><br>➜  ~ rabbitmq-server -detached<br></code></pre></td></tr></table></figure></li><li><p>停止 RabbitMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 停止应用</span><br>➜  ~ rabbitmqctl --node rabbit@localhost stop_app<br>Stopping rabbit application on node rabbit@localhost ...<br><span class="hljs-meta">#</span><span class="bash"> 停止特定节点</span><br>➜  ~ rabbitmqctl -n rabbit@localhost stop<br>Stopping and halting node rabbit@localhost ...<br></code></pre></td></tr></table></figure></li><li><p>查询服务器状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ rabbitmqctl status<br>Status of node rabbit@localhost ...<br>Runtime<br><br>OS PID: 29695<br>OS: Linux<br></code></pre></td></tr></table></figure></li><li><p>查看队列、绑定、交换器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ rabbitmqctl list_queues<br>Timeout: 60.0 seconds ...<br>Listing queues for vhost / ...<br>namemessages<br>task_queue0<br>queue10<br>queue20<br><br>➜  ~ rabbitmqctl list_exchanges<br>Listing exchanges for vhost / ...<br>nametype<br>amq.directdirect<br>amq.matchheaders<br><br>➜  ~ rabbitmqctl list_bindings<br>Listing bindings for vhost /...<br>source_namesource_kinddestination_namedestination_kindrouting_keyarguments<br>exchangetask_queuequeuetask_queue[]<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="启用管理页面"><a href="#启用管理页面" class="headerlink" title="启用管理页面"></a>启用管理页面</h3><ul><li><p>启动插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ rabbitmq-plugins enable rabbitmq_management<br></code></pre></td></tr></table></figure></li><li><p>新建管理员用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> amdin 为用户名 password 为密码</span><br>➜  ~ rabbitmqctl add_user admin password<br>➜  ~ rabbitmqctl set_user_tags admin administrator<br></code></pre></td></tr></table></figure></li><li><p>开放15672端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ firewall-cmd --add-port=15672/tcp --permanent<br>➜  ~ firewall-cmd --reload<br></code></pre></td></tr></table></figure></li><li><p>尝试登陆后台管理页面</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/161739.png" alt="image-20201205161739431"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/191649.png" alt="image-20201205161802030"></p></li></ul><h2 id="Java-使用-RabbitMQ"><a href="#Java-使用-RabbitMQ" class="headerlink" title="Java 使用 RabbitMQ"></a>Java 使用 RabbitMQ</h2><h3 id="简单使用，无交换器概念"><a href="#简单使用，无交换器概念" class="headerlink" title="简单使用，无交换器概念"></a>简单使用，无交换器概念</h3><ul><li><p>引入 Maven 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-nop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.29<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>RabbitMQ 消息发送者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Send</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String QUEUE_NAME = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">// 创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">// 设置 RabbitMQ 地址</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.106&quot;</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">// 建立连接</span><br>        Connection connection = connectionFactory.newConnection();<br>        <span class="hljs-comment">// 获得信道</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 声明队列</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 发布消息</span><br>        String message = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;发送了消息：&quot;</span> + message);<br>        <span class="hljs-comment">// 关闭连接</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String QUEUE_NAME = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">// 创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">// 设置 RabbitMQ 地址</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.106&quot;</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">// 建立连接</span><br>        Connection connection = connectionFactory.newConnection();<br>        <span class="hljs-comment">// 获得信道</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 声明队列</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                String message = <span class="hljs-keyword">new</span> String(body);<br>                System.out.println(<span class="hljs-string">&quot;收到消息：&quot;</span> + message);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="RabbitMQ-交换器工作模式"><a href="#RabbitMQ-交换器工作模式" class="headerlink" title="RabbitMQ 交换器工作模式"></a>RabbitMQ 交换器工作模式</h2><ul><li><code>fanout</code>：广播，只需要将队列绑定到交换机上即可，不需要设置路由键</li><li><code>direct</code>：根据RoutingKey 匹配消息路由到指定的队列</li><li><code>topic</code>：生产者指定 RoutingKey， 消息根据消费端指定的队列通过模糊匹配的方式进行相应转发</li><li><code>headers</code>：根据发送消息内容中的 headers 属性来匹配</li></ul><h3 id="fanout-模式"><a href="#fanout-模式" class="headerlink" title="fanout 模式"></a>fanout 模式</h3><ul><li>每个发送到<code>fanout</code>类型交换器的消息都会被分发到所有绑定的队列上去，它不会处理路由键。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/172538.png" alt="image-20201205172538817" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/174021.png" alt="image-20201205174021739" style="zoom:50%;" /></p><ul><li><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>  <span class="hljs-comment">// 创建连接工厂</span><br>  ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>  connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.106&quot;</span>);<br>  connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>  connectionFactory.setPassword(<span class="hljs-string">&quot;password&quot;</span>);<br>  <span class="hljs-comment">// 创建连接、获取信道</span><br>  <span class="hljs-keyword">try</span> (Connection connection = connectionFactory.newConnection(); Channel channel = connection.createChannel()) &#123;<br>    <span class="hljs-comment">// 声明 fanout 类型的交换器</span><br>    String exchange = <span class="hljs-string">&quot;fanout_exchange&quot;</span>;<br>    channel.exchangeDeclare(exchange, BuiltinExchangeType.FANOUT, <span class="hljs-keyword">false</span>);<br>    <span class="hljs-comment">// 发布消息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>      String message = <span class="hljs-string">&quot;fanout_exchange--&quot;</span> + i;<br>      <span class="hljs-comment">// fanout 类型的交换器不处理 RoutingKey</span><br>      channel.basicPublish(exchange, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>      System.out.println(<span class="hljs-string">&quot;发送了消息 ： &quot;</span> + message);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>  <span class="hljs-comment">// 创建连接工厂</span><br>  ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>  connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.106&quot;</span>);<br>  connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>  connectionFactory.setPassword(<span class="hljs-string">&quot;password&quot;</span>);<br><br>  Connection connection = connectionFactory.newConnection();<br>  Channel channel = connection.createChannel();<br>  <span class="hljs-comment">// 声明交换器</span><br>  String exchange = <span class="hljs-string">&quot;fanout_exchange&quot;</span>;<br>  channel.exchangeDeclare(exchange, BuiltinExchangeType.FANOUT, <span class="hljs-keyword">false</span>);<br>  <span class="hljs-comment">// 生成一个非持久、独占、自动删除的临时队列</span><br>  String queue = channel.queueDeclare().getQueue();<br>  <span class="hljs-comment">// 绑定队列</span><br>  channel.queueBind(queue, exchange, <span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-comment">// 接收消息</span><br>  channel.basicConsume(queue, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      String routingKey = envelope.getRoutingKey();<br>      System.out.println(<span class="hljs-string">&quot;routingKey = &quot;</span> + routingKey);<br>      String message = <span class="hljs-keyword">new</span> String(body);<br>      System.out.println(<span class="hljs-string">&quot;消费了消息：&quot;</span> + message);<br>      <span class="hljs-comment">// 确认消息</span><br>      channel.basicAck(envelope.getDeliveryTag(), <span class="hljs-keyword">false</span>);<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动多个消费者实例，后运行消息生产者</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/113017.png" alt="image-20201206113017553" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/113041.png" alt="image-20201206113041474" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/113116.png" alt="image-20201206113116706" style="zoom:25%;" /></p></li></ul><h3 id="direct-模式"><a href="#direct-模式" class="headerlink" title="direct 模式"></a>direct 模式</h3><ul><li><p>消息中的路由键（routing key）和 Binding 中的 binding key 一致，交换器就将消息发送到对应的队列中。如果一个队列绑定到交换器要求路由键为<code>error</code>，则只转发 routing key 标记为<code>error</code>的消息，不会转发标记为<code>info</code>或者<code>error.error</code>的消息。它是完全匹配、单播的模式。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/102355.png" alt="image-20201206102355328" style="zoom:50%;" /></li><li><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明 direct 类型的交换器</span><br>String exchange = <span class="hljs-string">&quot;direct_exchange&quot;</span>;<br>channel.exchangeDeclare(exchange, BuiltinExchangeType.DIRECT, <span class="hljs-keyword">false</span>);<br><span class="hljs-comment">// 发布消息</span><br>String message = <span class="hljs-string">&quot;direct_exchange simple&quot;</span>;<br><span class="hljs-comment">// 假定发送日志信息，级别为：debug info error</span><br>channel.basicPublish(exchange, <span class="hljs-string">&quot;debug&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>System.out.println(<span class="hljs-string">&quot;发送了 debug 消息 ： &quot;</span> + message);<br>channel.basicPublish(exchange, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>System.out.println(<span class="hljs-string">&quot;发送了 info 消息 ： &quot;</span> + message);<br>channel.basicPublish(exchange, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>System.out.println(<span class="hljs-string">&quot;发送了 error 消息 ： &quot;</span> + message);<br></code></pre></td></tr></table></figure></li><li><p>消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ErrorReceiver.java<br><span class="hljs-comment">// 绑定队列、只处理 error 标记的日志，记录到文件</span><br>channel.queueBind(queue, exchange, <span class="hljs-string">&quot;error&quot;</span>);<br><br>AllReceiver.java<br><br><span class="hljs-comment">// 关注所有标记的日志，打印至控制台</span><br>channel.queueBind(queue, exchange, <span class="hljs-string">&quot;debug&quot;</span>);<br>channel.queueBind(queue, exchange, <span class="hljs-string">&quot;info&quot;</span>);<br>channel.queueBind(queue, exchange, <span class="hljs-string">&quot;error&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>先后启动消息消费者和消息生产者</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114134.png" alt="image-20201206114134230" style="zoom:20%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114149.png" alt="image-20201206114149708" style="zoom:20%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114210.png" alt="image-20201206114210343" style="zoom:30%;" /></p></li></ul><h3 id="topic-模式"><a href="#topic-模式" class="headerlink" title="topic 模式"></a>topic 模式</h3><ul><li><p><code>topic</code>交换器类似于<code>direct</code>交换器，它通过模式匹配分配消息的路由键属性，将路由键与某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串以<code>.</code>切分为单词，同时识别两个通配符：</p><ul><li><code>*</code>可以匹配一个单词</li><li><code>#</code>可以匹配任意个单词</li></ul><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/103328.png" alt="image-20201206103328502" style="zoom:50%;" /></li><li><p>消息发送者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>    ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>    connectionFactory.setHost(<span class="hljs-string">&quot;192.168.56.106&quot;</span>);<br>    connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>    connectionFactory.setPassword(<span class="hljs-string">&quot;password&quot;</span>);<br>    Connection connection = connectionFactory.newConnection();<br>    Channel channel = connection.createChannel();<br>    <span class="hljs-comment">// 声明交换机</span><br>    String exchange = <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br>    channel.exchangeDeclare(exchange, BuiltinExchangeType.TOPIC);<br><br>    String message = <span class="hljs-string">&quot;Animal World!&quot;</span>;<br>    String[] routingKeys = <span class="hljs-keyword">new</span> String[<span class="hljs-number">9</span>];<br>    routingKeys[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;quick.orange.rabbit&quot;</span>;<br>    routingKeys[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;lazy.orange.elephant&quot;</span>;<br>    routingKeys[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;quick.orange.fox&quot;</span>;<br>    routingKeys[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;lazy.brown.fox&quot;</span>;<br>    routingKeys[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;lazy.pink.rabbit&quot;</span>;<br>    routingKeys[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;quick.brown.fox&quot;</span>;<br>    routingKeys[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;orange&quot;</span>;<br>    routingKeys[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;quick.orange.male.rabbit&quot;</span>;<br>    routingKeys[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;lazy.orange.male.rabbit&quot;</span>;<br><br>    <span class="hljs-keyword">for</span> (String routingKey : routingKeys) &#123;<br>      channel.basicPublish(exchange, routingKey, <span class="hljs-keyword">null</span>, message.getBytes());<br>      System.out.println(<span class="hljs-string">&quot;发送了：&quot;</span> + message + <span class="hljs-string">&quot;routingKey: &quot;</span> + routingKey);<br>    &#125;<br><br>    channel.close();<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Comsumer1.java<br>String exchange = <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br>channel.queueBind(queueName, exchange, <span class="hljs-string">&quot;*.orange.*&quot;</span>);<br><br>Comsumer2.java<br>channel.queueBind(queueName, exchange, <span class="hljs-string">&quot;*.*.rabbit&quot;</span>);<br>channel.queueBind(queueName, exchange, <span class="hljs-string">&quot;lazy.#&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>先后启动消费者和生产者</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114740.png" alt="image-20201206114740744"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114752.png" alt="image-20201206114752264" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114808.png" alt="image-20201206114807946" style="zoom:25%;" /></p></li></ul><h2 id="SpringBoot-中使用-RabbitMQ"><a href="#SpringBoot-中使用-RabbitMQ" class="headerlink" title="SpringBoot 中使用 RabbitMQ"></a>SpringBoot 中使用 RabbitMQ</h2><h3 id="生产者应用"><a href="#生产者应用" class="headerlink" title="生产者应用"></a>生产者应用</h3><ul><li><p>引入起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>application.properties</code>中配置连接信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">producer</span><br><span class="hljs-meta">spring.rabbitmq.addresses</span>=<span class="hljs-string">192.168.56.106:5672</span><br><span class="hljs-meta">spring.rabbitmq.username</span>=<span class="hljs-string">admin</span><br><span class="hljs-meta">spring.rabbitmq.password</span>=<span class="hljs-string">password</span><br><span class="hljs-meta">spring.rabbitmq.virtual-host</span>=<span class="hljs-string">/</span><br><span class="hljs-meta">spring.rabbitmq.connection-timeout</span>=<span class="hljs-string">15000</span><br></code></pre></td></tr></table></figure></li><li><p>编写<code>TopicRabbitConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicRabbitConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;queue1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;queue2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title">exchange</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(<span class="hljs-string">&quot;bootExchange&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">bindingExchangeMessage1</span><span class="hljs-params">(Queue queue1, TopicExchange exchange)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue1).to(exchange).with(<span class="hljs-string">&quot;dog.red&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">bindingExchangeMessage2</span><span class="hljs-params">(Queue queue2, TopicExchange exchange)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue2).to(exchange).with(<span class="hljs-string">&quot;dog.#&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageSender</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AmqpTemplate rabbitMqTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send1</span><span class="hljs-params">()</span> </span>&#123;<br>        String message = <span class="hljs-string">&quot;this is message 1, routing key is dog.red.&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;发送消息：&quot;</span> + message);<br>        <span class="hljs-keyword">this</span>.rabbitMqTemplate.convertAndSend(<span class="hljs-string">&quot;bootExchange&quot;</span>, <span class="hljs-string">&quot;dog.red&quot;</span>, message);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send2</span><span class="hljs-params">()</span> </span>&#123;<br>        String message = <span class="hljs-string">&quot;this is message 2, routing key is dog.blank.&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;发送消息：&quot;</span> + message);<br>        <span class="hljs-keyword">this</span>.rabbitMqTemplate.convertAndSend(<span class="hljs-string">&quot;bootExchange&quot;</span>, <span class="hljs-string">&quot;dog.blank&quot;</span>, message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="消费者应用"><a href="#消费者应用" class="headerlink" title="消费者应用"></a>消费者应用</h3><ul><li><p>引入起步依赖</p></li><li><p>配置连接信息</p></li><li><p>编写消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RabbitListener(queues = &quot;queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver1</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Receiver1 :&quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RabbitListener(queues = &quot;queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver2</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Receiver2 :&quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>@RabbitListener(queues = &quot;queue2&quot;)</code>指定需要监听的队列</p></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><ul><li><p>使用单元测试的方式，发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProducerApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> MessageSender messageSender;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send1</span><span class="hljs-params">()</span> </span>&#123;<br>        messageSender.send1();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send2</span><span class="hljs-params">()</span> </span>&#123;<br>        messageSender.send2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/120050.png" alt="image-20201206120050774"></p></li><li><p>启动消费者应用</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/120130.png" alt="image-20201206120130521"></p></li></ul><h2 id="RabbitMQ-集群部署"><a href="#RabbitMQ-集群部署" class="headerlink" title="RabbitMQ 集群部署"></a>RabbitMQ 集群部署</h2><p>学习<a href="https://objcoding.com/2018/10/19/rabbitmq-cluster/">RabbitMQ集群原理与部署</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 基础知识</title>
    <link href="/2020/12/03/Nginx/"/>
    <url>/2020/12/03/Nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx 是一款轻量级的 Web 服务器、反向代理服务器及电子邮件代理服务器，其特点是占用内存小，并发能力强。</p><h2 id="Nginx-使用场景"><a href="#Nginx-使用场景" class="headerlink" title="Nginx 使用场景"></a>Nginx 使用场景</h2><h3 id="HTTP-的反向代理服务器"><a href="#HTTP-的反向代理服务器" class="headerlink" title="HTTP 的反向代理服务器"></a>HTTP 的反向代理服务器</h3><ul><li><p>正向代理</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/210919.png" alt="image-20201203210919188"></p></li><li><p>反向代理</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/211044.png" alt="image-20201203211044613"></p></li><li><p>Nginx 的反向代理</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/211409.png" alt="image-20201203211409241"></p></li><li><p>正向代理：是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送请求并指定原始服务器，然后代理向原始服务器转发请求并将获得的内容返回给客户端。</p></li><li><p>反向代理：代理服务器接收网络上的请求，它将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给原始请求的客户端。</p></li></ul><h3 id="动态静态资源分离"><a href="#动态静态资源分离" class="headerlink" title="动态静态资源分离"></a>动态静态资源分离</h3><ul><li>静态资源无需经过 Tomcat，Tomcat 只负责处理动态请求</li><li>Nginx 本身是一个静态资源服务器</li></ul><h2 id="Nginx-的优点"><a href="#Nginx-的优点" class="headerlink" title="Nginx 的优点"></a>Nginx 的优点</h2><ul><li>高并发、高性能</li><li>可扩展性好：模块化设计</li><li>可靠性高</li><li>热部署：不停止服务的情况下升级 Nginx</li><li>开源、可商用</li></ul><h2 id="Nginx-安装使用"><a href="#Nginx-安装使用" class="headerlink" title="Nginx 安装使用"></a>Nginx 安装使用</h2><h3 id="Nginx-在-CentOS7-下的安装"><a href="#Nginx-在-CentOS7-下的安装" class="headerlink" title="Nginx 在 CentOS7 下的安装"></a>Nginx 在 CentOS7 下的安装</h3><ul><li><p>安装 yum-utils</p><p><code>yum install yum-utils</code></p></li><li><p>为 Nginx 增加源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vi /etc/yum.repos.d/nginx.repo<br><br>[nginx-stable]<br>name=nginx stable repo<br>baseurl=http://nginx.org/packages/centos/7/$basearch/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br><br>[nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/7/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br></code></pre></td></tr></table></figure></li><li><p>查看 Nginx 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum list | grep nginx<br>nginx.x86_64                                1:1.18.0-2.el7.ngx         @nginx-stable<br>nginx-debug.x86_64                          1:1.8.0-1.el7.ngx          nginx-stable<br>nginx-debuginfo.x86_64                      1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-geoip.x86_64                   1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-geoip-debuginfo.x86_64         1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-image-filter.x86_64            1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-image-filter-debuginfo.x86_64  1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-njs.x86_64                     1:1.18.0+0.5.0-1.el7.ngx   nginx-stable<br>nginx-module-njs-debuginfo.x86_64           1:1.18.0+0.5.0-1.el7.ngx   nginx-stable<br>nginx-module-perl.x86_64                    1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-perl-debuginfo.x86_64          1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-xslt.x86_64                    1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-module-xslt-debuginfo.x86_64          1:1.18.0-2.el7.ngx         nginx-stable<br>nginx-nr-agent.noarch                       2.0.0-12.el7.ngx           nginx-stable<br>pcp-pmda-nginx.x86_64                       4.3.2-12.el7               base<br></code></pre></td></tr></table></figure></li><li><p>安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum install nginx 1:1.18.0-2.el7.ngx<br></code></pre></td></tr></table></figure></li><li><p>验证 Nginx 是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nginx -v<br>nginx version: nginx/1.18.0<br></code></pre></td></tr></table></figure></li><li><p>可能需要配置防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看防火墙状态</span><br>[root@localhost conf.d]# firewall-cmd --state<br>running<br><span class="hljs-meta">#</span><span class="bash"> 查看启用的端口</span><br>[root@localhost conf.d]# firewall-cmd --list-port<br>80/tcp<br><span class="hljs-meta">#</span><span class="bash"> 开放 80 端口 --permanent 永久生效</span><br>[root@localhost conf.d]# firewall-cmd --add-port=80/tcp --permanent<br></code></pre></td></tr></table></figure></li><li><p>或者同时打开 80 和443端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --permanent --zone=public --add-service=http<br>firewall-cmd --permanent --zone=public --add-service=https<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ul><h3 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nginx -h<br>nginx version: nginx/1.18.0<br>Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]<br>Options:<br>  -?,-h         : this help<br>  -v            : show version and exit<br>  -V            : show version and configure options then exit<br>  -t            : test configuration and exit<br>  -T            : test configuration, dump it and exit<br>  -q            : suppress non-error messages during configuration testing<br>  -s signal     : send signal to a master process: stop, quit, reopen, reload<br>  -p prefix     : set prefix path (default: /etc/nginx/)<br>  -c filename   : set configuration file (default: /etc/nginx/nginx.conf)<br>  -g directives : set global directives out of configuration file<br></code></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>?/h</code></td><td>显示帮助信息</td></tr><tr><td><code>v/V</code></td><td>显示版本信息</td></tr><tr><td><code>c</code></td><td>使用指定的配置文件</td></tr><tr><td><code>g</code></td><td>指定配置指令</td></tr><tr><td><code>p</code></td><td>指定运行目录</td></tr><tr><td><code>t/T</code></td><td>测试配置文件编写是否正确</td></tr><tr><td><code>s</code></td><td>向 master 进程发送命令</td></tr><tr><td><code>stop</code></td><td>立即停止</td></tr><tr><td><code>quit</code></td><td>优雅停止</td></tr><tr><td><code>reopen</code></td><td>重新开始记录日志文件</td></tr><tr><td><code>reload</code></td><td>重启</td></tr></tbody></table><h3 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h3><ul><li><p>Nginx 相关的配置文件在<code>/etc/nginx/</code>目录中 </p></li><li><p>Nginx 的主配置文件是<code>/etc/nginx/nginx.conf</code></p></li><li><p>Nginx 日志文件<code>access.log</code>和<code>error.log</code>位于<code>/var/log/nginx/</code>目录下</p></li><li><p>基础语法：</p><ul><li>使用<code>;</code>结尾</li><li>使用<code>&#123;&#125;</code>组织多条指令</li><li>使用<code>include</code>引入其它配置文件</li><li>使用<code>#</code>注释</li><li><code>$</code>表示变量</li></ul></li><li><p>Nginx 默认配置文件及注释<code>nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  nginx;<br><span class="hljs-comment"># 工作进程数</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment"># Nginx 的错误日志</span><br><span class="hljs-attribute">error_log</span>  /var/log/nginx/error.log <span class="hljs-literal">warn</span>;<br><span class="hljs-comment"># Nginx 的pid，pid 是文本文件，只有一行，记录了该进程的 ID</span><br><span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-comment"># 每个进程最大连接数</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-comment"># 自定义日志格式</span><br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-comment"># 访问日志</span><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br><br>    <span class="hljs-comment"># 高效传输文件模式</span><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nopush</span>     <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment"># 请求超时时间</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>default.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 每一个 server 对应着一个虚拟主机或域名</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment"># 监听端口</span><br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-comment"># server_name  localhost;</span><br><br>    <span class="hljs-comment">#charset koi8-r;</span><br>    <span class="hljs-comment">#access_log  /var/log/nginx/host.access.log  main;</span><br><br>    <span class="hljs-comment"># 一个 server 可以配置多个 location ，针对不同的访问路径做配置</span><br>    <span class="hljs-comment"># 访问首页</span><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   /usr/share/nginx/html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br><br>    <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>    <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># 当出现 5XX 状态码时，重定向到新页面</span><br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-attribute">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   /usr/share/nginx/html;<br>    &#125;<br><br>    <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>    <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>    <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>    <span class="hljs-comment">#    root           html;</span><br>    <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>    <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>    <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>    <span class="hljs-comment">#    include        fastcgi_params;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>    <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>    <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>    <span class="hljs-comment">#</span><br>  <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>    <span class="hljs-comment">#    deny  all;</span><br>    <span class="hljs-comment">#&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Nginx 的内置全局变量</p><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td><code>$host</code></td><td>请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名</td></tr><tr><td><code>$request_method</code></td><td>客户端的请求类型，如 <code>GET</code>、<code>POST</code></td></tr><tr><td><code>$remote_addr</code></td><td>客户端的 IP 地址</td></tr><tr><td><code>$remote_port</code></td><td>客户端的端口</td></tr><tr><td><code>$args</code></td><td>请求中的参数</td></tr><tr><td><code>$content-length</code></td><td>请求头的 <code>Content-length</code> 字段</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端 agent 信息</td></tr><tr><td><code>$http_cookies</code></td><td>Cookies 信息</td></tr><tr><td><code>$server_protocol</code></td><td>请求使用的协议</td></tr><tr><td><code>$server_address</code></td><td>服务器地址</td></tr><tr><td><code>$server_name</code></td><td>服务器名称</td></tr><tr><td><code>$server_port</code></td><td>服务器的端口号</td></tr></tbody></table></li></ul><h3 id="Nginx-开启压缩"><a href="#Nginx-开启压缩" class="headerlink" title="Nginx 开启压缩"></a>Nginx 开启压缩</h3><p><code>ngx_http_gzip_module</code> 为 Nginx 提供了 <code>gzip</code> 的压缩支持，可以减少传输资源，节省宽带，但会增加 CPU 消耗。</p><p>主要参数有：</p><table><thead><tr><th>参数名</th><th>参数值</th><th>描述</th></tr></thead><tbody><tr><td><code>gzip</code></td><td>`on</td><td>off`</td></tr><tr><td><code>gzip_comp_level</code></td><td>1 ~ 9</td><td>压缩级别</td></tr><tr><td><code>gzip_min_length</code></td><td></td><td>小于此设定值的文件不会被压缩，长度来源于 <code>Content-Length</code> 字段</td></tr><tr><td><code>gzip_types</code></td><td><code>text/html</code></td><td>进行压缩的 MIME 类型</td></tr></tbody></table><h3 id="Nginx-配置反向代理"><a href="#Nginx-配置反向代理" class="headerlink" title="Nginx 配置反向代理"></a>Nginx 配置反向代理</h3><p><code>ngx_http_upstream_module</code> 为 Nginx 提供列反向代理功能。此模块用于将多个服务器定义为服务器组，可以通过 <code>proxy_pass</code> 传递指令来引用服务器组。</p><p>一个简单的配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br>    <br>    <span class="hljs-attribute">upstream</span> springboot&#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8082</span>;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <br>        <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://springboot;<br>        &#125;<br>        <br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   /usr/share/nginx/html;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Nginx-负载均衡策略"><a href="#Nginx-负载均衡策略" class="headerlink" title="Nginx 负载均衡策略"></a>Nginx 负载均衡策略</h3><p>upstream 默认依照轮询的方式进行负载均衡，每一个请求按时间顺序逐一分配到不同的后端服务器。假使后端服务器故障，能主动剔除。除此之外，upstream 还有如下的分配策略：</p><ul><li><p>weight（权重）</p><p>weight 值和分配概率成正比，用于后端服务器性能不均的情况下。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> springboot&#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8080</span> weight=<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span> weight=<span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8082</span> weight=<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ip_hash（访问 IP）</p><p>每一个请求按访问 IP 的 hash 运算结果分配到指定的后端服务器，能够解决 session 的问题。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> springboot&#123;<br>    ip_hash;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8082</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>fair</p><p>根据页面大小、加载时间长短智能的进行负载均衡。</p></li><li><p>least_conn（最少连接）</p><p>下一个请求将被分派到活动连接数量最少的服务器。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础</title>
    <link href="/2020/12/01/Docker%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/12/01/Docker%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker-基础概念"><a href="#Docker-基础概念" class="headerlink" title="Docker 基础概念"></a>Docker 基础概念</h2><p>Docker 是一个用来装程序及其环境的容器，属于Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><h3 id="Docker-的用途"><a href="#Docker-的用途" class="headerlink" title="Docker 的用途"></a>Docker 的用途</h3><ul><li>提供统一的环境</li><li>提供快速拓展、弹性伸缩的云服务</li><li>防止其他用户的进程把服务器资源占用过多</li></ul><h3 id="Docker-的特点"><a href="#Docker-的特点" class="headerlink" title="Docker 的特点"></a>Docker 的特点</h3><ul><li>标准化<ol><li>运输方式：把程序和环境从一个机器运到另一个机器</li><li>存储方法：程序和环境的存储</li><li>API 接口</li></ol></li><li>灵活：即使是最复杂的应用也可以集装箱化</li><li>轻量级：容器利用并共享主机内核</li><li>便携式：可以在本地构造，部署到云，并可以在任何地方运行</li></ul><h2 id="Docker-组成"><a href="#Docker-组成" class="headerlink" title="Docker 组成"></a>Docker 组成</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/214528.png" alt="image-20201202214527746"></p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/214925.png" alt="image-20201202214925288"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/215018.png" alt="image-20201202215018108"></p><p>镜像存储：联合文件系统，UnionFS</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li>镜像类似于 Java 中的类，而容器类似于实例</li><li>容器层可以修改，镜像是不可以修改的</li><li>同一个镜像可以生成多个独立的容器，容器之间互不干扰</li></ul><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><ul><li>hub.docker.com</li><li>私有、共有仓库</li></ul><h2 id="Client、Deamon"><a href="#Client、Deamon" class="headerlink" title="Client、Deamon"></a>Client、Deamon</h2><ul><li>client 提供给用户一个终端，用户输入 Docker 提供的命令来管理本地或远程的服务器</li><li>deamon：服务端守护进程，接收 client 发送的命令并执行相应的操作</li></ul><h3 id="Docker-的网络模式"><a href="#Docker-的网络模式" class="headerlink" title="Docker 的网络模式"></a>Docker 的网络模式</h3><ul><li>Bridge</li><li>Host</li><li>None</li></ul><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h3 id="Docker-在-CentOS7-的安装"><a href="#Docker-在-CentOS7-的安装" class="headerlink" title="Docker 在 CentOS7 的安装"></a>Docker 在 CentOS7 的安装</h3><ul><li><p>查看 CentOS版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/redhat-release<br>CentOS Linux release 7.9.2009 (Core)<br></code></pre></td></tr></table></figure></li><li><p>设置阿里云的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>--2020-12-02 22:36:00--  http://mirrors.aliyun.com/repo/Centos-7.repo<br>正在解析主机 mirrors.aliyun.com (mirrors.aliyun.com)... 157.148.73.246, 157.148.73.241, 157.148.73.242, ...<br>正在连接 mirrors.aliyun.com (mirrors.aliyun.com)|157.148.73.246|:80... 已连接。<br>已发出 HTTP 请求，正在等待回应... 200 OK<br>长度：2523 (2.5K) [application/octet-stream]<br>正在保存至: “/etc/yum.repos.d/CentOS-Base.repo”<br><br><span class="hljs-meta">100%</span><span class="bash">[======================================&gt;] 2,523       --.-K/s 用时 0s</span><br><br>2020-12-02 22:36:00 (499 MB/s) - 已保存 “/etc/yum.repos.d/CentOS-Base.repo” [2523/2523])<br></code></pre></td></tr></table></figure></li><li><p>更新 yum</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum clean all<br>已加载插件：fastestmirror<br>正在清理软件源： base docker-ce-stable extras updates<br>Cleaning up list of fastest mirrors<br><br>[root@localhost ~]# yum makecache<br>已加载插件：fastestmirror<br>Determining fastest mirrors<br> * base: mirrors.aliyun.com<br> * extras: mirrors.aliyun.com<br> * updates: mirrors.aliyun.com<br>base                                                     | 3.6 kB     00:00<br>docker-ce-stable                                         | 3.5 kB     00:00<br>extras                                                   | 2.9 kB     00:00<br>updates                                                  | 2.9 kB     00:00<br>(1/14): base/7/x86_64/group_gz                             | 153 kB   00:00<br>(2/14): base/7/x86_64/filelists_db                         | 7.2 MB   00:00<br><span class="hljs-meta">#</span><span class="bash"> .....</span><br>(14/14): updates/7/x86_64/other_db                         | 225 kB   00:00<br>元数据缓存已建立<br><br>[root@localhost ~]# yum check-update<br><br>[root@localhost ~]# yum update<br></code></pre></td></tr></table></figure></li><li><p>安装所需的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure></li><li><p>为 Docker 指定稳定的存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>已加载插件：fastestmirror<br>adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo<br>repo saved to /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>查看 Docker 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum list docker-ce --showduplicates | sort -r<br></code></pre></td></tr></table></figure></li><li><p>安装（可指定版本）Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# systemctl start docker<br><br><span class="hljs-meta">#</span><span class="bash"> 设置开机自启</span><br>[root@localhost ~]# systemctl enable docker<br></code></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker version<br>[root@localhost ~]# docker info<br></code></pre></td></tr></table></figure></li></ul><h3 id="运行第一个-Docker-容器"><a href="#运行第一个-Docker-容器" class="headerlink" title="运行第一个 Docker 容器"></a>运行第一个 Docker 容器</h3><ul><li><p>下载镜像</p><p><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker pull hello-world<br>Using default tag: latest<br>latest: Pulling from library/hello-world<br>0e03bdcc26d7: Pull complete<br>Digest: sha256:e7c70bb24b462baa86c102610182e3efcb12a04854e8c582838d92970a09f323<br>Status: Downloaded newer image for hello-world:latest<br>docker.io/library/hello-world:latest<br></code></pre></td></tr></table></figure></li><li><p>查看镜像</p><p><code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>hello-world         latest              bf756fb1ae65        11 months ago       13.3kB<br></code></pre></td></tr></table></figure></li><li><p>运行镜像</p><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker run hello-world<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image which runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, which sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br><span class="hljs-meta"> $</span><span class="bash"> docker run -it ubuntu bash</span><br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure></li></ul><h3 id="运行-Nginx-容器"><a href="#运行-Nginx-容器" class="headerlink" title="运行 Nginx 容器"></a>运行 Nginx 容器</h3><ul><li><p>拉取 Nginx 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker pull hub.c.163.com/library/nginx:latest<br>latest: Pulling from library/nginx<br>5de4b4d551f8: Pull complete<br>d4b36a5e9443: Pull complete<br>0af1f0713557: Pull complete<br>Digest: sha256:f84932f738583e0169f94af9b2d5201be2dbacc1578de73b09a6dfaaa07801d6<br>Status: Downloaded newer image for hub.c.163.com/library/nginx:latest<br>hub.c.163.com/library/nginx:latest<br></code></pre></td></tr></table></figure></li><li><p>运行 Nginx 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker run -d hub.c.163.com/library/nginx:latest<br>0708d1119dfedcd40371935d901fc460682d6eb8cc0177b510b47eaa8ffeb506<br></code></pre></td></tr></table></figure></li><li><p>登入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker exec -it 0708 bash<br>root@0708d1119dfe:/#<br><br><br>root@0708d1119dfe:/# which nginx<br>/usr/sbin/nginx<br></code></pre></td></tr></table></figure></li><li><p>停止容器</p><p><code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker stop 0708<br>0708<br></code></pre></td></tr></table></figure></li><li><p>使用端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker run -d -p 8080:80 hub.c.163.com/library/nginx:latest<br>8dc5cef54fcf00dc4f5e428d1de14c8efe6c867b9e2f4870078d99bf3c0e0cef<br></code></pre></td></tr></table></figure><p><code>-p, --publish list     Publish a container&#39;s port(s) to the host  -P, --publish-all        Publish all exposed ports to random ports</code></p></li><li><p>查看进行端口映射的容器信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker ps<br>CONTAINER ID        IMAGE                                COMMAND                  CREATED              STATUS              PORTS                  NAMES<br>8dc5cef54fcf        hub.c.163.com/library/nginx:latest   &quot;nginx -g &#x27;daemon of…&quot;   About a minute ago   Up About a minute   0.0.0.0:8080-&gt;80/tcp   dreamy_ritchie<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# netstat -na| grep 8080<br>tcp6       0      0 :::8080                 :::*                    LISTEN<br></code></pre></td></tr></table></figure></li><li><p>在浏览器访问 Nginx</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/232056.png" alt="image-20201202232056733"></p></li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="简单的-Dockerfile"><a href="#简单的-Dockerfile" class="headerlink" title="简单的 Dockerfile"></a>简单的 Dockerfile</h3><ul><li><p>编写 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:latest<br><span class="hljs-keyword">MAINTAINER</span> xianglin<br><span class="hljs-keyword">CMD</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;hello my dockerfile&#x27;</span></span><br></code></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker build -t hello-docker .<br>Sending build context to Docker daemon  15.36kB<br>Step 1/3 : FROM alpine:latest<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> d6e46aa2470d</span><br>Step 2/3 : MAINTAINER xianglin<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Using cache</span><br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 5b2571b3eae2</span><br>Step 3/3 : CMD echo &#x27;hello my dockerfile&#x27;<br><span class="hljs-meta"> ---&gt;</span><span class="bash"> Using cache</span><br><span class="hljs-meta"> ---&gt;</span><span class="bash"> 465286d0513b</span><br>Successfully built 465286d0513b<br>Successfully tagged hello-docker:latest<br></code></pre></td></tr></table></figure></li><li><p>查看镜像、运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker images<br>REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE<br>hello-docker                  latest              465286d0513b        41 seconds ago      5.57MB<br>alpine                        latest              d6e46aa2470d        5 weeks ago         5.57MB<br>hello-world                   latest              bf756fb1ae65        11 months ago       13.3kB<br>hub.c.163.com/library/nginx   latest              46102226f2fd        3 years ago         109MB<br><span class="hljs-meta">#</span><span class="bash"> hello-docker 基于 alpine 构建</span><br>[root@localhost ~]# docker run hello-docker<br>hello my dockerfile<br></code></pre></td></tr></table></figure></li></ul><h2 id="常用软件工具的-docker-命令"><a href="#常用软件工具的-docker-命令" class="headerlink" title="常用软件工具的 docker 命令"></a>常用软件工具的 docker 命令</h2><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><ul><li><p>在 Docker 实例中安装软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 登入容器</span><br>docker exec -it 7ec9e6cf98a9 bash<br><span class="hljs-meta">#</span><span class="bash"> 替换源</span><br>sed -i s@/deb.debian.org/@/mirrors.163.com/@g /etc/apt/sources.list<br><span class="hljs-meta">#</span><span class="bash"> 更新源、安装软件</span><br>apt update<br>apt install vim<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/_/mysql">MySQL</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mysql-dev -e MYSQL_ROOT_PASSWORD=12345678 -e MYSQL_DATABASE=dev -e MYSQL_USER=dev -e MYSQL_PASSWORD=password -p 3306:3306 -d mysql:latest<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/r/idoop/zentao">禅道</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/zbox &amp;&amp; \<br>docker run -d -p 80:80 -p 3306:3306 \<br>        -e ADMINER_USER=&quot;root&quot; -e ADMINER_PASSWD=&quot;password&quot; \<br>        -e BIND_ADDRESS=&quot;false&quot; \<br>        -v /data/zbox/:/opt/zbox/ \<br>        --name zentao-server \<br>        idoop/zentao:latest<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/r/jenkins/jenkins">Jenkins</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /data/jenkins &amp;&amp; \<br>docker run -d -p 8080:8080 -p 50000:50000 \ <br>-v /data/jenkins:/var/jenkins_home \ <br>--restart always \ <br>jenkins/jenkins:lts-jdk11<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/r/gitlab/gitlab-ce">GitLab</a></p><p><a href="https://docs.gitlab.cn/jh/install/docker.html">中文教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --detach \<br>  --hostname gitlab.example.com \<br>  --publish 443:443 --publish 80:80 --publish 22:22 \<br>  --name gitlab \<br>  --restart always \<br>  --volume /data/gitlab/config:/etc/gitlab \<br>  --volume /data/gitlab/logs:/var/log/gitlab \<br>  --volume /data/gitlab/data:/var/opt/gitlab \<br>  --shm-size 256m \<br>  gitlab/gitlab-ee:latest<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/_/mongo">MongoDB</a></p><p>参见：<a href="https://www.jianshu.com/p/2181b2e27021">Docker版MongoDB的安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p .docker/data/mongodb &amp;&amp; \<br>docker run -d -p 27017:27017 -v ~/.docker/data/mongodb:/data/db -e MONGO_INITDB_ROOT_PASSWORD=mongomongo -e MONGO_INITDB_ROOT_USERNAME=mongo --name mongo mongo <br><br><span class="hljs-comment"># 进入容器中的 MongoDB 命令行</span><br>docker <span class="hljs-built_in">exec</span> -it mongo mongo admin<br><span class="hljs-comment"># 创建管理员账户</span><br>db.createUser(&#123; user: <span class="hljs-string">&#x27;mongo&#x27;</span>, <span class="hljs-built_in">pwd</span>: <span class="hljs-string">&#x27;mongomongo&#x27;</span>, roles: [ &#123; role: <span class="hljs-string">&quot;root&quot;</span>, db: <span class="hljs-string">&quot;admin&quot;</span> &#125; ] &#125;);<br></code></pre></td></tr></table></figure></li><li><p><a href="https://hub.docker.com/_/redis/">Redis</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name some-redis -d -p 6379:6379 redis <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式基础</title>
    <link href="/2020/12/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/12/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式基础"><a href="#分布式基础" class="headerlink" title="分布式基础"></a>分布式基础</h1><h2 id="分布式含义"><a href="#分布式含义" class="headerlink" title="分布式含义"></a>分布式含义</h2><h3 id="权威定义"><a href="#权威定义" class="headerlink" title="权威定义"></a>权威定义</h3><p>利用物理架构形成多个自治的处理元素，不共享主内存，但是通过发送信息合作。</p><h2 id="分布式作用"><a href="#分布式作用" class="headerlink" title="分布式作用"></a>分布式作用</h2><h3 id="分布式的好处"><a href="#分布式的好处" class="headerlink" title="分布式的好处"></a>分布式的好处</h3><ul><li>增大系统容器</li><li>加强系统可用性</li><li>因为模块化，所有系统模块重用度更高</li><li>因为软件服务模块被拆分，开发和发布速度可以并行而变得快</li><li>系统扩展性更高</li><li>团队协作、技术升级更容易</li></ul><h2 id="分布式与单体结构对比"><a href="#分布式与单体结构对比" class="headerlink" title="分布式与单体结构对比"></a>分布式与单体结构对比</h2><table><thead><tr><th></th><th>单体架构</th><th>分布式架构</th></tr></thead><tbody><tr><td>新人的学习成本</td><td>业务逻辑成本高</td><td>架构逻辑成本高</td></tr><tr><td>部署、运维</td><td>容易</td><td>发布频繁、发布顺序复杂、运维难</td></tr><tr><td>隔离性</td><td>一损俱损，殃及鱼池</td><td>故障影响范围小</td></tr><tr><td>架构设计</td><td>难度低</td><td>难度巨大</td></tr><tr><td>系统性能</td><td>响应快、吞吐量小</td><td>响应慢、吞吐量大</td></tr><tr><td>测试成本</td><td>低</td><td>很高</td></tr><tr><td>技术多样性</td><td>技术单一且封闭</td><td>技术多样且开放</td></tr><tr><td>系统扩展性</td><td>扩展性差</td><td>扩展性很好</td></tr><tr><td>系统管理成本</td><td>成本低</td><td>成本高</td></tr></tbody></table><h2 id="CAP-定理"><a href="#CAP-定理" class="headerlink" title="CAP 定理"></a>CAP 定理</h2><h3 id="CAP-的重要性"><a href="#CAP-的重要性" class="headerlink" title="CAP 的重要性"></a>CAP 的重要性</h3><ul><li>C（Consistency，一致性）：读操作是否总能读到前一个写操作的结果</li><li>A（Availability，可用性）：非故障节点应该在合理的时间内做出合理的响应</li><li>P（Partition tolerance，分区容错性）：当出现网络分区现象后，系统能够继续运行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/222343.png" alt="image-20201201222342807"></p><h2 id="集群、分布式、微服务的区别"><a href="#集群、分布式、微服务的区别" class="headerlink" title="集群、分布式、微服务的区别"></a>集群、分布式、微服务的区别</h2><h3 id="集群和分布式"><a href="#集群和分布式" class="headerlink" title="集群和分布式"></a>集群和分布式</h3><ul><li>分布式：一个业务拆分为多个子业务，部署在不同的服务器上</li><li>集群：同一个业务，部署在多个服务器上</li></ul><h3 id="集群和微服务"><a href="#集群和微服务" class="headerlink" title="集群和微服务"></a>集群和微服务</h3><ul><li>集群：分散压力</li><li>微服务：分散能力</li></ul><h3 id="微服务和分布式"><a href="#微服务和分布式" class="headerlink" title="微服务和分布式"></a>微服务和分布式</h3><ul><li>微服务是架构设计方式</li><li>分布式是系统部署方法</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal 基础</title>
    <link href="/2020/11/30/ThreadLocal/"/>
    <url>/2020/11/30/ThreadLocal/</url>
    
    <content type="html"><![CDATA[<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="ThreadLocal-典型应用场景"><a href="#ThreadLocal-典型应用场景" class="headerlink" title="ThreadLocal 典型应用场景"></a>ThreadLocal 典型应用场景</h3><p>场景介绍：资源持有、线程安全、线程一致、并发计算</p><h4 id="线程独享对象"><a href="#线程独享对象" class="headerlink" title="线程独享对象"></a>线程独享对象</h4><ul><li>每个 Thread 内有自己的实例副本，各个线程间不共享。</li></ul><h4 id="线程保存全局变量（资源持有）"><a href="#线程保存全局变量（资源持有）" class="headerlink" title="线程保存全局变量（资源持有）"></a>线程保存全局变量（资源持有）</h4><ul><li>避免参数在各个方法之间传递</li></ul><h3 id="ThreadLocal-主要-API"><a href="#ThreadLocal-主要-API" class="headerlink" title="ThreadLocal 主要 API"></a>ThreadLocal 主要 API</h3><h4 id="ThreadLocal-lt-T-gt"><a href="#ThreadLocal-lt-T-gt" class="headerlink" title="ThreadLocal&lt;T&gt;()"></a><code>ThreadLocal&lt;T&gt;()</code></h4><p>构造函数</p><h4 id="initialValue"><a href="#initialValue" class="headerlink" title="initialValue"></a><code>initialValue</code></h4><p>返回当前线程对应的“初始值”，是一个延迟加载的方法，只有在调用<code>get</code>的时候，才会触发</p><p>一个线程只需要调用一次此方法，可以调用<code>remove</code>方法删除后在调用<code>initialValue</code></p><h4 id="set-get"><a href="#set-get" class="headerlink" title="set / get"></a><code>set</code> / <code>get</code></h4><p>为这个线程设置一个新值</p><p>获取保存的值，如果为空，则调用<code>initialValue</code>方法初始化</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a><code>remove</code></h4><p>回收值</p><h3 id="ThreadLocal-基本原理"><a href="#ThreadLocal-基本原理" class="headerlink" title="ThreadLocal 基本原理"></a>ThreadLocal 基本原理</h3><p>ThreadLocal 在 Java 中使用哈希表实现。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202102/2021-01-30%2011-14-57%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2021-01-30 11-14-57屏幕截图"></p><h3 id="ThreadLocal-使用的注意点"><a href="#ThreadLocal-使用的注意点" class="headerlink" title="ThreadLocal 使用的注意点"></a>ThreadLocal 使用的注意点</h3><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><ul><li>某个对象不再被使用，但占用的内存无法被回收。</li><li>主动调用<code>remove</code>方法避免内存泄漏</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 线程池学习</title>
    <link href="/2020/11/29/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/11/29/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="线程池学习"><a href="#线程池学习" class="headerlink" title="线程池学习"></a>线程池学习</h1><h2 id="线程池概念"><a href="#线程池概念" class="headerlink" title="线程池概念"></a>线程池概念</h2><h3 id="使用线程池的优势"><a href="#使用线程池的优势" class="headerlink" title="使用线程池的优势"></a>使用线程池的优势</h3><p>线程池是一种基于池化管理线程的工具，经常出现在多线程服务器中。既避免处理任务时创建销毁线程的开销，也避免了线程数据膨胀导致过分调度的问题。使用线程池的好处有：</p><ul><li>降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li><li>提高响应速度：任务到达时，无需等待线程创建即可执行。</li><li>提高线程的可管理性：线程是稀缺资源，无限制的创建既会销毁系统资源，也会导致调度失衡，减低系统稳定性。使用线程池可以进行统一的分配、调优和监控。</li><li>提供更多更强大的功能：基于线程池提供的钩子函数，可以扩展线程池的行为。</li></ul><h2 id="线程池的设计与实现"><a href="#线程池的设计与实现" class="headerlink" title="线程池的设计与实现"></a>线程池的设计与实现</h2><h3 id="继承关系及类作用介绍"><a href="#继承关系及类作用介绍" class="headerlink" title="继承关系及类作用介绍"></a>继承关系及类作用介绍</h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/195501.png" alt="Executor" style="zoom:50%;" /><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a><code>Executor</code></h4><p><code>Executor</code> 接口提供了一种思想：将任务提交和任务执行分离。用户无需关注线程的创建、调度和任务执行过程，只需要将表示任务的 <code>Runnable</code> 对象提交到执行器 <code>Executor</code> 中，由 <code>Executor</code> 完成线程的调配和任务的执行部分。</p><h4 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a><code>ExecutorService</code></h4><p><code>ExecutorService</code> 接口增加了一些能力：</p><ol><li>扩展执行任务的能力：补充可以为一个或一批异步任务生成 <code>Future</code> 的方法。</li><li>提供了管理线程池的方法：停止线程池、查看任务数量等。</li></ol><h4 id="AbstractExecutorService"><a href="#AbstractExecutorService" class="headerlink" title="AbstractExecutorService"></a><code>AbstractExecutorService</code></h4><p><code>AbstractExecutorService</code> 是上层抽象类，将任务执行的流程串联起来，保证下层的实现只需要关注一个执行任务的方法即可。</p><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a><code>ThreadPoolExecutor</code></h4><p><code>ThreadPoolExecutor</code> 一方面维护自身的生命周期，另一方面管理线程和任务。</p><p>线程池在内部构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分为两部分：任务管理和线程管理。</p><p>任务管理充当生产者角色，当任务提交后，线程会判断该任务的后续流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。</p><p>线程管理部分是消费者，它们被维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则继续获取新的任务去执行，最终当线程获取不到任务时就会被回收。</p><h3 id="线程池生命周期管理"><a href="#线程池生命周期管理" class="headerlink" title="线程池生命周期管理"></a>线程池生命周期管理</h3><p>线程池内部使用一个变量来维护两个值：运行状态（runState）和线程数量（workCount）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger ctl = <span class="hljs-keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>高 3 位保存 runState，低 29 位保存 workCount，用一个变量存储两个值，可以避免使用锁维护两者的一致。</p><p>线程池的运行状态有 5 种，分别是：</p><table><thead><tr><th align="center">状态</th><th>含义</th></tr></thead><tbody><tr><td align="center"><code>RUNNING</code></td><td>能接收新任务，也能处理排队任务</td></tr><tr><td align="center"><code>SHUTWODN</code></td><td>关闭状态，不接受新任务，但处理排队任务</td></tr><tr><td align="center"><code>STOP</code></td><td>不接受新任务，不处理排队任务，并中断正在进行的任务</td></tr><tr><td align="center"><code>TIDYING</code></td><td>所有任务都已经终止，workerCount 为零，并调用<code>terminated</code>钩子方法</td></tr><tr><td align="center"><code>TERMINATED</code></td><td><code>terminated()</code>方法执行完成后进入该状态</td></tr></tbody></table><p>其生命周期转换关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202102/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BD%AC%E6%8D%A2.png" alt="线程池生命周期转换"></p><h3 id="任务执行机制"><a href="#任务执行机制" class="headerlink" title="任务执行机制"></a>任务执行机制</h3><p>所有任务的调度都是由 <code>execute</code> 方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行流程如下：</p><ol><li>首先检测线程池运行状态，如果不是 <code>RUNNING</code> ，则直接拒绝，线程池要保证在 <code>RUNNING</code> 状态下执行任务；</li><li>如果 <code>workerCount &lt; corePoolSize</code>，则创建并启动一个线程来执行新提交的任务；</li><li>如果 <code>workerCount &gt;= corePoolSize</code>，且线程池内的阻塞队列未满，则将该任务添加到阻塞队列中；</li><li>如果 <code>workCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize</code>，且线程池内的阻塞队列已满，则创建一个新线程来执行新提交的任务；</li><li>如果 <code>workerCount &gt;= maximumPoolSize</code>，并且线程池内的阻塞队列已满，则根据拒绝策略来处理该任务，默认的处理方式是直抛出异常。</li></ol><p>其执行流程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202102/%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="线程执行流程图"></p><p>任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数达到 <code>maximumPoolSize</code> 时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p><p>拒绝策略是一个接口，设计如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RejectedExecutionHandler</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>用户可以通过实现这个接口定制拒绝策略，也可以选择 JDK 提供的四种拒绝策略：</p><ul><li><p><code>AbortPolicy</code>：抛出<code>RejectedExecutionException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RejectedExecutionException(<span class="hljs-string">&quot;Task &quot;</span> + r.toString() +<br>                                       <span class="hljs-string">&quot; rejected from &quot;</span> +<br>                                       e.toString());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>DiscardPolicy</code>：什么也不做，直接忽略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>DiscardOldestPolicy</code>：丢弃执行队列中最老的任务，尝试为当前提交的任务腾出位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!e.isShutdown()) &#123;<br>    e.getQueue().poll();<br>    e.execute(r);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>CallerRunsPolicy</code>：直接由提交任务者执行这个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!e.isShutdown()) &#123;<br>    r.run();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>线程池的默认拒绝策略是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RejectedExecutionHandler defaultHandler = <span class="hljs-keyword">new</span> AbortPolicy();<br></code></pre></td></tr></table></figure><h3 id="Worker-线程管理"><a href="#Worker-线程管理" class="headerlink" title="Worker 线程管理"></a>Worker 线程管理</h3><p>线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内部工作线程 Worker，部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-comment">// worker 持有的线程</span><br>    <span class="hljs-keyword">final</span> Thread thread;<br>    <span class="hljs-comment">// 初始化的任务</span><br>    Runnable firstTask;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>       runWorker(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Worker 线程实现了<code>Runnable</code> 接口，并持有一个线程 <code>thread</code>，一个初始化任务 <code>firstTask</code>。<code>thread</code> 是在调用构造方式时通过 <code>ThreadFactory</code> 来创建的线程，可以用来执行任务；<code>firstTask</code> 用来保存传入的第一个任务。</p><p>线程池需要管理线程的生命周期，需要在线程长时间不允许的时候进行回收。线程池使用 <code>HashSet</code> 持有线程的引用，这样可以通过添加引用、移除引用的操作来控制线程的生命周期。</p><p>Worker 通过继承 AQS，使用 AQS 来实现独占锁这个功能。</p><ol><li><code>lock</code> 方法一旦获取了独占锁，表示当前线程正在执行任务中。</li><li>如果正在执行任务，则不应该中断线程，如果该线程现在不是独占锁状态，也就是空闲状态，说明它没有在处理任务，这时可以对该线程进行中断。</li><li>线程池在执行 <code>shutdown</code> 方法或 <code>tryTerminate</code> 方法时会调用 <code>interruptIdleWorkers</code> 方法来中断空闲线程，<code>interruptIdleWorkers</code> 方法会使用 <code>tryLock</code> 方法来判断线程池中的线程是否是空闲状态，如果线程是空闲状态则可以安全回收。</li></ol><p>增加线程是通过 <code>addWorker</code> 方法完成的。<code>addWorker</code> 方法有两个参数：<code>firstTask</code>、<code>core</code> 。<code>firstTask</code> 参数用于指定新增的线程执行的第一个任务，该参数可以为空；<code>core</code> 参数为 <code>true</code> 时表示新增线程时会判断当前活动的线程数是否少于 <code>corePoolSize</code> ，<code>false</code> 表示新增线程前需要判断当前活动线程数是否少于 <code>maximumPoolSize</code> ，其增加流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202102/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A2%9E%E5%8A%A0Worker%E6%AD%A5%E9%AA%A4.png" alt="线程池增加Worker步骤"></p><p>Worker 类中的 <code>run()</code> 方法调用了 <code>runWorker()</code> 方法来执行任务，其执行过程如下：</p><ol><li>循环通过 <code>getTask()</code> 方法获取任务；</li><li>如果线程池正在停止，那么保证当前线程是中断状态，否则保证当前线程不是中断状态；</li><li>执行任务。</li><li>获取不到任务时，执行 <code>processWorkerExit()</code> 方法主动销毁线程。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202102/runWorker%E6%AD%A5%E9%AA%A4.png" alt="runWorker步骤"></p><p>线程池中线程的销毁依赖 JVM 自动的回收，线程池做的工作就是根据当前线程池状维护一定数量的线程引用，防止这部分线程被 JVM 回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker 被创建出来后，就会不断循环获取任务执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当 Worker 无法获取到任务时，循环会结束，Worker 会主动消除自身在线程池内的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runWorker</span><span class="hljs-params">(Worker w)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-keyword">null</span> || (task = getTask()) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 执行任务</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 获取不到任务时，主动回收自己</span><br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processWorkerExit</span><span class="hljs-params">(Worker w, <span class="hljs-keyword">boolean</span> completedAbruptly)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> ReentrantLock mainLock = <span class="hljs-keyword">this</span>.mainLock;<br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        completedTaskCount += w.completedTasks;<br>        <span class="hljs-comment">// 将线程引用移除线程池</span><br>        workers.remove(w);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建和停止线程池"><a href="#创建和停止线程池" class="headerlink" title="创建和停止线程池"></a>创建和停止线程池</h2><h3 id="线程池的构造器的参数"><a href="#线程池的构造器的参数" class="headerlink" title="线程池的构造器的参数"></a>线程池的构造器的参数</h3><table><thead><tr><th>参数名</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><code>corePoolSize</code></td><td><code>int</code></td><td>核心线程数</td></tr><tr><td><code>maximumPoolSize</code></td><td><code>int</code></td><td>最大线程数</td></tr><tr><td><code>keepAliveTime</code></td><td><code>long</code></td><td>保持存活时间</td></tr><tr><td><code>workQueue</code></td><td><code>BlockingQueue</code></td><td>任务存储队列</td></tr><tr><td><code>threadFactory</code></td><td><code>ThreadFactory</code></td><td>使用 <code>threadFactory</code> 创建新的线程</td></tr><tr><td><code>handler</code></td><td><code>RejectedExecutionHandler</code></td><td>拒绝策略</td></tr></tbody></table><ul><li><p><code>corePoolSize</code>：指的是核心线程数。</p></li><li><p><code>maxPoolSize</code>：指的是最大线程数。</p><ol><li><p>如果线程数小于<code>corePoolSize</code>，创建一个新的线程来运行新任务；</p></li><li><p>如果线程数等于或大于<code>corePoolSize</code>但小于<code>maximumPoolSize</code>，则将任务添加到任务队列中；</p></li><li><p>如果队列已满，且线程数小于<code>maximumPoolSize</code>，则创建新线程；</p></li><li><p>如果队列已满，且线程数达到<code>maximumPoolSize</code>，则调用<code>handler</code>执行拒绝策略。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/174715.jpg" alt="线程池创建线程步骤" style="zoom:50%;" /></li></ol></li><li><p><code>keepAliveTime</code>：如果线程池当前的线程数多于<code>corePoolSize</code>，那么多余的线程闲置超过指定时间会被终止。</p></li><li><p><code>threadFactory</code>：创建线程的工厂。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/175254.png" alt="DefaultThreadFactory" style="zoom:50%;" /><p>默认线程池创建的线程的属性为：</p><ol><li>属于同一个<code>ThreadGroup</code></li><li>线程池和线程的名称按序号递增</li><li>不是 daemon 线程</li><li>线程的优先级为<code>NORM_PRIORITY</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String namePrefix = <span class="hljs-string">&quot;pool-&quot;</span> +<br>                          poolNumber.getAndIncrement() +<br>                         <span class="hljs-string">&quot;-thread-&quot;</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Thread <span class="hljs-title">newThread</span><span class="hljs-params">(Runnable r)</span> </span>&#123;<br>  Thread t = <span class="hljs-keyword">new</span> Thread(group, r,<br>                        namePrefix + threadNumber.getAndIncrement(),<br>                        <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (t.isDaemon())<br>    t.setDaemon(<span class="hljs-keyword">false</span>);<br>  <span class="hljs-keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)<br>    t.setPriority(Thread.NORM_PRIORITY);<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>workQueue</code>：任务队列</p><ol><li>直接交接：<code>SynchronousQueue</code></li><li>无界队列：<code>LinkedBlockingQueue</code></li><li>有界队列：<code>ArrayBlockingQueue</code></li></ol></li></ul><h3 id="Executors创建线程池"><a href="#Executors创建线程池" class="headerlink" title="Executors创建线程池"></a>Executors创建线程池</h3><table><thead><tr><th>方法名</th><th>功能</th><th>缺点</th></tr></thead><tbody><tr><td><code>newFixedThreadPool</code></td><td>创建固定大小的线程池</td><td>容易造成大量内存占用，导致 OOM</td></tr><tr><td><code>newSingleThreadExecutor</code></td><td>创建只有一个线程的线程池</td><td>当请求堆积的时候，占用大量内存</td></tr><tr><td><code>newCachedThreadPool</code></td><td>创建一个不设线程上限的线程池，任何任务都将立即执行</td><td>创建数量非常多的线程，导致 OOM</td></tr></tbody></table><ol><li><p><code>newFixedThreadPool</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads, ThreadFactory threadFactory)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),<br>                                threadFactory);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>newSingleThreadExecutor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newSingleThreadExecutor</span><span class="hljs-params">(ThreadFactory threadFactory)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FinalizableDelegatedExecutorService<br>    (<span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                            <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                            <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),<br>                            threadFactory));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>newCachedThreadPool</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newCachedThreadPool</span><span class="hljs-params">(ThreadFactory threadFactory)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                <span class="hljs-keyword">new</span> SynchronousQueue&lt;Runnable&gt;(),<br>                                threadFactory);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线程池的线程数量如何设定"><a href="#线程池的线程数量如何设定" class="headerlink" title="线程池的线程数量如何设定"></a>线程池的线程数量如何设定</h3><ul><li>CPU 密集型（加密、计算 hash）：最佳线程数为CPU 核心数的 1-2 倍左右；</li><li>耗时 IO 型（读写数据库、文件、网络）：最大线程数一般会大于 CPU 核心数很多倍。</li><li>线程数 = CPU 核心数 * (1 + 平均等待时间 / 平均工作时间)</li></ul><h3 id="停止线程池的方法"><a href="#停止线程池的方法" class="headerlink" title="停止线程池的方法"></a>停止线程池的方法</h3><ul><li><p><code>shutdown</code></p><ol><li>将线程池的状态置为<code>SHUTDOWN</code></li><li>调用此方法后，不允许继续提交任务，即调用指定的拒绝策略拒绝任务</li><li>所有在调用此方法前提交的任务都会被执行</li><li>所有任务被执行完毕，<code>ExecutorService</code>才会真正关闭</li></ol></li><li><p><code>shutdownNow</code></p><ol><li>将线程池的状态置为<code>STOP</code></li><li>使用中断操作尝试停止运行中的任务</li><li>返回未尚未执行的任务</li></ol></li><li><p><code>isShutdown</code>：线程池是否关闭</p></li><li><p><code>isTerminated</code>：判断线程池关闭后所有的任务是否都执行完了</p></li><li><p><code>awaitTermination</code>：阻塞，直到出现以下情况</p><ol><li><code>shutdown</code>调用后所有任务执行完成</li><li>超时返回</li><li>当前线程中断</li></ol></li></ul><h3 id="线程池钩子beforeExecute"><a href="#线程池钩子beforeExecute" class="headerlink" title="线程池钩子beforeExecute"></a>线程池钩子<code>beforeExecute</code></h3><p>实现一个可以暂停的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PauseableThreadPool</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ThreadPoolExecutor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PauseableThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize, <span class="hljs-keyword">int</span> maximumPoolSize, <span class="hljs-keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isPaused;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition condition = lock.newCondition();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeExecute</span><span class="hljs-params">(Thread t, Runnable r)</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (isPaused) &#123;<br>                condition.await();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pause</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            isPaused = <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resume</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            isPaused = <span class="hljs-keyword">false</span>;<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 事务管理</title>
    <link href="/2020/11/29/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <url>/2020/11/29/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h1><h2 id="事务的基础概念"><a href="#事务的基础概念" class="headerlink" title="事务的基础概念"></a>事务的基础概念</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul><li>事务是指逻辑上的一组操作，要么一起成功、要么一起失败。</li></ul><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ul><li>原子性：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性：一致性指事务前后数据的完整性必须保持一致。</li><li>隔离性：隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离。</li><li>持久性：持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，即使数据库发生故障也不应该对其有影响。</li></ul><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><ul><li><code>READ_UNCOMMITED</code>：允许读取还未提交的数据，可能导致脏读、不可重复读、幻读。</li></ul><ol><li><code>READ_COMMITTED</code>：允许读取并发事务已提交的数据，可防止脏读，但不可重复读、幻读仍可能发生。</li><li><code>REPEATABLE_READ</code>： 在统一事务中读取的数据保持一致，即使其他事务对其修改并提交。</li><li><code>SERIALIZABLE</code>：将并发事务串行化，解决一切问题。</li></ol><h2 id="Spring-接口介绍"><a href="#Spring-接口介绍" class="headerlink" title="Spring 接口介绍"></a>Spring 接口介绍</h2><h3 id="三个抽象接口"><a href="#三个抽象接口" class="headerlink" title="三个抽象接口"></a>三个抽象接口</h3><ul><li>事务管理器：<code>PlatformTransactionManager</code></li><li>事务定义信息（隔离级别、传播行为、超时、只读）：<code>TransactionDefinition</code></li><li>事务运行状态：<code>TransactionStatus</code></li></ul><h3 id="FlatformTransactionManager"><a href="#FlatformTransactionManager" class="headerlink" title="FlatformTransactionManager"></a><code>FlatformTransactionManager</code></h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/112045.png" alt="PlatformTransactionManager" style="zoom:50%;" /><h3 id="TranscationDefinition"><a href="#TranscationDefinition" class="headerlink" title="TranscationDefinition"></a><code>TranscationDefinition</code></h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/111550.png" alt="transactiondefinition" style="zoom:50%;" /><h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><table><thead><tr><th>事务传播行为</th><th>描述</th></tr></thead><tbody><tr><td><code>PROPAGATION_REQUIRED</code></td><td>支持当前事务，如果不存在就新建一个</td></tr><tr><td><code>PROPAGATION_SUPPORTS</code></td><td>支持当前事务，如果不存在就不使用事务</td></tr><tr><td><code>PROPAGATION_MANDATORY</code></td><td>支持当前事务，如果不存在则抛出异常</td></tr><tr><td><code>PROPAGATION_REQUIRES_NEW</code></td><td>创建一个新事务，如果有事务存在则挂起</td></tr><tr><td><code>PROPAGATION_NOT_SUPPORTED</code></td><td>以非事务方式运行，如果有事务存在则挂起</td></tr><tr><td><code>PROPAGATION_NEVER</code></td><td>以非事务方式运行，如果存在事务则抛出异常</td></tr><tr><td><code>PROPAGATION_NESTED</code></td><td>如果当前事务存在，则嵌套事务执行</td></tr></tbody></table><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a><code>TransactionStatus</code></h3><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/122018.png" alt="TransactionStatus" style="zoom:33%;" /><h2 id="Spring-事务管理操作"><a href="#Spring-事务管理操作" class="headerlink" title="Spring 事务管理操作"></a>Spring 事务管理操作</h2><h3 id="准备转账案例"><a href="#准备转账案例" class="headerlink" title="准备转账案例"></a>准备转账案例</h3><h4 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`account`</span><br>(<br>    <span class="hljs-string">`id`</span>    <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-string">`name`</span>  <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-string">`money`</span> <span class="hljs-built_in">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>    PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span> = <span class="hljs-keyword">InnoDB</span><br>  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> = utf8;<br>  <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> imooc_demo.account (<span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000.00</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> imooc_demo.account (<span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1000.00</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> imooc_demo.account (<span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1000.00</span>);  <br></code></pre></td></tr></table></figure><h4 id="实现-DAO-层"><a href="#实现-DAO-层" class="headerlink" title="实现 DAO 层"></a>实现 DAO 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accountAdd</span><span class="hljs-params">(String name, BigDecimal decimal)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accountSub</span><span class="hljs-params">(String name, BigDecimal decimal)</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setJdbcTemplate</span><span class="hljs-params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.jdbcTemplate = jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accountAdd</span><span class="hljs-params">(String name, BigDecimal decimal)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update account set money = money + ? where name = ?&quot;</span>;<br>        <span class="hljs-keyword">this</span>.jdbcTemplate.update(sql, decimal, name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accountSub</span><span class="hljs-params">(String name, BigDecimal decimal)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update account set money = money - ? where name = ?&quot;</span>;<br>        <span class="hljs-keyword">this</span>.jdbcTemplate.update(sql, decimal, name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现-Service-层"><a href="#实现-Service-层" class="headerlink" title="实现 Service 层"></a>实现 Service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(String from, String to, BigDecimal money)</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccountDao</span><span class="hljs-params">(AccountDao accountDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.accountDao = accountDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(String from, String to, BigDecimal money)</span> </span>&#123;<br>        accountDao.accountSub(from, money);<br>        accountDao.accountAdd(to, money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-XML-方式声明对象"><a href="#使用-XML-方式声明对象" class="headerlink" title="使用 XML 方式声明对象"></a>使用 XML 方式声明对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://hostip:port/dbname&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dao.AccountDaoImpl&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;service.AccountServiceImpl&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;accountDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <br></code></pre></td></tr></table></figure><h4 id="测试转账效果"><a href="#测试转账效果" class="headerlink" title="测试转账效果"></a>测试转账效果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImplTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">()</span> </span>&#123;<br>        accountService.transfer(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, BigDecimal.valueOf(<span class="hljs-number">200</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编程式的事务管理"><a href="#编程式的事务管理" class="headerlink" title="编程式的事务管理"></a>编程式的事务管理</h3><p>配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用于简化事务管理的代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在业务层中注入事务管理模板"><a href="#在业务层中注入事务管理模板" class="headerlink" title="在业务层中注入事务管理模板"></a>在业务层中注入事务管理模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> TransactionTemplate transactionTemplate;<br>  <span class="hljs-keyword">private</span> AccountDao accountDao;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTransactionTemplate</span><span class="hljs-params">(TransactionTemplate transactionTemplate)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.transactionTemplate = transactionTemplate;<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;person.xiangln.transaction.service.AccountServiceImpl&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;accountDao&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transactionTemplate&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;transactionTemplate&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用编程式事务"><a href="#使用编程式事务" class="headerlink" title="使用编程式事务"></a>使用编程式事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(String from, String to, BigDecimal money)</span> </span>&#123;<br>  transactionTemplate.executeWithoutResult(transactionStatus -&gt; &#123;<br>    accountDao.accountSub(from, money);<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    accountDao.accountAdd(to, money);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h3><h4 id="基于-Aspectj-的-XML-配置"><a href="#基于-Aspectj-的-XML-配置" class="headerlink" title="基于 Aspectj 的 XML 配置"></a>基于 Aspectj 的 XML 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transfer&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut1&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* person.xiangln.transaction.service.AccountService+.*(..))&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于注解的事务管理"><a href="#基于注解的事务管理" class="headerlink" title="基于注解的事务管理"></a>基于注解的事务管理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 基于注解的事务配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--开启注解事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(String from, String to, BigDecimal money)</span> </span>&#123;<br>  accountDao.accountSub(from, money);<br>  <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>  accountDao.accountAdd(to, money);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis 拦截器</title>
    <link href="/2020/10/31/MyBatis%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2020/10/31/MyBatis%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-插件原理及-PageHelper-分页插件介绍"><a href="#MyBatis-插件原理及-PageHelper-分页插件介绍" class="headerlink" title="MyBatis 插件原理及 PageHelper 分页插件介绍"></a>MyBatis 插件原理及 PageHelper 分页插件介绍</h1><h2 id="从-JDBC-开始"><a href="#从-JDBC-开始" class="headerlink" title="从 JDBC 开始"></a>从 JDBC 开始</h2><h3 id="JDBC-介绍"><a href="#JDBC-介绍" class="headerlink" title="JDBC 介绍"></a>JDBC 介绍</h3><ul><li><p>JDBC（Java Database Connectivity）API 是 Java 语言与广泛数据库产品交互的基础，JDBC 技术体现了 Java <code>&quot;write Once,Run AnyWhere&quot;</code>的思想，即Java 为数据库访问提供一套纯 Java API，同时提供一个驱动管理器（DriverManager）。数据库供应商提供自己的数据库驱动，并注册到 Java 提供的DriverManager 中。</p></li><li><p>普通的 Java 开发人员只需要基于 JDBC API 开发应用程序即可，不需要关注驱动的实现和驱动与数据库交互的逻辑。只有在程序运行时，才需要加载和使用相应的驱动。这也是基于 Maven 的项目在声明依赖的时候，可以将其依赖范围声明为<code>runtime</code>的原因。</p></li></ul><h3 id="JDBC-使用步骤"><a href="#JDBC-使用步骤" class="headerlink" title="JDBC 使用步骤"></a>JDBC 使用步骤</h3><ul><li><p>使用 JBDC 完成对数据库操作的基本步骤如下</p><ol><li><p>注册驱动数据库类；</p></li><li><p>通过<code>DriverManager#getConnection()</code>建立到指定数据库的连接；</p></li><li><p>通过<code>Connection</code>对象创建<code>Statement</code>；</p></li><li><p>通过<code>Statement</code>中相关方法执行 SQL，按业务处理其返回值；</p></li><li><p>释放资源，关闭数据库连接等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取数据库连接</span><br>connection = DriverManager.getConnection(<br>   properties.getProperty(<span class="hljs-string">&quot;jdbc.url&quot;</span>),<br>  properties.getProperty(<span class="hljs-string">&quot;jdbc.username&quot;</span>),<br>  properties.getProperty(<span class="hljs-string">&quot;jdbc.password&quot;</span>));<br><br><span class="hljs-comment">// 获取执行 SQL 的 Statement 对象</span><br>String listAllSql = <span class="hljs-string">&quot;select * from products&quot;</span>;<br>preparedStatement = connection.prepareStatement(listAllSql);<br><br><span class="hljs-comment">// 执行查询</span><br>resultSet = preparedStatement.executeQuery();<br><br><span class="hljs-comment">// 按业务要求处理查询结果</span><br><br><span class="hljs-comment">// 释放资源</span><br>resultSet.close();<br>preparedStatement.close();<br>connection.close();<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="基于-JDBC-的思考"><a href="#基于-JDBC-的思考" class="headerlink" title="基于 JDBC 的思考"></a>基于 JDBC 的思考</h3><ul><li><p>使用 JDBC API 开发的不足之处比较明显，仅针对上面的查询场景而言，有以下几点</p><ol><li>创建数据库连接、关闭连接释放资源等语句繁琐且冗余；</li><li>SQL 语句和业务代码糅合在一起，不便于维护；</li><li>需要自己解析查询结果。</li></ol></li><li><p><code>Commons DbUtils</code>和<code>Spring JDBC</code>都对 JDBC 做了封装，隐藏了创建数据库连接及释放资源等繁琐操作的处理过程，也提供了映射查询结果的方法，可以方便的将查询结果映射为 Map 或对应的 JavaBean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 DbUtils 的 QueryRunner 完成查询及结果映射</span><br>QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner(dataSource);<br>List&lt;Map&gt; mapList = queryRunner.query(sql,<span class="hljs-keyword">new</span> BeanListHandler&lt;&gt;(Map.class));<br><br><span class="hljs-comment">// 使用 Spring JdbcTemplate 完成查询并将结果映射为 JavaBean</span><br>List&lt;Employee&gt; list = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class));<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用-MyBatis"><a href="#使用-MyBatis" class="headerlink" title="使用 MyBatis"></a>使用 MyBatis</h2><ul><li>MyBatis 是一款优秀的支持自定义SQL查询、存储过程和高级映射的持久层框架，消除了几乎所有的JDBC代码和参数的手动设置以及结果集的处理。MyBatis 可以使用XML 或注解进行配置和映射，MyBatis 通过将参数映射到配置的 SQL 形成最终执行的 SQL 语句，最后将执行SQL 的结果映射成 Java 对象返回。</li><li>MyBatis 相关网站<ol><li>[mybatis](<a href="https://mybatis.org/mybatis-3/zh/index.html">mybatis – MyBatis 3 | 简介</a>)</li><li>[mybatis-spring](<a href="http://mybatis.org/spring/zh/">mybatis-spring – MyBatis-Spring | 简介</a>)</li><li>[mybatis-spring-boot](<a href="http://mybatis.org/spring-boot-starter/">mybatis-spring-boot – About</a>)</li></ol></li></ul><h3 id="MyBatis-配置文件mybatis-config-xml"><a href="#MyBatis-配置文件mybatis-config-xml" class="headerlink" title="MyBatis 配置文件mybatis-config.xml"></a>MyBatis 配置文件<code>mybatis-config.xml</code></h3><ul><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p></li><li><p>MyBatis 的配置包含如下项：</p><ul><li>configuration<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul></li><li><p>每个配置项的具体内容可以参照MyBatis官网或者MyBatis jar包中提供的<code>mybatis-3-config.dtd</code>或<code>mybatis-config.xsd</code>。需要注意的是，并不要求每个配置项必需存在，但是需要按照上述顺序进行配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)&gt;<br></code></pre></td></tr></table></figure></li><li><p>一个简单的配置示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc-mysql.properties&quot;</span>/&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;UNPOOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/ProductMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="MyBatis-映射文件Mapper-xml"><a href="#MyBatis-映射文件Mapper-xml" class="headerlink" title="MyBatis 映射文件Mapper.xml"></a>MyBatis 映射文件<code>Mapper.xml</code></h3><ul><li><p>MyBatis 的强大在于它的语句映射，在完成基本配置后，MyBatis 开发只需要将重点放在Mapper映射中。MyBatis的结果映射、动态SQL、缓存等配置都在<code>mapper.xml</code>文件中。</p></li><li><p><code>Mapper.xml</code>的部分配置项如下：</p><ul><li><code>cache</code> – 该命名空间的缓存配置。</li><li><code>cache-ref</code> – 引用其它命名空间的缓存配置。</li><li><code>resultMap</code> – 自定义结果集映射方式。</li><li><code>sql</code> – 定义可重用的 sql 块。</li><li><code>insert</code>、<code>update</code>、<code>delete</code>、<code>select</code> – 映射SQL语句。</li></ul></li><li><p>同样的，每个标签的使用细节可以参照MyBatis官网或者MyBatis jar包中提供的<code>mybatis-3-mapper.dtd</code>或<code>mybatis-mapper.xsd</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT mapper (cache-ref | cache | resultMap* | parameterMap* | sql* | insert* | update* | delete* | select* )+&gt;<br></code></pre></td></tr></table></figure></li><li><p>一个简单的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;product&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getProduct&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;site.xianglin.share.entity.Product&quot;</span>&gt;</span><br>        select prod_id, vend_id, prod_name, prod_price, prod_desc<br>        from products<br>        limit 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageProduct&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Map&quot;</span>&gt;</span><br>        select *<br>        from products<br>        limit #&#123;pageSize&#125; offset #&#123;offset&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageProductRowBounds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Map&quot;</span>&gt;</span><br>        select *<br>        from products<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="MyBatis-示例"><a href="#MyBatis-示例" class="headerlink" title="MyBatis 示例"></a>MyBatis 示例</h3><ul><li><p>基于以上示例配置，完善其他内容，并编写一个简单的测试类，体会 MyBatis 给 JDBC 开发带来的便捷。 MyBatis 的基础使用一般分为以下几步：</p><ol><li>在项目中引入MyBatis的依赖</li><li>通常创建基于XML的配置文件<code>mybatis-config.xml</code></li><li>通常创建基于XML的映射文件<code>ProductMapper.xml</code></li><li>通过配置文件创建<code>SqlSessionFactory</code></li><li>从<code>SqlSessionFactory</code>中获取<code>SqlSession</code>，完成数据库操作</li><li>对分析、处理结果数据</li></ol><p>其中4、5两步的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用MyBatis提供的Resources工具类获取配置文件，并由SqlSessionFactoryBuilder解析创建SqlSessionFactory</span><br>Reader resource = Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resource);<br><br><span class="hljs-comment">// 从SqlSessionFactory中获取SqlSession完成数据库操作，使用try-with-resources自动关闭资源</span><br><span class="hljs-keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;<br>    Product product = sqlSession.selectOne(<span class="hljs-string">&quot;product.getProduct&quot;</span>);<br>    Assert.assertNotNull(product);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="MyBatis-执行过程"><a href="#MyBatis-执行过程" class="headerlink" title="MyBatis 执行过程"></a>MyBatis 执行过程</h3><ul><li><p>测试方法执行成功后，不妨借助 IDE 的调试功能，简单跟踪 MyBatis 初始化、SQL 执行以及结果映射的过程。</p></li><li><p>从<code>SqlSessionFactoryBuilder</code>的<code>build</code>方法入手，<code>build</code>方法大致有三种类型的重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(InputStream inputStream, String environment, Properties properties)</span></span>;<br><span class="hljs-function">SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(Reader reader, String environment, Properties properties)</span>；</span><br><span class="hljs-function">  </span><br><span class="hljs-function">SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(Configuration config)</span>；</span><br></code></pre></td></tr></table></figure><p>且前两种方法都会调用<code>build(Configuration config)</code>。MyBatis 运行时的配置信息都保存在<code>Configuration</code>实例中，分析 MyBatis 基于配置文件初始化的步骤也就是分析配置信息从配置文件读取、解析并保存在到<code>Configuration</code>的过程。主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">XMLConfigBuilder parser = <span class="hljs-keyword">new</span> XMLConfigBuilder(reader, environment, properties);<br>parser.parse()<br></code></pre></td></tr></table></figure><p><code>parse</code>方法会调用<code>XMLConfigBuilder</code>中的<code>parseConfiguration</code>方法将 MyBatis 配置文件解析为<code>Configuration</code>实例。MyBatis 会读取配置文件中的各个配置项，做对应的处理，并将其赋值给<code>Configuration</code>中对应的属性。</p><p>有了<code>Configuration</code>实例后，就会调用 <code>build(Configuration config)</code>方法，生成<code>SqlSessionFactoryBuilder</code>实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(Configuration config)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSessionFactory(config);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>有了 <code>SqlSessionFactory</code>实例后，我们可以从中获得 <code>SqlSession</code> 的实例。<code>SqlSession</code> 提供了在数据库执行 SQL 命令所需的所有方法。通过 <code>SqlSession</code> 实例可以直接执行已映射的 SQL 语句，也可以获取接口对应的代理对象，并通过代理对象执行 SQL 语句。其过程比较简单，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Environment environment = configuration.getEnvironment();<br><span class="hljs-keyword">final</span> TransactionFactory transactionFactory = environment.getTransactionFactory();<br>tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br><span class="hljs-keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);<br></code></pre></td></tr></table></figure></li><li><p>获取<code>SqlSession</code>实例后就可以调用其中执行 SQL 语句的方法，以<code>sqlSession.selectOne()</code>方法为例，跟踪分析其执行过程。<code>SqlSession</code>的默认实现是<code>DefaultSqlSession</code>，按照<code>selectOne</code>的调用链路，最终会调用同类中<code>selectList</code>方法，方法签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span></span><br></code></pre></td></tr></table></figure><p>其中<code>statement</code>即为 Mapper 文件中配置的 SQL 语句的 <code>id</code> 属性，<code>parameter</code>为预编译 SQL 需要的参数，<code>rowBounds</code>是 MyBatis 提供的保存分页信息的对象。</p><p>在<code>selectList</code>方法中获取 MyBatis 初始化时解析并保存在<code>Configuration</code>实例中的<code>MappedStatement</code>对象，一个<code>MappedStatement</code>即对应一个映射SQL语句的标签。然后调用<code>executor</code>的<code>query</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">MappedStatement ms = configuration.getMappedStatement(statement);<br><span class="hljs-keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br></code></pre></td></tr></table></figure><p>在<code>query</code>方法中获取到<code>BoundSql</code>和<code>CacheKey</code>后继续调用抽象方法<code>doQuery</code>，该方法被<code>SimpleExecutor</code>重写。<code>BoundSql</code>负责保存SQL，而<code>CacheKey</code>与 MyBatis 的缓存机制相关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">BoundSql boundSql = ms.getBoundSql(parameterObject);<br>CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);<br><span class="hljs-keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);<br></code></pre></td></tr></table></figure><p>忽略缓存相关内容，在<code>doQuery</code>方法中获取<code>StatementHandler</code>对象，同时<code>StatementHandler</code>会创建并持有<code>ParameterHandler</code>用于设置参数，和<code>ResultSetHandler</code>用于处理结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Configuration configuration = ms.getConfiguration();<br>StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);<br>stmt = prepareStatement(handler, ms.getStatementLog());<br><span class="hljs-keyword">return</span> handler.query(stmt, resultHandler);<br></code></pre></td></tr></table></figure><p><code>prepareStatement</code>方法完成获取<code>Connection</code>对象、获取<code>Statement</code>和为预编译 SQL 占位符赋值等操作，至此一个基于 JDBC 的<code>Statement</code>对象创建完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement stmt;<br>Connection connection = getConnection(statementLog);<br>stmt = handler.prepare(connection, transaction.getTimeout());<br><span class="hljs-comment">// 为SQL占位符赋值</span><br>handler.parameterize(stmt);<br></code></pre></td></tr></table></figure></li><li><p><code>Statement</code>实例执行的代码很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PreparedStatement ps = (PreparedStatement) statement;<br>ps.execute();<br><span class="hljs-keyword">return</span> resultSetHandler.handleResultSets(ps);<br></code></pre></td></tr></table></figure></li><li><p>如果执行的是查询类 SQL，会调用<code>ResultSetHandler</code>的<code>handleResultSets</code>方法完成结果映射，假如使用了MyBatis提供的<code>RowBounds</code>参数，内存分页的过程也在这里完成。内存分页的实现很简单，调用<code>skipRows</code>将结果集的游标偏移 <code>offset</code> 位，同时遍历结果的时候只取 <code>limit</code> 条记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">skipRows</span><span class="hljs-params">(ResultSet rs, RowBounds rowBounds)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    <span class="hljs-comment">// TYPE_FORWARD_ONLY 结果集的游标只能向下滚动</span><br>    <span class="hljs-keyword">if</span> (rs.getType() != ResultSet.TYPE_FORWARD_ONLY) &#123;<br>        <span class="hljs-keyword">if</span> (rowBounds.getOffset() != RowBounds.NO_ROW_OFFSET) &#123;<br>            rs.absolute(rowBounds.getOffset());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rowBounds.getOffset(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (!rs.next()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldProcessMoreRows</span><span class="hljs-params">(ResultContext&lt;?&gt; context, RowBounds rowBounds)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> !context.isStopped() &amp;&amp; context.getResultCount() &lt; rowBounds.getLimit();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>MyBatis 完成一个简单查询的大致过程如上所诉，我将其分为：初始化 MyBatis 创建<code>SqlSessionFactory</code>实例、获取<code>SqlSession</code>实例、得到<code>preparedStatement</code>实例并执行SQL操作、处理映射查询结果等步骤，示意图大致如下所示。以上代码跟踪暂未涉及其中细节，对 MyBatis 执行流程有了大致认识后，可以尝试具体分析 MyBatis 的插件实现原理。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/215213.jpg" alt="MyBatis执行过程"></p></li></ul><h2 id="MyBatis-插件-Plugin"><a href="#MyBatis-插件-Plugin" class="headerlink" title="MyBatis 插件 Plugin"></a>MyBatis 插件 <code>Plugin</code></h2><ul><li><p>MyBatis 允许在映射语句执行过程中的某一点进行拦截调用，允许使用插件来拦截的方法调用包括：</p><ul><li><code>Executor</code> (<code>update</code>,<code> query</code>,<code> flushStatements</code>,<code> commit</code>,<code> rollback</code>,<code> getTransaction</code>,<code> close</code>, <code>isClosed</code>)</li><li><code>ParameterHandler</code> (<code>getParameterObject</code>, <code>setParameters</code>)</li><li><code>ResultSetHandler</code> (<code>handleResultSets</code>,<code> handleOutputParameters</code>)</li><li><code>StatementHandler </code>(<code>prepare</code>, <code>parameterize</code>, <code>batch</code>, <code>update</code>, <code>query</code>)</li></ul></li><li><p>MyBatis在<code>org.apache.ibatis.plugin</code>包下提供了插件相关的接口、类和注解，如下所示</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><em><code>Interceptor</code></em></td><td>拦截器接口，通过实现此接口，对拦截对象和方法进行处理</td></tr><tr><td><code>InterceptorChain</code></td><td>保存所有<code>Interceptor</code>的实例</td></tr><tr><td><code>Invocation</code></td><td>保存被代理对象、被代理方法及运行参数</td></tr><tr><td><code>Plugin</code></td><td>实现<code>InvocationHandler</code>，是动态代理的默认实现类</td></tr><tr><td><code>PluginException</code></td><td>插件相关异常</td></tr><tr><td><code>@Intercepts</code></td><td>指定拦截目标的注解</td></tr><tr><td><code>@Signature</code></td><td>指定方法签名的注解，与<code>@Intercepts</code>配合使用</td></tr></tbody></table></li></ul><h3 id="MyBatis-插件示例"><a href="#MyBatis-插件示例" class="headerlink" title="MyBatis 插件示例"></a>MyBatis 插件示例</h3><ul><li><p>实现<code>org.apache.ibatis.plugin.Interceptor</code>接口，并使用<code>@Intercepts</code>和<code>@Signature</code>注解指定插件需要拦截的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">  @Signature(</span><br><span class="hljs-meta">    type = Executor.class,</span><br><span class="hljs-meta">    method = &quot;query&quot;,</span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExamplePlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        String simpleName = invocation.getTarget().getClass().getSimpleName();<br>        String name = invocation.getMethod().getName();<br>        Object[] args = invocation.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;ExamplePlugin 插件拦截了&quot;</span> + simpleName + <span class="hljs-string">&quot;.&quot;</span> + name + <span class="hljs-string">&quot;方法，方法入参为：&quot;</span> + Arrays.toString(args));<br>        Object result = invocation.proceed();<br>        System.out.println(<span class="hljs-string">&quot;同插件一起配置的属性有：&quot;</span> + properties.toString());<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 MyBatis 配置文件中使用<code>plugins</code>标签注册插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;site.xianglin.share.plugin.ExamplePlugin&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pluginProperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>执行<code>sqlSession.selectOne(&quot;product.getProduct&quot;);</code>方法观察输出</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">ExamplePlugin 插件拦截了SimpleExecutor.query方法，方法入参为：[org.apache.ibatis.mapping.MappedStatement@64485a47, &#123;limit=1&#125;, org.apache.ibatis.session.RowBounds@25bbf683, null]<br>同插件一起配置的属性有：&#123;pluginProperty=100&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="MyBatis-插件工作原理"><a href="#MyBatis-插件工作原理" class="headerlink" title="MyBatis 插件工作原理"></a>MyBatis 插件工作原理</h3><h4 id="加载插件配置信息"><a href="#加载插件配置信息" class="headerlink" title="加载插件配置信息"></a>加载插件配置信息</h4><ul><li><p>上面提到，<code>XMLConfigBuilder</code>中的<code>parseConfiguration</code>方法将 MyBatis 配置文件解析为<code>Configuration</code>实例，插件的信息也在此处解析加载，如下所示（略去<code>mybatis-config.xml</code>中未配置的部分）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseConfiguration</span><span class="hljs-params">(XNode root)</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    propertiesElement(root.evalNode(<span class="hljs-string">&quot;properties&quot;</span>));<br>    Properties settings = settingsAsProperties(root.evalNode(<span class="hljs-string">&quot;settings&quot;</span>));<br>    <span class="hljs-comment">// 插件信息在此加载</span><br>    pluginElement(root.evalNode(<span class="hljs-string">&quot;plugins&quot;</span>));<br>    settingsElement(settings);<br>    environmentsElement(root.evalNode(<span class="hljs-string">&quot;environments&quot;</span>));<br>    mapperElement(root.evalNode(<span class="hljs-string">&quot;mappers&quot;</span>));<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BuilderException(<span class="hljs-string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>pluginElement</code>方法的代码及主要完成的工作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pluginElement</span><span class="hljs-params">(XNode parent)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>  <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (XNode child : parent.getChildren()) &#123;<br>      <span class="hljs-comment">// 根据配置类信息创建 Interceptor 对象</span><br>      String interceptor = child.getStringAttribute(<span class="hljs-string">&quot;interceptor&quot;</span>);<br>      Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).getDeclaredConstructor().newInstance();<br>      <span class="hljs-comment">// 调用 setProperties 方法设置配置的属性</span><br>      Properties properties = child.getChildrenAsProperties();<br>      interceptorInstance.setProperties(properties);<br>      <span class="hljs-comment">// 将插件实例添加到 configuration 的拦截器链中</span><br>      configuration.addInterceptor(interceptorInstance);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>拦截器链<code>InterceptorChain</code>维护了一个<code>Interceptor</code>列表保存所有的拦截器实例，定义了<code>pluginAll</code>方法用于为被拦截对象创建代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br></code></pre></td></tr></table></figure></li></ul><h4 id="生成代理对象"><a href="#生成代理对象" class="headerlink" title="生成代理对象"></a>生成代理对象</h4><ul><li><p>Mybatis 插件主要是基于动态代理实现的，MyBatis 的四大对象都是由 <code>Configuration</code> 负责创建的，查看对应的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Executor 代理对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Executor <span class="hljs-title">newExecutor</span><span class="hljs-params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;<br>  executorType = executorType == <span class="hljs-keyword">null</span> ? ExecutorType.SIMPLE : executorType;<br>  Executor executor = <span class="hljs-keyword">new</span> SimpleExecutor(<span class="hljs-keyword">this</span>, transaction);<br>  <span class="hljs-comment">// ...</span><br>  executor = (Executor) interceptorChain.pluginAll(executor);<br>  <span class="hljs-keyword">return</span> executor;<br>&#125;<br><br><span class="hljs-comment">// StatementHandler 代理对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> StatementHandler <span class="hljs-title">newStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;<br>  StatementHandler statementHandler = <span class="hljs-keyword">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);<br>  <br>  statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);<br>  <span class="hljs-keyword">return</span> statementHandler;<br>&#125;<br><br><span class="hljs-comment">// ParameterHandler 代理对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title">newParameterHandler</span><span class="hljs-params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> </span>&#123;<br>  ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);<br>  <br>  parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);<br>  <span class="hljs-keyword">return</span> parameterHandler;<br>&#125;<br><br><span class="hljs-comment">// ResultSetHandler代理对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultSetHandler <span class="hljs-title">newResultSetHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;<br>  ResultSetHandler resultSetHandler = <span class="hljs-keyword">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);<br>  <br>  resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);<br>  <span class="hljs-keyword">return</span> resultSetHandler;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这些代理对象都是通过<code>interceptorChain.pluginAll</code>方法生成的，<code>pluginAll</code>方法定义如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">pluginAll</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (Interceptor interceptor : interceptors) &#123;<br>    target = interceptor.plugin(target);<br>  &#125;<br>  <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以知道，当配置多个拦截器时，MyBatis 会遍历所有拦截器，按顺序执行拦截器的 <code>plugin</code> 方法，被拦截的对象就会被层层代理。</p></li><li><p>MyBatis 为<code>plugin</code>方法提供了默认实现，那么<code>Plugin.wrap</code>就是典型的动态代理实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">default</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> Plugin.wrap(target, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">wrap</span><span class="hljs-params">(Object target, Interceptor interceptor)</span> </span>&#123;<br>  Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = getSignatureMap(interceptor);<br>  Class&lt;?&gt; type = target.getClass();<br>  Class&lt;?&gt;[] interfaces = getAllInterfaces(type, signatureMap);<br>  <span class="hljs-keyword">if</span> (interfaces.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>      type.getClassLoader(),<br>      interfaces,<br>      <span class="hljs-keyword">new</span> Plugin(target, interceptor, signatureMap));<br>  &#125;<br>  <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="拦截器执行逻辑"><a href="#拦截器执行逻辑" class="headerlink" title="拦截器执行逻辑"></a>拦截器执行逻辑</h4><ul><li><p>由于<code>Executor</code>、<code>ParameterHandler</code>、<code>ResultSetHandler</code>和<code>StatementHandler</code>均被代理，所以在执行方法时，首先执行<code>Plugin</code>中的<code>invoke</code>方法，<code>invoke</code>方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    Set&lt;Method&gt; methods = signatureMap.get(method.getDeclaringClass());<br>    <span class="hljs-keyword">if</span> (methods != <span class="hljs-keyword">null</span> &amp;&amp; methods.contains(method)) &#123;<br>      <span class="hljs-keyword">return</span> interceptor.intercept(<span class="hljs-keyword">new</span> Invocation(target, method, args));<br>    &#125;<br>    <span class="hljs-keyword">return</span> method.invoke(target, args);<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断当前方法是否需要被拦截，如果需要，则执行<code>interceptor</code>对象的<code>intercept</code>方法，不需要则直接执行原方法。</p></li></ul><h3 id="实现一个分页插件"><a href="#实现一个分页插件" class="headerlink" title="实现一个分页插件"></a>实现一个分页插件</h3><ul><li><p>在MyBatis 执行过程中分析到 MyBatis 默认的分页实现是内存分页，即查询所有记录，在内存中取分页数据。可以通过拦截<code>StatementHandler</code>的<code>prepare</code>方法，修改MyBatis 最终执行的SQL 来实现物理分页。具体实现如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单的分页实现：</span><br><span class="hljs-comment"> * 1. 如果有RowBounds参数，使用其作为分页参数</span><br><span class="hljs-comment"> * 2. 如果接口方法类似 list(int pageSize, int pageNum)，使用其作为分页参数</span><br><span class="hljs-comment"> * 3. 使用ThreadLocal存储分页参数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xianglin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(</span><br><span class="hljs-meta">                type = StatementHandler.class,</span><br><span class="hljs-meta">                method = &quot;prepare&quot;,</span><br><span class="hljs-meta">                args = &#123;</span><br><span class="hljs-meta">                        Connection.class,</span><br><span class="hljs-meta">                        Integer.class</span><br><span class="hljs-meta">                &#125;</span><br><span class="hljs-meta">        )</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimplePageHelper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String pageSizeKey = <span class="hljs-string">&quot;pageSize&quot;</span>;<br>    <span class="hljs-keyword">private</span> String pageNumKey = <span class="hljs-string">&quot;pageNum&quot;</span>;<br>    <span class="hljs-keyword">private</span> Page page;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();<br>        MetaObject metaStatementHandler = SystemMetaObject.forObject(statementHandler);<br>        <span class="hljs-keyword">while</span> (metaStatementHandler.hasGetter(<span class="hljs-string">&quot;h&quot;</span>)) &#123;<br>            Object object = metaStatementHandler.getValue(<span class="hljs-string">&quot;h&quot;</span>);<br>            metaStatementHandler = SystemMetaObject.forObject(object);<br>        &#125;<br>        <span class="hljs-comment">// 分离最后一个代理对象的目标类</span><br>        <span class="hljs-keyword">while</span> (metaStatementHandler.hasGetter(<span class="hljs-string">&quot;target&quot;</span>)) &#123;<br>            Object object = metaStatementHandler.getValue(<span class="hljs-string">&quot;target&quot;</span>);<br>            metaStatementHandler = SystemMetaObject.forObject(object);<br>        &#125;<br>        <span class="hljs-comment">// 判断是否需要分页</span><br>        <span class="hljs-keyword">if</span> (needPage(metaStatementHandler)) &#123;<br>            <span class="hljs-comment">// 拼接分页条件</span><br>            BoundSql boundSql = (BoundSql) metaStatementHandler.getValue(<span class="hljs-string">&quot;delegate.boundSql&quot;</span>);<br>            String sql = boundSql.getSql();<br>            String newSql = <span class="hljs-string">&quot;select * from (&quot;</span> + sql + <span class="hljs-string">&quot;) t limit &quot;</span> + <span class="hljs-keyword">this</span>.page.limit + <span class="hljs-string">&quot; offset &quot;</span> + <span class="hljs-keyword">this</span>.page.offset;<br>            metaStatementHandler.setValue(<span class="hljs-string">&quot;delegate.boundSql.sql&quot;</span>, newSql);<br>        &#125;<br>        <span class="hljs-keyword">return</span> invocation.proceed();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">needPage</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-comment">// 判断 RowBounds</span><br>        RowBounds rowBounds = (RowBounds) metaObject.getValue(<span class="hljs-string">&quot;delegate.rowBounds&quot;</span>);<br>        <span class="hljs-keyword">if</span> (rowBounds != <span class="hljs-keyword">null</span> &amp;&amp; rowBounds != RowBounds.DEFAULT) &#123;<br>          <span class="hljs-comment">// 取消默认的内存分页</span><br>            metaObject.setValue(<span class="hljs-string">&quot;delegate.rowBounds&quot;</span>, RowBounds.DEFAULT);<br>            <span class="hljs-keyword">this</span>.page = <span class="hljs-keyword">new</span> Page();<br>            <span class="hljs-keyword">this</span>.page.limit = rowBounds.getLimit();<br>            <span class="hljs-keyword">this</span>.page.offset = rowBounds.getOffset();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断方法参数</span><br>        Object parameterObject = metaObject.getValue(<span class="hljs-string">&quot;delegate.parameterHandler.parameterObject&quot;</span>);<br>        SqlCommandType sqlCommandType = (SqlCommandType) metaObject.getValue(<span class="hljs-string">&quot;delegate.parameterHandler.mappedStatement.sqlCommandType&quot;</span>);<br>        <span class="hljs-keyword">if</span> (parameterObject <span class="hljs-keyword">instanceof</span> Map &amp;&amp; sqlCommandType == SqlCommandType.SELECT) &#123;<br>            Map&lt;String, Object&gt; paraMap = (Map&lt;String, Object&gt;) parameterObject;<br>            Integer pageSize = (Integer) paraMap.get(<span class="hljs-keyword">this</span>.pageSizeKey);<br>            Integer pageNum = (Integer) paraMap.get(<span class="hljs-keyword">this</span>.pageNumKey);<br>            <span class="hljs-keyword">if</span> (pageSize != <span class="hljs-keyword">null</span> &amp;&amp; pageNum != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">this</span>.page = <span class="hljs-keyword">new</span> Page();<br>                <span class="hljs-keyword">this</span>.page.limit = pageSize;<br>                <span class="hljs-keyword">this</span>.page.offset = (pageNum - <span class="hljs-number">1</span>) * pageSize;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 从ThreadLocal获取分页信息</span><br>        Page page = getPage();<br>        <span class="hljs-keyword">if</span> (page != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.page = <span class="hljs-keyword">new</span> Page();<br>            <span class="hljs-keyword">this</span>.page.limit = page.pageSize;<br>            <span class="hljs-keyword">this</span>.page.offset = (page.pageNum - <span class="hljs-number">1</span>) * page.pageSize;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageSizeKey = properties.getProperty(<span class="hljs-string">&quot;pageSizeKey&quot;</span>, <span class="hljs-string">&quot;pageSize&quot;</span>);<br>        <span class="hljs-keyword">this</span>.pageNumKey = properties.getProperty(<span class="hljs-string">&quot;pageNumKey&quot;</span>, <span class="hljs-string">&quot;pageNum&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageSize, <span class="hljs-keyword">int</span> pageNum)</span> </span>&#123;<br>        Page page = <span class="hljs-keyword">new</span> Page();<br>        page.pageSize = pageSize;<br>        page.pageNum = pageNum;<br>        PAGE_LOCAL.set(page);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Page <span class="hljs-title">getPage</span><span class="hljs-params">()</span> </span>&#123;<br>        Page page = PAGE_LOCAL.get();<br>        PAGE_LOCAL.remove();<br>        <span class="hljs-keyword">return</span> page;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Page&gt; PAGE_LOCAL = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageSize;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageNum;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> limit;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> offset;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="MyBatis-分页插件-PageHelper"><a href="#MyBatis-分页插件-PageHelper" class="headerlink" title="MyBatis 分页插件 PageHelper"></a>MyBatis 分页插件 <code>PageHelper</code></h2><h3 id="PageHelper-介绍"><a href="#PageHelper-介绍" class="headerlink" title="PageHelper 介绍"></a>PageHelper 介绍</h3><ul><li><p>引入分页插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>最新版本<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置拦截器插件<code>com.github.pagehelper.PageInterceptor</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;param1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>分页插件参数介绍：</p><ul><li><p><code>pageSizeZero</code>：默认值为 <code>false</code>，当该参数设置为 <code>true</code> 时，如果 <code>pageSize=0</code> 或者 <code>RowBounds.limit = 0</code> 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 <code>Page</code> 类型）。</p></li><li><p><code>reasonable</code>：分页合理化参数，默认值为<code>false</code>。当该参数设置为 <code>true</code> 时，<code>pageNum&lt;=0</code> 时会查询第一页， <code>pageNum&gt;pages</code>（超过总数时），会查询最后一页。默认<code>false</code> 时，直接根据参数进行查询。</p></li><li><p><code>supportMethodsArguments</code>：支持通过 Mapper 接口参数来传递分页参数，默认值<code>false</code>，分页插件会从查询方法的参数值中取值，查找到合适的值时就会自动分页。</p></li></ul></li></ul><h4 id="分页插件常见使用方式"><a href="#分页插件常见使用方式" class="headerlink" title="分页插件常见使用方式"></a>分页插件常见使用方式</h4><ul><li><h4 id="RowBounds方式的调用"><a href="#RowBounds方式的调用" class="headerlink" title="RowBounds方式的调用"></a><code>RowBounds</code>方式的调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; selectList = sqlSession.selectList(<span class="hljs-string">&quot;product.pageProductRowBounds&quot;</span>, <span class="hljs-keyword">null</span>, rowBounds);<br><br><span class="hljs-comment">// 接口也可以增加RowBounds参数</span><br>PageRowBounds pageRowBounds = <span class="hljs-keyword">new</span> PageRowBounds(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>List&lt;Product&gt; productList = mapper.pageProduct(pageRowBounds);<br>Assert.assertNotNull(pageRowBounds.getTotal());<br></code></pre></td></tr></table></figure><p><em>由于默认情况下的 <code>RowBounds</code> 无法获取查询总数，分页插件提供了一个继承自 <code>RowBounds</code> 的 <code>PageRowBounds</code>，这个对象中增加了 <code>total</code> 属性，执行分页查询后，可以从该属性得到查询总数。</em></p></li><li><h4 id="PageHelper-startPage-静态方法调用"><a href="#PageHelper-startPage-静态方法调用" class="headerlink" title="PageHelper.startPage 静态方法调用"></a><code>PageHelper.startPage</code> 静态方法调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">PageHelper.startPage(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>List&lt;Product&gt; productList = productMapper.listAllProduct();<br><br><span class="hljs-comment">// 分页时，实际返回的结果list类型是Page&lt;E&gt;，如果想取出分页信息，需要强制转换为Page&lt;E&gt;，</span><br><span class="hljs-comment">// 或者使用PageInfo对结果进行包装</span><br>Page&lt;Product&gt; page = (Page&lt;Product&gt;) productList;<br>PageInfo&lt;Product&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(productList);<br></code></pre></td></tr></table></figure><p><em><code>PageHelper</code> 方法使用了静态的 <code>ThreadLocal</code> 参数，分页参数和线程是绑定的。</em></p></li><li><h4 id="使用参数方式"><a href="#使用参数方式" class="headerlink" title="使用参数方式"></a>使用参数方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;Product&gt; <span class="hljs-title">pageProduct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageSize, <span class="hljs-keyword">int</span> pageNum)</span></span>;<br><br>List&lt;Product&gt; productList = productMapper.pageProduct(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p><em>使用参数方式，需要配置 <code>supportMethodsArguments</code> 参数为 <code>true</code></em></p></li></ul><h3 id="在-Spring-中使用-PageHelper"><a href="#在-Spring-中使用-PageHelper" class="headerlink" title="在 Spring 中使用 PageHelper"></a>在 Spring 中使用 PageHelper</h3><p><em>见<a href="https://github.com/xianglin2020/mybatis">项目演示</a></em></p><h3 id="在-SpringBoot-中使用-PageHelper"><a href="#在-SpringBoot-中使用-PageHelper" class="headerlink" title="在 SpringBoot 中使用 PageHelper"></a>在 SpringBoot 中使用 PageHelper</h3><p><em>见<a href="https://github.com/xianglin2020/mybatis">项目演示</a></em></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 基础</title>
    <link href="/2020/10/19/SpringBoot%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/10/19/SpringBoot%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="SpringBoot-过滤器使用"><a href="#SpringBoot-过滤器使用" class="headerlink" title="SpringBoot 过滤器使用"></a>SpringBoot 过滤器使用</h2><h3 id="两种注册过滤器的方式"><a href="#两种注册过滤器的方式" class="headerlink" title="两种注册过滤器的方式"></a>两种注册过滤器的方式</h3><h4 id="使用FilterRegistrationBean注册过滤器"><a href="#使用FilterRegistrationBean注册过滤器" class="headerlink" title="使用FilterRegistrationBean注册过滤器"></a>使用<code>FilterRegistrationBean</code>注册过滤器</h4><ol><li><p>实现过滤器接口<code>javax.servlet.Filter</code>，重写<code>doFilter</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">// ...</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新增配置类，注册过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Filter <span class="hljs-title">filter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AdminFilter();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean&lt;Filter&gt; <span class="hljs-title">filterRegistrationBean</span><span class="hljs-params">()</span> </span>&#123;<br>        FilterRegistrationBean&lt;Filter&gt; filterRegistrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean&lt;&gt;();<br>        filterRegistrationBean.setFilter(filter());<br>        filterRegistrationBean.addUrlPatterns(<span class="hljs-string">&quot;/admin/*&quot;</span>);<br>        filterRegistrationBean.setName(<span class="hljs-string">&quot;bFilter&quot;</span>);<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="使用-WebFilter和-ServletComponentScan注解注册过滤器"><a href="#使用-WebFilter和-ServletComponentScan注解注册过滤器" class="headerlink" title="使用@WebFilter和@ServletComponentScan注解注册过滤器"></a>使用<code>@WebFilter</code>和<code>@ServletComponentScan</code>注解注册过滤器</h4><ol><li><p>实现过滤器接口<code>javax.servlet.Filter</code>，重写<code>doFilter</code>方法，并使用<code>WebFilter</code>注解指定过滤器配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/admin/*&quot;,filterName = &quot;aFilter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationAdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        log.info(<span class="hljs-string">&quot;使用@WebFilter注解配置过滤器！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在启动类上添加<code>@ServletComponentScan</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MallApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MallApplication.class, args);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><h4 id="使用-WebFilter"><a href="#使用-WebFilter" class="headerlink" title="使用@WebFilter"></a>使用<code>@WebFilter</code></h4><ul><li>使用注解方式的过滤顺序是以类名的自然顺序排序的</li></ul><h4 id="使用FilterRegistrationBean注册过滤器-1"><a href="#使用FilterRegistrationBean注册过滤器-1" class="headerlink" title="使用FilterRegistrationBean注册过滤器"></a>使用<code>FilterRegistrationBean</code>注册过滤器</h4><ol><li>默认情况下，以注册器在<code>FilterConfig</code>中配置的顺序。</li><li>可以使用<code>RegistrationBean#setOrder</code>指定过滤器的执行顺序，数字小的优先级高。</li></ol><h4 id="同时使用"><a href="#同时使用" class="headerlink" title="同时使用"></a>同时使用</h4><p><em>测试结果是，<code>FilterRegistrationBean</code>注册的整体优先于使用<code>@WebFilter</code>的方式，具体顺序待查看源码分析</em></p><h2 id="SpringBoot-多环境配置"><a href="#SpringBoot-多环境配置" class="headerlink" title="SpringBoot 多环境配置"></a>SpringBoot 多环境配置</h2><ul><li><input disabled="" type="checkbox"> TODO</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 安装 MySQL</title>
    <link href="/2020/10/10/Ubuntu%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2020/10/10/Ubuntu%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-安装-MySQL"><a href="#Ubuntu-安装-MySQL" class="headerlink" title="Ubuntu 安装 MySQL"></a>Ubuntu 安装 MySQL</h1><h2 id="Ubuntu-Server-和-MySQL"><a href="#Ubuntu-Server-和-MySQL" class="headerlink" title="Ubuntu Server 和 MySQL"></a>Ubuntu Server 和 MySQL</h2><ul><li><a href="https://ubuntu.com/download/alternative-downloads">Ubuntu Server</a></li><li><a href="https://downloads.mysql.com/archives/community/">MySQL Server</a></li></ul><h3 id="使用-APT-安装-MySQL"><a href="#使用-APT-安装-MySQL" class="headerlink" title="使用 APT 安装 MySQL"></a>使用 APT 安装 MySQL</h3><ol><li><p>使用命令安装 MySQL Server</p><p><code>sudo apt install mysql-server</code></p></li><li><p>查看 MySQL 运行情况</p><p><code>sudo service mysql status</code></p><p>或者</p><p><code>sudo /etc/init.d/mysql status</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /etc/init.d/mysql status<br>● mysql.service - MySQL Community Server<br>     Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)<br>     Active: active (running) since Thu 2020-10-08 22:41:04 CST; 2 days ago<br>   Main PID: 55128 (mysqld)<br>     Status: &quot;Server is operational&quot;<br>      Tasks: 40 (limit: 2319)<br>     Memory: 332.3M<br>     CGroup: /system.slice/mysql.service<br>             └─55128 /usr/sbin/mysqld<br><br>Oct 08 22:41:03 iZwz92js0u6m08arfj6jp8Z systemd[1]: Starting MySQL Community…...<br>Oct 08 22:41:04 iZwz92js0u6m08arfj6jp8Z systemd[1]: Started MySQL Community …er.<br>Hint: Some lines were ellipsized, use -l to show in full.<br></code></pre></td></tr></table></figure><p>启动、停止、重启MySQL 的命令类似</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo [/etc/init.d/mysql | service mysql] [force-reload|restart|status|reload|start|stop]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/230111.png" alt="image-20201010230111324" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/230138.png" alt="image-20201010230138405" style="zoom:50%;" /></p></li><li><p>在 Ubuntu 中安装 MySQL 并没有提示设置 root 密码，但可以在 <code>/etc/mysql</code> 路径下找到相关配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/mysql<br>sudo cat debian.cnf<br></code></pre></td></tr></table></figure><p>会得到如下信息：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/225728.png" alt="image-20201010225727578"></p><p>可以使用<code>debain.cnf</code>中的 <code>user</code> 和 <code>password</code> 登录 MySQL</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/000743.png" alt="image-20201010225905777"></p></li><li><p>新建一个用于远程连接的用户，并分配权限</p><p>新建用户</p><p><code>create user &#39;xianglin&#39;@&#39;119.130.215.117&#39; identified by &#39;950915&#39;;</code></p><p>分配权限</p><p><code>grant all privileges on *.* to &#39;xianglin&#39;@&#39;119.130.215.117&#39;;</code></p><p><code>flush privileges;</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/231313.png" alt="image-20201010231312744"></p></li><li><p>找到 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 并注释 <code>bind-address=127.0.01</code>，后重启 MySQL 服务</p></li><li><p>在阿里云的实例列表中找到如下菜单</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/000622.png" alt="image-20201011001243793"></p><p>添加访问规则，允许 MySQL 默认端口 3306 访问</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/001501.png" alt="image-20201011001500697"></p></li><li><p>使用 MySQL 客户端工具 datagrid 连接 MySQL</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/000652.png" alt="image-20201011001532104"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2020/10/06/SpringMVC/"/>
    <url>/2020/10/06/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="Spring-MVC-环境搭建"><a href="#Spring-MVC-环境搭建" class="headerlink" title="Spring MVC 环境搭建"></a>Spring MVC 环境搭建</h2><ol><li><p>引入 spring-mvc 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>web.xml</code>中配置<code>DispatcherServlet</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建并配置<code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context </span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd </span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc </span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;person.xianglin.springmvc&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>开发业务代码</p></li></ol><h2 id="SpringMVC-基础及数据绑定"><a href="#SpringMVC-基础及数据绑定" class="headerlink" title="SpringMVC 基础及数据绑定"></a>SpringMVC 基础及数据绑定</h2><h3 id="URL-绑定"><a href="#URL-绑定" class="headerlink" title="URL 绑定"></a>URL 绑定</h3><p><code>@RequestMapping</code></p><h3 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h3><ul><li><p>方法参数接收请求数据</p><p><code>@RequestParam</code></p></li><li><p>JavaBean 接收请求参数</p></li><li><p>日期类型转换</p><p><code>@DateTimeFormat</code></p><p>实现<code>org.springframework.core.convert.converter.Converter</code>自定义转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Date</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">convert</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        DateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        Date parse = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            parse = dateFormat.parse(s);<br>            <span class="hljs-keyword">return</span> parse;<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;person.xianglin.springmvc&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;conversionService&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;person.xianglin.springmvc.convert.DateConverter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Spring-MVC-中文乱码"><a href="#Spring-MVC-中文乱码" class="headerlink" title="Spring MVC 中文乱码"></a>Spring MVC 中文乱码</h3><ul><li><p>Get 请求：<code>server.xml</code>中增加<code>URIEncoding</code>属性（Tomcat8.0 之前）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Post 请求：<code>web.xml</code>中配置<code>CharacterEncodingFilter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Response 响应：Spring 配置<code>StringHttpMessageConverter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="响应输出结果"><a href="#响应输出结果" class="headerlink" title="响应输出结果"></a>响应输出结果</h3><ul><li><p><code>@ResponseBody</code></p></li><li><p><code>ModelAndView</code></p><p>属性保存在当前请求 request 对象中</p><p>modelAndView 使用请求转发完成页面跳转</p><p>使用<code>redirect:index.html</code>完成重定向</p></li><li><p>Spring 与模板引擎整合</p><ol><li><p>引入 freemaker 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置<code>FreeMarkerViewResolver</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;contentType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.ftl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置<code>FreeMarkerConfig</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- NoSuchBeanDefinitionException: No qualifying bean of type &#x27;org.springframework.web.servlet.view.freemarker.FreeMarkerConfig&#x27; available --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;freeMarkerConfig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateLoaderPath&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/ftl/&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;freemarkerSettings&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Restful风格的应用"><a href="#Restful风格的应用" class="headerlink" title="Restful风格的应用"></a>Restful风格的应用</h2><ul><li>REST：表现层状态转换，资源在网络中以某种形式进行状态转换</li><li>RESTFul 开发规范：<ol><li>使用 URL 作为用户交互入口</li><li>明确的语义规范，使用不同的 HTTP 方法完成对应的操作</li><li>只返回数据，不包含展示</li></ol></li></ul><h3 id="SpringMVC-RESTFul-使用"><a href="#SpringMVC-RESTFul-使用" class="headerlink" title="SpringMVC RESTFul 使用"></a>SpringMVC RESTFul 使用</h3><ul><li><p><code>@RestController</code> 创建 RestFul 风格控制器对象</p></li><li><p><code>@PathVariable</code> 路径变量注解</p></li><li><p>非简单请求JavaBean无法获取参数问题</p><p>在<code>web.xml</code>中配置<code>FormContentFilter</code>过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>formContextFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.FormContentFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>formContextFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>jackson 中对日期格式的注解<code>@JsonFormat</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss SSS&quot;,timezone = &quot;Asia/Shanghai&quot;)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure></li></ul><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><ul><li>同源策略阻止从一个域加载脚本去获取另一个域上的资源</li><li>只要协议、域名、端口有一个不同，都视为不同的域</li><li><code>Access-Control-Allow-Origin</code></li></ul><h4 id="HTML-中允许跨域的标签"><a href="#HTML-中允许跨域的标签" class="headerlink" title="HTML 中允许跨域的标签"></a>HTML 中允许跨域的标签</h4><ul><li><code>&lt;img&gt;</code> 图片</li><li><code>&lt;srcipt&gt;</code> JS 脚本</li><li><code>link</code> CSS 样式</li></ul><h4 id="SpringMVC-解决跨域访问问题"><a href="#SpringMVC-解决跨域访问问题" class="headerlink" title="SpringMVC 解决跨域访问问题"></a>SpringMVC 解决跨域访问问题</h4><ul><li><p><code>@CrosOrigin</code> Controller 跨域注解</p><table><thead><tr><th>字段</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>origins</td><td>被允许跨区请求的源列表</td><td></td></tr><tr><td>allowedHeaders</td><td>被允许在实际请求中的请求头</td><td><code>Access-Control-Allow-Headers</code></td></tr><tr><td>exposedHeaders</td><td></td><td><code>Access-Control-Expose-Headers</code></td></tr><tr><td>methods</td><td>支持的HTTP请求方法的列表</td><td></td></tr><tr><td>allowCredentials</td><td></td><td><code>Access-Control-Allow-Credentials</code></td></tr><tr><td>maxAge</td><td>预检响应缓存持续时间</td><td><code>Access-Control-Max-Age</code></td></tr></tbody></table></li><li><p><code>&lt;mvc:cros&gt;</code> 全局跨域设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:cors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/restful/**&quot;</span> <span class="hljs-attr">allowed-origins</span>=<span class="hljs-string">&quot;http://127.0.0.1,http://example.com&quot;</span> <span class="hljs-attr">max-age</span>=<span class="hljs-string">&quot;3600&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:cors</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Spring-拦截器"><a href="#Spring-拦截器" class="headerlink" title="Spring 拦截器"></a>Spring 拦截器</h2><ul><li>拦截器（Interceptor）用于对请求进行前置、后置过滤</li><li>拦截器基于 Spring AOP 实现</li></ul><h3 id="Spring-拦截器开发流程"><a href="#Spring-拦截器开发流程" class="headerlink" title="Spring 拦截器开发流程"></a>Spring 拦截器开发流程</h3><ol><li><p>引入<code>servlet-api</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>继承<code>org.springframework.web.servlet.HandlerInterceptor</code>实现拦截器逻辑</p></li><li><p>配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;person.xianglin.springrestful.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="HandlerInterceptor-接口"><a href="#HandlerInterceptor-接口" class="headerlink" title="HandlerInterceptor 接口"></a>HandlerInterceptor 接口</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>preHandle</td><td>前置执行处理：返回 true 允许执行后续操作，返回 false 则立即返回</td></tr><tr><td>postHandle</td><td>目标资源已被 SpringMVC框架处理</td></tr><tr><td>afterCompletion</td><td>响应文本已经产生</td></tr></tbody></table><h3 id="拦截器处理-URL"><a href="#拦截器处理-URL" class="headerlink" title="拦截器处理 URL"></a>拦截器处理 URL</h3><ul><li><p>资源过滤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**.ico&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/resources/**&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>多个拦截器执行顺序</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/184032.png" alt="image-20201007184030414"></p></li></ul><h3 id="Spring-MVC-处理流程"><a href="#Spring-MVC-处理流程" class="headerlink" title="Spring MVC 处理流程"></a>Spring MVC 处理流程</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/191124.png" alt="image-20201007191121154"></p><h2 id="SSM-整合过程"><a href="#SSM-整合过程" class="headerlink" title="SSM 整合过程"></a>SSM 整合过程</h2><h3 id="Spring与-SpringMVC环境配置"><a href="#Spring与-SpringMVC环境配置" class="headerlink" title="Spring与 SpringMVC环境配置"></a>Spring与 SpringMVC环境配置</h3><ol><li><p>在<code>pom.xml</code>中引入相应依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- SpringMVC 依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Freemarker 依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Jackson 依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>web.xml</code>中声明<code>ContextLoaderListener</code>和<code>DispatcherServlet</code></p><p><code>ContextLoaderListener</code>用于初始化 IOC 容器，<code>DispatcherServlet</code>用于初始化 SpringMVC 相关内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将 Spring 的配置信息以 context-param 的方式注册，并让ContextLoaderListener 进行读取--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 指定 spring-mvc 配置文件路径 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 让DispatcherServlet在应用启动时初始化 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>处理请求响应中的中文乱码问题</p><p>在<code>web.xml</code>中声明<code>CharacterEncodingFilter</code>用于处理请求中的乱码问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>spring-mvc.xml</code>中使用<code>&lt;mvc:message-converters&gt;</code>标签处理响应中的乱码问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建<code>spring-mvc.xml</code>配置 spring mvc相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 指定扫描 controller 包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;person.xianglin.reader.controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 启用 mvc 注解开发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 处理静态资源：将静态资源转发至 Tomcat 的默认Servlet 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>spring-mvc.xml</code>中整合模板引擎（Freemarker），同时在创建指定目录<code>WEB-INF/ftl</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;freeMarkerConfig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateLoaderPath&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/ftl/&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;freemarkerSettings&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;contentType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.ftl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果使用 JSP ，可配置<code>InternalResourceViewResolver</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试用的<code>TestController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(value = &quot;/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;test&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;/test/t1&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/t2&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(<span class="hljs-number">3</span>);<br>        map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Spring-与-MyBatis-整合"><a href="#Spring-与-MyBatis-整合" class="headerlink" title="Spring 与 MyBatis 整合"></a>Spring 与 MyBatis 整合</h3><ol><li><p>在<code>pom.xml</code>中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>applicationContext.xml</code>中配置数据源与连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://122.51.48.52:3306/imooc_reader?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>applicationContext.xml</code>中配置<code>SqlSessionFactoryBean</code>和<code>MapperScannerConfigurer</code>，用于将 MyBatis 的 SQLSession 和 Mapper 交于 Spring 管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;person.xianglin.reader.mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="配置其他组件"><a href="#配置其他组件" class="headerlink" title="配置其他组件"></a>配置其他组件</h3><ul><li><p>配置logback日志输出</p><p>引入logback依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建<code>logback.xml</code>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss&#125; %-5level [%thread] %logger&#123;30&#125; -%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>声明式事务配置</p><p>在<code>applicationContext.xml</code>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>整合 JUnit 单元测试</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestServiceTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span> </span>&#123;<br>        testService.insert();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="配置-MyBatis-Plus"><a href="#配置-MyBatis-Plus" class="headerlink" title="配置 MyBatis-Plus"></a>配置 MyBatis-Plus</h3><ol><li><p>在<code>pom.xml</code>中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调整<code>applicationContext.xml</code>中的<code>SqlSessionFactory</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>mybatis-config.xml</code>中增加分页插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="MyBatis-Plus-使用步骤"><a href="#MyBatis-Plus-使用步骤" class="headerlink" title="MyBatis-Plus 使用步骤"></a>MyBatis-Plus 使用步骤</h3><ol><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-meta">@TableField(&quot;id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-meta">@TableField(&quot;context&quot;)</span><br>    <span class="hljs-keyword">private</span> String context;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@TableName</code></li><li><code>@TableId</code></li><li><code>@TableField</code></li></ul></li><li><p>创建 Mapper 接口和MapperXML</p><p>继承自<code>com.baomidou.mybatisplus.core.mapper.BaseMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">Test</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSample</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注入 Mapper对象，通过内置 API 完成 CURD 操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMapperTest</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> TestMapper testMapper;<br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>        test.setContext(<span class="hljs-string">&quot;MyBatis-Plus 测试&quot;</span>);<br>        testMapper.insert(test);<br>    &#125;<br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>        Test test = testMapper.selectById(<span class="hljs-number">8</span>);<br>        test.setContext(<span class="hljs-string">&quot;测试 1111&quot;</span>);<br>        testMapper.updateById(test);<br>    &#125;<br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectList</span><span class="hljs-params">()</span> </span>&#123;<br>        QueryWrapper&lt;Test&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        queryWrapper.ge(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">8</span>);<br>        List&lt;Test&gt; selectList = testMapper.selectList(queryWrapper);<br>        Assert.assertEquals(selectList.size(), <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>insert</code>、<code>updateById</code>、<code>deleteById</code>、<code>selectById</code>、<code>selectList</code>、<code>selectPage</code></li></ul></li></ol><h3 id="Kaptcha-验证码"><a href="#Kaptcha-验证码" class="headerlink" title="Kaptcha 验证码"></a>Kaptcha 验证码</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.penggle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置<code>com.google.code.kaptcha.Producer</code>实现类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;defaultKaptcha&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.google.code.kaptcha.impl.DefaultKaptcha&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.google.code.kaptcha.util.Config&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;kaptcha.border&quot;</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;kaptcha.image.width&quot;</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;kaptcha.textproducer.font.color&quot;</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;kaptcha.textproducer.font.size&quot;</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;kaptcha.textproducer.char.length&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 controller 中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KaptchaController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Producer defaultKaptcha;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/verify_code&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createVerifyCode</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        response.setDateHeader(<span class="hljs-string">&quot;Expires&quot;</span>, <span class="hljs-number">0</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-store,no-cache,must-revalidate&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;post-check=0;pre-check=0&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;image/png&quot;</span>);<br><br>        String verifyCode = defaultKaptcha.createText();<br>        request.getSession().setAttribute(<span class="hljs-string">&quot;kaptchaVerifyCode&quot;</span>, verifyCode);<br>        BufferedImage kaptchaImage = defaultKaptcha.createImage(verifyCode);<br>        ServletOutputStream outputStream = response.getOutputStream();<br>        ImageIO.write(kaptchaImage, <span class="hljs-string">&quot;png&quot;</span>, outputStream);<br>        outputStream.flush();<br>        outputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring mvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VirtualBox 的安装和使用</title>
    <link href="/2020/10/04/VirtualBox/"/>
    <url>/2020/10/04/VirtualBox/</url>
    
    <content type="html"><![CDATA[<h1 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h1><h2 id="VirtualBox-安装"><a href="#VirtualBox-安装" class="headerlink" title="VirtualBox 安装"></a>VirtualBox 安装</h2><p>VirtualBox 安装比较简单，参考其官方说明即可：<a href="https://www.virtualbox.org/wiki/Downloads">Download VirtualBox</a>。</p><h2 id="VBoxManage-基础命令"><a href="#VBoxManage-基础命令" class="headerlink" title="VBoxManage 基础命令"></a>VBoxManage 基础命令</h2><h3 id="VBoxManage-list"><a href="#VBoxManage-list" class="headerlink" title="VBoxManage list"></a><code>VBoxManage list</code></h3><ul><li><p>列出已安装的虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage list vms<br>&quot;fedora&quot; &#123;b9daec39-7e85-485f-969b-629fa52bd549&#125;<br>&quot;centos&quot; &#123;49074fd5-386b-42ca-9e25-af29f5e42f1f&#125;<br></code></pre></td></tr></table></figure></li><li><p>列出正在运行的虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage list runningvms<br>&quot;centos&quot; &#123;49074fd5-386b-42ca-9e25-af29f5e42f1f&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="VBoxManage-startvm"><a href="#VBoxManage-startvm" class="headerlink" title="VBoxManage startvm"></a><code>VBoxManage startvm</code></h3><ul><li><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage startvm<br>Usage:<br><br>VBoxManage startvm          &lt;uuid|vmname&gt;...<br>                            [--type gui|headless|separate]<br>                            [-E|--putenv &lt;NAME&gt;[=&lt;VALUE&gt;]]<br></code></pre></td></tr></table></figure></li><li><p>以窗口模式启动虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage startvm fedora --type  gui<br>Waiting for VM &quot;fedora&quot; to power on...<br>VM &quot;fedora&quot; has been successfully started.<br></code></pre></td></tr></table></figure></li><li><p>以无窗口模式启动虚拟机</p><p><code>Starts a VM without a window for remote display only.</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage startvm centos --type headless<br></code></pre></td></tr></table></figure></li></ul><h3 id="VBoxManage-controlvm"><a href="#VBoxManage-controlvm" class="headerlink" title="VBoxManage controlvm"></a><code>VBoxManage controlvm</code></h3><ul><li><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage controlvm<br>Usage:<br><br>VBoxManage controlvm        &lt;uuid|vmname&gt;<br>                            pause|resume|reset|poweroff|savestate|<br>                            acpipowerbutton|acpisleepbutton|<br></code></pre></td></tr></table></figure></li><li><p>暂停虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage controlvm fedora pause<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202012/114348.png" alt="image-20201205114348345" style="zoom:50%;" /></li><li><p>恢复已暂停的虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage controlvm fedora resume<br></code></pre></td></tr></table></figure></li><li><p>关闭虚拟机：相当于拉闸断电</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage controlvm fedora poweroff<br><span class="hljs-meta">0%</span><span class="bash">...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br></code></pre></td></tr></table></figure></li><li><p>关闭虚拟机：正常关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage controlvm fedora acpipowerbutton<br></code></pre></td></tr></table></figure></li><li><p>休眠虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage controlvm fedora savestate<br><span class="hljs-meta">0%</span><span class="bash">...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="VBoxManage-guestproperty"><a href="#VBoxManage-guestproperty" class="headerlink" title="VBoxManage guestproperty"></a><code>VBoxManage guestproperty</code></h2><ul><li><p>获取或者设置正在运行的虚拟机的属性</p></li><li><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage guestproperty<br>Usage:<br><br>VBoxManage guestproperty    get &lt;uuid|vmname&gt;<br>                            &lt;property&gt; [--verbose]<br><br>VBoxManage guestproperty    set &lt;uuid|vmname&gt;<br>                            &lt;property&gt; [&lt;value&gt; [--flags &lt;flags&gt;]]<br><br>VBoxManage guestproperty    delete|unset &lt;uuid|vmname&gt;<br>                            &lt;property&gt;<br><br>VBoxManage guestproperty    enumerate &lt;uuid|vmname&gt;<br>                            [--patterns &lt;patterns&gt;]<br><br>VBoxManage guestproperty    wait &lt;uuid|vmname&gt; &lt;patterns&gt;<br>                            [--timeout &lt;msec&gt;] [--fail-on-timeout]<br></code></pre></td></tr></table></figure></li><li><p>获取当前运行虚拟机的 IP 地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ VBoxManage guestproperty enumerate centos | grep &quot;Net.*V4.*IP&quot;<br>Name: /VirtualBox/GuestInfo/Net/0/V4/IP, value: 10.0.2.15, timestamp: 1607138767607688000, flags:<br>Name: /VirtualBox/GuestInfo/Net/1/V4/IP, value: 192.168.56.106, timestamp: 1607138767607908000, flags:<br><br>➜  ~ VBoxManage guestproperty get centos &#x27;/VirtualBox/GuestInfo/Net/1/V4/IP&#x27;<br>Value: 192.168.56.106<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>virtual box</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 基础</title>
    <link href="/2020/10/04/Spring%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/10/04/Spring%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/153710.png" alt="image-20201005094800988"></p><h2 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h2><h3 id="IOC：控制反转"><a href="#IOC：控制反转" class="headerlink" title="IOC：控制反转"></a>IOC：控制反转</h3><ul><li>IOC 控制反转，全称 Inverse of Control，是一种设计理念。</li><li>由代理人来创建与管理对象，消费者通过代理人获取对象。</li><li>IoC 的目的是降低对象之间的直接耦合。</li></ul><h3 id="DI：依赖注入"><a href="#DI：依赖注入" class="headerlink" title="DI：依赖注入"></a>DI：依赖注入</h3><ul><li>IOC 是设计理念，是现代程序设计遵循的标准，是宏观目标。</li><li>DI（Dependency Injection）是具体技术实现。</li><li>DI 在 Java 中利用反射技术实现对象注入。</li></ul><h3 id="Bean-配置方式"><a href="#Bean-配置方式" class="headerlink" title="Bean 配置方式"></a>Bean 配置方式</h3><ol><li>基于 XML 配置 JavaBean：<code>applicationContext.xml</code></li><li>基于注解配置 JavaBean</li><li>基于 Java 代码配置 JavaBean</li></ol><p>路径表达式：</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/104352.png" alt="image-20201005104352459"></p><h3 id="实例化-Bean-的三种方式"><a href="#实例化-Bean-的三种方式" class="headerlink" title="实例化 Bean 的三种方式"></a>实例化 Bean 的三种方式</h3><ol><li><p>基于对象构造方法实例化：使用<code>constructor-arg</code>标签指定构造器参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sourApple&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.entity.Apple&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;红富士&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;红色&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;origin&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;欧洲&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19.8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;softApple&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.entity.Apple&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;金帅&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;中国&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;黄色&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10.90&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>基于静态工厂实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleStaticFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Apple <span class="hljs-title">createSweetApple</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Apple(<span class="hljs-string">&quot;红富士&quot;</span>, <span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-string">&quot;欧洲&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;apple4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.factory.AppleStaticFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createSweetApple&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>基于工厂实例方法实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleFactoryInstance</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Apple <span class="hljs-title">createSweetApple</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Apple(<span class="hljs-string">&quot;红富士&quot;</span>, <span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-string">&quot;欧洲&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;factoryInstance&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.factory.AppleFactoryInstance&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;apple5&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;factoryInstance&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createSweetApple&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="从-IoC-容器中获取-Bean"><a href="#从-IoC-容器中获取-Bean" class="headerlink" title="从 IoC 容器中获取 Bean"></a>从 IoC 容器中获取 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String var1, Class&lt;T&gt; var2)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String var1, Object... var2)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; var1)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; var1, Object... var2)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br></code></pre></td></tr></table></figure><h3 id="对象依赖注入"><a href="#对象依赖注入" class="headerlink" title="对象依赖注入"></a>对象依赖注入</h3><ol><li><p>基于 setter 方法注入对象</p><ol><li><p>注入静态数值</p><p><code>&lt;property name=&quot;&quot; value=&quot;&quot;/&gt;</code></p></li><li><p>注入对象</p><p><code>&lt;peoperty name=&quot;&quot; ref=&quot;&quot;/&gt;</code></p></li></ol></li><li><p>基于构造器方法注入对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lili&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;softApple&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用注解方式注入属性</p><p>配置 Bean 扫描包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>使用组件注解标识类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span> <br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@Component</span><br></code></pre></td></tr></table></figure><p>配置<code>@Resource</code>或<code>@Autowired</code>注入属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-meta">@Autowired</span><br></code></pre></td></tr></table></figure></li><li><p>使用 JavaConfig 注入依赖</p><p>使用<code>@Configuration</code>注解标识此为配置类</p><p>使用<code>@Bean</code>注解创建对象交由容器管理</p></li><li><p>注入 list、set、map、properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;company&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.entity.Company&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rooms&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ArrayList --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>room1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>room2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>room3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jobs&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- LinkedHashSet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>job1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>job1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>job2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;computers&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- LinkedHashMap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;lenovo&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;computer&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;sumsun&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.entity.Computer&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;band&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sumsun&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span>北京市<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;website&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Bean-作用域"><a href="#Bean-作用域" class="headerlink" title="Bean 作用域"></a>Bean 作用域</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/151713.png" alt="image-20201005125209619"></p><ul><li>Bean 的 scope 属性默认是 singleton 单例模式，会在容器初始化时被创建</li><li>prototype 表示多例，容器初始化时不会创建，在使用时才创建</li><li>lazy-init 为 true 时表示将对象的创建延迟到使用时创建，主要用于延迟初始化单例对象</li></ul><h3 id="Bean-声明周期"><a href="#Bean-声明周期" class="headerlink" title="Bean 声明周期"></a>Bean 声明周期</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/152142.png" alt="image-20201005152142313"></p><ol><li><p>使用 XML 定义的<code>init-method</code>和<code>destroy-method</code>方法</p></li><li><p>实现<code>InitializingBean</code>和 <code>DisposableBean</code>中的回调方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InitializingBean</span>, <span class="hljs-title">DisposableBean</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Float price;<br>    <span class="hljs-keyword">private</span> Integer quantity;<br>    <span class="hljs-keyword">private</span> Float total;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;创建 Order:&quot;</span> + <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行 initMethod&quot;</span>);<br>        <span class="hljs-keyword">this</span>.total = <span class="hljs-keyword">this</span>.price * <span class="hljs-keyword">this</span>.quantity;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行 destroyMethod&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行 afterPropertiesSet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行 destroy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;order1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.entity.Order&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19.3&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;quantity&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="基于注解配置-IoC-容器"><a href="#基于注解配置-IoC-容器" class="headerlink" title="基于注解配置 IoC 容器"></a>基于注解配置 IoC 容器</h3><p>Spring 从 2.5 开始支持注解来配置依赖注入</p><h4 id="四种组件类型注解"><a href="#四种组件类型注解" class="headerlink" title="四种组件类型注解"></a>四种组件类型注解</h4><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/160442.png" alt="image-20201005160441887"></p><h4 id="两类自动装配注解"><a href="#两类自动装配注解" class="headerlink" title="两类自动装配注解"></a>两类自动装配注解</h4><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/162052.png" alt="image-20201005162052486"> </p><ul><li><p><code>@Autowried</code>注解在属性和 setter 方法的不同</p></li><li><p><code>@Autowried</code>注解在存在多个类型相同实例时指定注入实例的方法</p><ol><li><p>在需要被注入实例上增加<code>@Primary</code></p></li><li><p>在<code>@Autowired</code>注解的字段或方法上增加<code>@Qualifier</code>注解，指定需要注入的对象</p><p><code>@Qualifier</code>优先级大于<code>@Primary</code></p></li></ol></li></ul><h4 id="元数据注解"><a href="#元数据注解" class="headerlink" title="元数据注解"></a>元数据注解</h4><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/165731.png" alt="image-20201005165710646"></p><h3 id="基于Java-的配置"><a href="#基于Java-的配置" class="headerlink" title="基于Java 的配置"></a>基于Java 的配置</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/184249.png" alt="image-20201005170901898"></p><h3 id="Spring-与-JUnit-整合"><a href="#Spring-与-JUnit-整合" class="headerlink" title="Spring 与 JUnit 整合"></a>Spring 与 JUnit 整合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = Config.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceTest</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        userService.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><h3 id="AOP-关键概念"><a href="#AOP-关键概念" class="headerlink" title="AOP 关键概念"></a>AOP 关键概念</h3><ul><li>AspectJ一种基于Java 平台的面向切面编程的语言</li><li>Spring 使用aspectjweaver实现类与方法匹配</li><li>SpringAOP 使用代理模式实现对象运行时扩展</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/182649.png" alt="image-20201005182648553"></p><h3 id="AOP-配置过程"><a href="#AOP-配置过程" class="headerlink" title="AOP 配置过程"></a>AOP 配置过程</h3><ol><li><p>引入aspectj依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写切面类和切面方法</p></li><li><p>配置Aspect Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;methodChecker&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.aspect.MethodChecker&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义 pointcut</p></li><li><p>定义切面类、配置 advice</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *(..))&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;methodChecker&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;check&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="JoinPoint核心方法"><a href="#JoinPoint核心方法" class="headerlink" title="JoinPoint核心方法"></a>JoinPoint核心方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Object <span class="hljs-title">getTarget</span><span class="hljs-params">()</span></span>;<br><br>Object[] getArgs();<br><br><span class="hljs-function">Signature <span class="hljs-title">getSignature</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="PointCut切点表达式"><a href="#PointCut切点表达式" class="headerlink" title="PointCut切点表达式"></a>PointCut切点表达式</h3><p><code>execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)throws-pattern?)</code></p><p><code>execution(public * org.example..*.*(..))</code></p><ul><li><code>*</code> 通配符</li><li><code>..</code> 包通配符</li><li><code>(..)</code> 参数通配符</li></ul><p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop-pointcuts-examples">aop-pointcuts-example</a></p><h3 id="五种通知类型"><a href="#五种通知类型" class="headerlink" title="五种通知类型"></a>五种通知类型</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/220544.png" alt="image-20201005220543321"></p><h3 id="使用注解配置-AOP"><a href="#使用注解配置-AOP" class="headerlink" title="使用注解配置 AOP"></a>使用注解配置 AOP</h3><p><code>@Around</code>、<code>@Before</code>、<code>@After</code>、<code>@AfterReturning</code>、<code>@AfterThrowing</code></p><h3 id="Spring-AOP-的实现原理"><a href="#Spring-AOP-的实现原理" class="headerlink" title="Spring AOP 的实现原理"></a>Spring AOP 的实现原理</h3><ul><li>Spring 基于代理模式实现功能扩展<ol><li>目标类实现接口，通过 JDK动态代理实现功能扩展 <code>com.sun.proxy.$Proxy20</code></li><li>目标类没有实现接口，通过 CGLib组件实现功能扩展 <code>EmployeeService$$EnhancerBySpringCGLIB$$ed94134b</code></li></ol></li></ul><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><h3 id="Spring-JDBC-1"><a href="#Spring-JDBC-1" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><ul><li>Spring JDBC 是Spring 框架对用于处理关系型数据库的模块</li><li>Spring JDBC对 JDBC API进行封装</li><li>JDBCTemplate是 SpringJDBC 的核心类，提供数据的 CURD 操作</li></ul><h3 id="Spring-JDBC使用步骤"><a href="#Spring-JDBC使用步骤" class="headerlink" title="Spring JDBC使用步骤"></a>Spring JDBC使用步骤</h3><ol><li><p>引入<code>spring-jdbc</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>applicationContext.xml</code>中配置数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://122.51.48.52:3306/imooc_demo?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employeeDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.EmployeeDao&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 dao 对象中注入<code>JdbcTemplate</code>依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title">getJdbcTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setJdbcTemplate</span><span class="hljs-params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.jdbcTemplate = jdbcTemplate;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="Spring-JDBC-事务管理"><a href="#Spring-JDBC-事务管理" class="headerlink" title="Spring JDBC 事务管理"></a>Spring JDBC 事务管理</h3><ol><li><p>编程式事务 <code>TransactionManger</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 事务标准配置</span><br>TransactionDefinition definition = <span class="hljs-keyword">new</span> DefaultTransactionDefinition();<br><span class="hljs-comment">// 开始事务，返回事务状态</span><br>TransactionStatus transaction = transactionManager.getTransaction(definition);<br><span class="hljs-comment">// 提交事务</span><br>transactionManager.commit(transaction);<br><span class="hljs-comment">// 回滚事务</span><br>transactionManager.rollback(transaction);<br></code></pre></td></tr></table></figure></li><li><p>声明式事务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;batchImport&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;NOT_SUPPORTED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;NOT_SUPPORTED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.example..*Service.*(..))&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><ul><li><p>事务传播行为是指多个拥有事务控制的方法在嵌套调用时的事物控制方式</p><p><code>&lt;tx:method name=&quot;batchImport&quot; propagation=&quot;REQUIRED&quot;/&gt;</code></p><p><code>@Transactional(propagation = Propagation.REQUIRED)</code></p></li><li><p>七种事务传播行为：<code>org.springframework.transaction.annotation.Propagation</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/123216.png" alt="image-20201006123215905"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 基础</title>
    <link href="/2020/10/03/Redis%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/10/03/Redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202101/Redis%E7%BC%93%E5%AD%98.png" alt="Redis 缓存"></p><h2 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h2><h3 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h3><ul><li>Redis 是 <code>key-value</code> 型 NoSQL 数据库</li><li>Redis 将数据存储在内存中，同时也能持久化到磁盘中</li><li>Redis 常用于缓存，利用内存的高效提高程序的处理速度</li></ul><h3 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h3><ul><li>速度快</li><li>广泛的语言支持</li><li>支持数据磁盘持久化</li><li>多种数据结构</li><li>支持主从复制</li><li>支持分片</li><li>分布式与高可用</li></ul><h3 id="Redis-常用配置项"><a href="#Redis-常用配置项" class="headerlink" title="Redis 常用配置项"></a>Redis 常用配置项</h3><table><thead><tr><th>配置</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>daemonize</code></td><td><code>daemonize yes</code></td><td>是否启用后台运行</td></tr><tr><td><code>port</code></td><td><code>port 6379</code></td><td>设置端口号</td></tr><tr><td><code>databases</code></td><td><code>databases 16</code></td><td>设置 redis 数据库个数</td></tr><tr><td><code>requirepass</code></td><td><code>requirepass abc123</code></td><td>设置 redis 连接密码</td></tr></tbody></table><h3 id="Redis通用命令"><a href="#Redis通用命令" class="headerlink" title="Redis通用命令"></a>Redis通用命令</h3><ul><li><code>select</code></li><li><code>set</code></li><li><code>get</code></li><li><code>keys</code></li><li><code>dbsize</code></li><li><code>exists</code></li><li><code>del</code></li><li><code>expire</code></li><li><code>ttl</code></li></ul><h3 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h3><ul><li><code>string</code>：字符串，值的长度不能超过 512 MB，是二进制安全的。<ol><li><code>set key value [EX seconds] [PX milliseconds] [NX|XX]</code><ul><li><code>EX</code>：将键的过期时间设置为<code>seconds</code>秒，<code>set key value ex seconds</code>等同于<code>setex key seconds value</code></li><li><code>PX</code>：将键的过期时间设置为<code>milliseconds</code>毫秒，与<code>psetex key milliseconds value</code> 等价</li><li><code>NX|XX</code>：只有在键不存在、存在时，才对键执行设置操作，<code>set key value NX</code>等同于<code>setnx key value</code></li></ul></li><li><code>mset key value [key value ...] mget key [key ...]</code></li><li><code>incr key | incrby k increment</code></li><li><code>decr key | decrby key decrement</code></li><li><code>exists key [key ...]  del key [key ...]</code></li><li><code>expire key seconds  ttl key </code></li></ol></li><li><code>hash</code>：键值类型</li><li><code>list</code>：列表，Redis lists基于Linked Lists实现。</li><li><code>set</code>：无序排列</li><li><code>zset</code>：有序排列</li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-为啥这么快"><a href="#Redis-为啥这么快" class="headerlink" title="Redis 为啥这么快"></a>Redis 为啥这么快</h3><p>Redis 支持 100000+QPS。</p><ul><li>完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高</li><li>数据结构简单，对数据操作也简单</li><li>采用单线程，单线程能处理高并发请求</li><li>使用 I/O 多路复用，Redis 使用的 I/O 多路复用函数：epoll、kqueue、evport</li></ul><p>传统的阻塞 I / O 模型</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202101/image-20210116223341983.png" alt="image-20210116223341983"></p><h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3><ul><li>String：最基本的数据类型，二进制安全。</li><li>Hash：键值类型，String 元素组成的字典，适用于存储对象。</li><li>List：列表，按照 String 元素插入顺序排序。</li><li>Set：String 元素组成的无序集合，基于哈希表实现，不允许重复。</li><li>Sorted Set：通过分数来为集合中的成员进行从小到大的排序。</li><li>用于计数的 HyperLogLogs，用于支持存储地址位置信息的 Geo</li></ul><h3 id="从海量-key-里查询出某一个固定前缀的-key"><a href="#从海量-key-里查询出某一个固定前缀的-key" class="headerlink" title="从海量 key 里查询出某一个固定前缀的 key"></a>从海量 key 里查询出某一个固定前缀的 key</h3><ul><li><p><code>KEYS pattern</code>：查找所有符合给定模式 pattern 的 key。</p><ul><li><code>KEYS</code> 指令一次性返回所有匹配的 key。</li><li>键的数量过大会使服务卡顿。</li></ul></li><li><p><code>SCAN cursor [MATCH pattern] [COUNT count] [Type type]</code></p><ul><li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程。</li><li>以 0 作为游标开始一次新的迭代，直到命令返回游标 0 完成一次遍历。</li><li>不保证每次执行都返回某个给定数量的元素，支持模糊查询。</li><li>一次返回的数量不可控，只能是大概率符合 count 参数。</li></ul><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201229224204948.png" alt="image-20201229224204948" style="zoom:50%;" /></li></ul><h3 id="通过-Redis-实现分布式锁"><a href="#通过-Redis-实现分布式锁" class="headerlink" title="通过 Redis 实现分布式锁"></a>通过 Redis 实现分布式锁</h3><p>分布式锁需要解决的问题：</p><ul><li>互斥性</li><li>安全性</li><li>死锁</li><li>容错</li></ul><p><code>SETNX key value</code> ：如果 key 不存在，则创建并赋值。</p><ul><li>时间复杂度：O(1) 。</li><li>返回值：设置成功，返回 1 ；设置失败，返回 0 。</li><li>SETNX 是原子操作。</li></ul><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201229225010259.png" alt="image-20201229225010259" style="zoom:67%;" /><p>使用 <code>EXPIRE key seconds</code> 设置过期时间</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201229225447919.png" alt="image-20201229225447919" style="zoom:67%;" /><p><code>set key value [EX seconds] [PX milliseconds] [NX|XX]</code></p><ul><li><code>EX</code>：将键的过期时间设置为<code>seconds</code>秒，<code>set key value ex seconds</code>等同于<code>setex key seconds value</code></li><li><code>PX</code>：将键的过期时间设置为<code>milliseconds</code>毫秒，与<code>psetex key milliseconds value</code> 等价</li><li><code>NX|XX</code>：只有在键不存在、存在时，才对键执行设置操作，<code>set key value NX</code>等同于<code>setnx key value</code></li></ul><h3 id="使用-Redis-实现异步队列"><a href="#使用-Redis-实现异步队列" class="headerlink" title="使用 Redis 实现异步队列"></a>使用 Redis 实现异步队列</h3><ul><li><p>方式一：</p><p>使用 Redis 的 List 数据类型作为队列，使用 <code>RPUSH</code> 生产消息和 <code>LPOP</code> 消费消息。</p><p>缺点：不能阻塞等待消息。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201230205130900.png" alt="image-20201230205130900" style="zoom:67%;" /></li><li><p>方式二：</p><p>使用 <code>BLPOP key [key...] timeout</code> ：阻塞直到队列有消息或者超时。</p><p> 缺点：消息不能被多个消费者使用。</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202012/image-20201230205425336.png" alt="image-20201230205425336" style="zoom:67%;" /></li><li><p>pub / sub ：主题订阅模式：</p><p>发送者 pub 发送消息，订阅者 sub 接收消息；订阅者可以订阅任意数量的频道。</p><p>缺点：消息的发布是无状态的，无法保证可达。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202101/image-20210117114605047.png" alt="image-20210117114605047"></p></li></ul><h3 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h3><ul><li><p>RDB（快照）持久化，保存某个时间点的全量数据的快照。</p><ul><li><code>SAVE</code>：阻塞 Redis 的服务器进程，直到 RDB 文件被创建完毕。</li><li><code>BGSAVE</code>：fork 出一个子进程来创建 RDB 文件，不阻塞服务器进程。</li><li><code>lastsave</code>：上次成功保存快照的时间戳。</li></ul><p>缺点：</p><ul><li>内存数据的全量同步，数据量大会由于 I/O 而严重影响性能。</li><li>可能因为 Redis 服务异常丢失从当前至最近一次快照期间的数据。</li></ul><p>自动触发 RDB 持久化的方式：</p><ul><li>根据 redis.conf 配置的触发时机定时触发（使用 <code>BGSAVE</code>）。</li><li>主从复制时，主节点自动触发。</li><li>执行 Debug Reload。</li><li>执行 shutdown 且没有开启 AOF 持久化。</li></ul></li><li><p>AOF（Append-Only-File）持久化：保存写状态</p><ul><li>记录下除了查询以外的所有变更数据库状态的指令。</li><li>以 append 的形式追加保存到 AOF 文件中。</li><li>使用 <code>appendonly yes</code> 配置开启 AOF 持久化。</li><li><code>appendfsync everysec</code></li></ul><p>日志重写解决 AOF 文件不断增大的问题：</p><blockquote><p>在执行 <code>BGREWRITEAOF</code> 命令时,Redis 服务器会维护一个 AOF 重写缓冲区,该缓冲区会在子进程创建<br>新AOF文件期间,记录服务器执行的所有写命令。当子进程完成创建新AOF文件的工作之后,服务器会将<br>重写缓冲区中的所有内容追加到新AOF文件的末尾,使得新旧两个AOF文件所保存的数据库状态一致。最<br>后,服务器用新的AOF文件替换旧的AOF文件,以此来完成AOF文件重写操作。</p></blockquote><ul><li>调用 fork，新建一个子进程；</li><li>子进程把新的 AOF 写到一个临时文件里，不依赖原来的 AOF 文件；</li><li>主基础持续将新的变动同时写到内存和原来的 AOF 文件里；</li><li>主进程获取子进程重写 AOF 的完成信号，往新的 AOF 同步增量变动；</li><li>使用新的 AOF 文件替换掉旧的 AOF 文件。</li></ul></li><li><p>混合持久化</p><p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭,可以通过配置项 <code>aof-use-rdb-preamble</code> 开启）。</p><p>AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的, AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式,可读性较差。</p></li></ul><h3 id="为什么使用-Pipline"><a href="#为什么使用-Pipline" class="headerlink" title="为什么使用 Pipline"></a>为什么使用 Pipline</h3><p>Redis 是一种基于客户端-服务端模型及请求/响应协议的 TCP 服务，Pipeline 批量执行指令，节省 IO 时间。</p><h3 id="Redis-的同步机制"><a href="#Redis-的同步机制" class="headerlink" title="Redis 的同步机制"></a>Redis 的同步机制</h3><ul><li><p>全同步过程</p><ul><li>Slave 发送 sync 命令到 Master</li><li>Master 启动一个后台进程，将 Redis 中的数据快照保存到文件中</li><li>Master 将保存数据快照期间接收到的写命令缓存起来</li><li>Master 完成写文件操作后，将该文件发送给 Slave</li><li>Slave 使用新的 RDB 文件替换掉旧的 RDB 文件，并根据其恢复到内存中</li><li>Master 将这期间收集的增量写命令发送给 Slave 端</li></ul></li><li><p>增量同步过程</p><ul><li>Master 接受到用户的操作指令，判断是否需要传播到 Slave</li><li>将该操作记录追加到 AOF 文件</li><li>将操作传播到其他 Slave：1. 对齐主从库；2. 往响应缓存写入指令</li><li>将缓存中的数据发送给 Slave</li></ul></li><li><p>Redis Sentinel</p><p>  解决主从同步 Master 宕机后的主从切换问题</p><ul><li>监控：检查主从服务器是否运行正常</li><li>提醒：通过 API 向管理员或其它应用程序发送故障通知</li><li>自动故障迁移：主从切换</li></ul></li></ul><h3 id="Redis集群原理"><a href="#Redis集群原理" class="headerlink" title="Redis集群原理"></a>Redis集群原理</h3><ul><li>一致性哈希算法：对 2^32 取模，将哈希值空间组成虚拟的圆环。</li><li>将数据 key 使用相同的 hash 函数计算出哈希值。</li><li>引入虚拟节点解决数据倾斜的问题。</li></ul><h4 id="Redis-集群的数据分片"><a href="#Redis-集群的数据分片" class="headerlink" title="Redis 集群的数据分片"></a>Redis 集群的数据分片</h4><p>Redis 集群有 16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置在哪个槽，集群中的每个节点负责一部分哈希槽。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis 基础</title>
    <link href="/2020/09/15/MyBatis%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/15/MyBatis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-基础"><a href="#MyBatis-基础" class="headerlink" title="MyBatis 基础"></a>MyBatis 基础</h1><ul><li><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis 中文文档</a></li><li><a href="http://mybatis.org/spring/zh/">MyBatis-Spring 中文文档</a></li><li><a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">MyBatis-Spring-Boot 文档</a></li><li><a href="https://github.com/pagehelper/Mybatis-PageHelper">PageHelper 地址</a></li></ul><h2 id="MyBatis-介绍"><a href="#MyBatis-介绍" class="headerlink" title="MyBatis 介绍"></a>MyBatis 介绍</h2><ul><li>MyBatis 是优秀的持久层框架</li><li>MyBatis 使用 XML 将 SQL 与程序代码解耦，便于维护</li><li>MyBatis 学习简单，执行高效，是 JDBC 的延伸</li></ul><h2 id="MyBatis-开发流程"><a href="#MyBatis-开发流程" class="headerlink" title="MyBatis 开发流程"></a>MyBatis 开发流程</h2><ol><li>引入 MyBatis 依赖</li><li>创建核心配置文件</li><li>创建实体（Entity）类</li><li>创建 Mapper 映射文件</li><li>初始化 SessionFactory</li><li>利用 SQLSession对象操作数据</li></ol><h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h2><ul><li>SqlSessionFactory 是 MyBatis 的核心对象</li><li>SQLSessionFactory 用于初始化MyBatis，创建 SQLSession 对象</li><li>应保证 SQLSessionFactory 全局唯一</li></ul><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><ul><li>SQLSession 是MyBatis 操作数据库的核心对象</li><li>SQLSession 使用 JDBC 与数据库交互</li></ul><h2 id="MyBatis-查询"><a href="#MyBatis-查询" class="headerlink" title="MyBatis 查询"></a>MyBatis 查询</h2><h2 id="MyBatis-日志框架"><a href="#MyBatis-日志框架" class="headerlink" title="MyBatis 日志框架"></a>MyBatis 日志框架</h2><p>Mybatis 通过使用内置的日志工厂<code>org.apache.ibatis.logging.LogFactory</code>提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p><ul><li><code>org.apache.ibatis.logging.slf4j.Slf4jImpl</code></li><li><code>org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl</code></li><li><code>org.apache.ibatis.logging.log4j.Log4jImpl</code></li><li><code>org.apache.ibatis.logging.log4j2.Log4j2Impl</code></li><li><code>org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl</code></li><li><code>org.apache.ibatis.logging.nologging.NoLoggingImpl</code></li></ul><p>MyBatis 内置日志工厂会基于运行时检测信息选择日志委托实现。它会（按上面罗列的顺序）使用第一个查找到的实现。当没有找到这些实现时，将会禁用日志功能。</p><ul><li><p>MyBatis 查找日志的顺序定义在<code>org.apache.ibatis.logging.LogFactory</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用静态块加载日志框架</span><br><span class="hljs-keyword">static</span> &#123;<br>    tryImplementation(LogFactory::useSlf4jLogging);<br>    tryImplementation(LogFactory::useCommonsLogging);<br>    tryImplementation(LogFactory::useLog4J2Logging);<br>    tryImplementation(LogFactory::useLog4JLogging);<br>    tryImplementation(LogFactory::useJdkLogging);<br>    tryImplementation(LogFactory::useNoLogging);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useSlf4jLogging</span><span class="hljs-params">()</span> </span>&#123;<br>    setImplementation(org.apache.ibatis.logging.slf4j.Slf4jImpl.class);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>NoLoggingImpl</code>中的所有方法都未实现，即为禁用日志功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoLoggingImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Log</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NoLoggingImpl</span><span class="hljs-params">(String clazz)</span> </span>&#123;<br>    <span class="hljs-comment">// Do Nothing</span><br>  &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String s, Throwable e)</span> </span>&#123;<br>    <span class="hljs-comment">// Do Nothing</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以在MyBatis 配置文件<code>mybatis-config.xml</code> 中使用<code>setting</code>标签来指定 MyBatis 的日志实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>logImpl</code> 的可选值有：<code>SLF4J</code>、<code>LOG4J</code>、<code>LOG4J2</code>、<code>JDK_LOGGING</code>、<code>COMMONS_LOGGING</code>、<code>STDOUT_LOGGING</code>、<code>NO_LOGGING</code>，或者是实现了<code>org.apache.ibatis.logging.Log</code>接口且构造方法以字符串为参数的类完全限定名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setImplementation</span><span class="hljs-params">(Class&lt;? extends Log&gt; implClass)</span> </span>&#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>     Constructor&lt;? extends Log&gt; candidate = implClass.getConstructor(String.class);<br>     Log log = candidate.newInstance(LogFactory.class.getName());<br>     <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>       log.debug(<span class="hljs-string">&quot;Logging initialized using &#x27;&quot;</span> + implClass + <span class="hljs-string">&quot;&#x27; adapter.&quot;</span>);<br>     &#125;<br>     logConstructor = candidate;<br>   &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LogException(<span class="hljs-string">&quot;Error setting Log implementation.  Cause: &quot;</span> + t, t);<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="MyBatis-动态-SQL"><a href="#MyBatis-动态-SQL" class="headerlink" title="MyBatis 动态 SQL"></a>MyBatis 动态 SQL</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a><code>if</code></h3><p><code>if</code> 标签通常用于<code>WHERE</code>语句中，通过参数值来决定是否使用某个查询条件，也常用于<code>UPDATE</code>语句中判断是否更新某一个字段，还可以在<code>INSERT</code>语句中用来判断是否插入某个字段的值。</p><h4 id="在WHERE条件中使用if"><a href="#在WHERE条件中使用if" class="headerlink" title="在WHERE条件中使用if"></a>在<code>WHERE</code>条件中使用<code>if</code></h4><p>实现一个用户高级查询功能，根据输入条件去检索用户信息。当只输入用户名时，需要根据用户名进行模糊查询；只输入邮箱时，根据邮箱进行完全匹配；当同时输入用户名和邮箱时，用两个条件进行查询。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;person.xianglin.simple.model.SysUser&quot;</span>&gt;</span><br>  select id, user_name userName, user_password userPassword, user_email userEmail, user_info userInfo, head_img<br>  headImg, create_time createTime<br>  from sys_user<br>  where 1 = 1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>      and user_name like concat(&#x27;%&#x27;, #&#123;userName&#125;, &#x27;%&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userEmail != null and userEmail != &#x27;&#x27;&quot;</span>&gt;</span><br>        and user_email = #&#123;userEmail&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>if</code>标签有一个必填属性<code>test</code>，<code>test</code>属性值是一个符合<code>OGNL</code>要求的判断表达式，表达式的结果可以是<code>true</code>或<code>false</code>，除此之外所有的非 <code>0</code> 值都是<code>true</code>，只有<code>0</code>为<code>false</code>。</p><ul><li>判断条件<code>property != null</code>或<code>property == null</code>：适用于任何类型的字段，用于判断属性值是否为空。</li><li>判断条件<code>property != &#39;&#39;</code>或<code>property == &#39;&#39;</code>：适用于<code>String</code>类型的字段，用于判断是否为空字符串。</li><li><code>and</code>和<code>or</code>：当有多个判断条件时，使用<code>and</code>或<code>or</code>进行连接，嵌套的判断条件可以使用小括号分组，<code>and</code>相当于 Java 中的与<code>&amp;&amp;</code>，<code>or</code>相当于 Java 中的或<code>||</code>。</li></ul><h4 id="在UPDATE更新列中使用if"><a href="#在UPDATE更新列中使用if" class="headerlink" title="在UPDATE更新列中使用if"></a>在<code>UPDATE</code>更新列中使用<code>if</code></h4><p>如果只更新有变化的字段，更新时不能将原来有值但没有变化的字段更新为空或<code>null</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByIdSelective&quot;</span>&gt;</span><br>    update sys_user set<br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>        user_name = #&#123;userName&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userPassword != null and userPassword != &#x27;&#x27;&quot;</span>&gt;</span><br>        user_password = #&#123;userPassword&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userEmail != null and userEmail != &#x27;&#x27;&quot;</span>&gt;</span><br>        user_email = #&#123;userEmail&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userInfo != null and userInfo != &#x27;&#x27;&quot;</span>&gt;</span><br>        user_info = #&#123;userInfo&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;headImg != null and headImg != &#x27;&#x27;&quot;</span>&gt;</span><br>        head_img = #&#123;headImg&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null and createTime != &#x27;&#x27;&quot;</span>&gt;</span><br>        create_time = #&#123;createTime,JDBC_TYPE=TIMESTAMP&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      id = #&#123;id&#125;<br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在INSERT动态插入列中使用if"><a href="#在INSERT动态插入列中使用if" class="headerlink" title="在INSERT动态插入列中使用if"></a>在<code>INSERT</code>动态插入列中使用<code>if</code></h4><p>在插入操作时。如果某一列的参数值不为空，就使用传入的值，如果传入参数为空，就使用数据库中的默认值。使用<code>if</code>可以实现这种动态插入列的功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert2&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into sys_user(user_name,user_password<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userEmail != null and userEmail != &#x27;&#x27;&quot;</span>&gt;</span><br>      ,user_email<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>,user_info,head_img,create_time)<br>    values(#&#123;userName&#125;,#&#123;userPassword&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userEmail != null and userEmail != &#x27;&#x27;&quot;</span>&gt;</span><br>      ,#&#123;userEmail&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    ,#&#123;userInfo&#125;,#&#123;headImg,jdbcType=BLOB&#125;,#&#123;createTime,jdbcType=TIMESTAMP&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>INSERT</code>中使用时需要注意，若在列部分增加<code>if</code>条件，则在 <code>value</code>部分也要增加相同的<code>if</code>条件，必须保证列和插入的值相对应。</p><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a><code>choose、when、otherwise</code></h3><p><code>if</code>标签提供了基本的条件判断，但是无法实现<code>if...else</code>的逻辑。<code>choose when otherwise</code>标签可以实现这样的逻辑。<code>choose</code>元素中包含<code>when</code>和<code>otherwise</code>两个标签，一个<code>choose</code>中至少一个<code>when</code>，有0 个或 1 个<code>otherwise</code>。</p><p>进行如下查询：当参数 ID 有值时，优先使用 ID 查询，当 ID 没有值时判断用户名是否有值，如果有值就用用户名查询，如果用户名也没有值，就是 SQL 查询无结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByIdOrUserName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;SysUser&quot;</span>&gt;</span><br>select * from sys_user<br>  where 1 = 1<br>  <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span><br>      and id = #&#123;id&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>      and user_name = #&#123;userName&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>      and 1 = 2<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a><code>trim、where、set</code></h3><h4 id="where用法"><a href="#where用法" class="headerlink" title="where用法"></a><code>where</code>用法</h4><p><code>where</code> 标签的作用：如果该标签包含的元素中有返回值，就插入一个<code>where</code>；如果<code>where</code>后面的字符串是以<code>AND</code>和<code>OR</code>开头的，就将它们剔除。</p><p>修改上述 [在<code>WHERE</code>中使用<code>if</code>] 的 SQL 语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;SysUser&quot;</span>&gt;</span><br>select * from sys_user<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>      and user_name like concat(&#x27;%&#x27;, #&#123;userName&#125;, &#x27;%&#x27;)<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userEmail != &#x27;&#x27; and userEmail != null&quot;</span>&gt;</span><br>      and user_email = #&#123;userEmail&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="set用法"><a href="#set用法" class="headerlink" title="set用法"></a><code>set</code>用法</h4><p><code>set</code>标签的作用：如果该标签包含的元素中有返回值，就插入一个<code>set</code>；如果<code>set</code>后面的字符串是以逗号结尾的，就剔除这个逗号。</p><p>修改上述 [在<code>UPDATE</code>中使用<code>if</code>] 的 SQL 语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByIdSelective&quot;</span>&gt;</span><br>    update sys_user<br>      <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>            user_name = #&#123;userName&#125;,<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userPassword != null and userPassword != &#x27;&#x27;&quot;</span>&gt;</span><br>            user_password = #&#123;userPassword&#125;,<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userEmail != null and userEmail != &#x27;&#x27;&quot;</span>&gt;</span><br>            user_email = #&#123;userEmail&#125;,<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userInfo != null and userInfo != &#x27;&#x27;&quot;</span>&gt;</span><br>            user_info = #&#123;userInfo&#125;,<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;headImg != null and headImg != &#x27;&#x27;&quot;</span>&gt;</span><br>            head_img = #&#123;headImg&#125;,<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null and createTime != &#x27;&#x27;&quot;</span>&gt;</span><br>            create_time = #&#123;createTime,JDBC_TYPE=TIMESTAMP&#125;,<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        id = #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>set</code>标签只解决了逗号问题，如果<code>set</code>元素没有内容，SQL 语句格式仍然有误，所以类似<code>id =#&#123;id&#125;</code>这样必然存在的赋值仍有保留的必要。</p><h4 id="trim用法"><a href="#trim用法" class="headerlink" title="trim用法"></a><code>trim</code>用法</h4><p><code>where</code> 和 <code>set</code> 标签的功能都可以用 <code>trim</code> 标签来实现，并且在底层就是通过 <code>TrimSqlNode</code> 实现的。</p><p><code>where</code> 标签对应的 <code>trim</code> 实现如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND | OR &quot;</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>set</code>标签对应的<code>trim</code>实现如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>trim</code>标签有如下属性：</p><ul><li><code>prefix</code>：当<code>trim</code>元素包含内容时，会给内容增加<code>prefix</code>指定的前缀。</li><li><code>prefixOverrides</code>：当<code>trim</code>元素包含内容时，会把内容中匹配的前缀字符串去掉。</li><li><code>suffix</code>：当<code>trim</code>元素包含内容时，会给内容增加<code>suffix</code>指定的后缀。</li><li><code>suffixOverrides</code>：当<code>trim</code>元素包含内容时，会把内容中匹配的后缀字符串去掉。</li></ul><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a><code>foreach</code></h3><p>SQL 语句中会使用<code>IN</code>关键字，例如<code>id in (1, 2, 3)</code>，可以使用<code>$&#123;ids&#125;</code>方式直接传参，但这种写法不能防止 SQL 注入，想要使用<code>#&#123;&#125;</code>的方式，就需要配合<code>foreach</code>标签使用。</p><p><code>foreach</code>遍历对象可以分为两大类：<code>Iterable</code>类型和<code>Map</code>类型。</p><h4 id="foreach实现in集合"><a href="#foreach实现in集合" class="headerlink" title="foreach实现in集合"></a><code>foreach</code>实现<code>in</code>集合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByIdList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;SysUser&quot;</span>&gt;</span><br>select * from sys_user<br>  where id in<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><br>      #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>foreach</code>包含以下属性：</p><ul><li><code>collection</code>：必填，值为要迭代循环的属性名。</li><li><code>item</code>：变量名，值为从迭代对象中取出的每一个值。</li><li><code>index</code>：索引的属性名，在集合数组情况下为当前索引值，当迭代循环的对象时 <code>Map</code>类型时，这个值为<code>Map</code>的<code>key</code>。</li><li><code>open</code>：整个循环内容开头的字符串。</li><li><code>close</code>：整个循环内容结尾的字符串。</li><li><code>separator</code>：每次循环的分隔符。</li></ul><p>关于<code>collection</code>属性值的设置。分析<code>DefaultSqlSession</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">wrapCollection</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>      StrictMap&lt;Object&gt; map = <span class="hljs-keyword">new</span> StrictMap&lt;Object&gt;();<br>      map.put(<span class="hljs-string">&quot;collection&quot;</span>, object);<br>      <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> List) &#123;<br>        map.put(<span class="hljs-string">&quot;list&quot;</span>, object);<br>      &#125;<br>      <span class="hljs-keyword">return</span> map;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object != <span class="hljs-keyword">null</span> &amp;&amp; object.getClass().isArray()) &#123;<br>      StrictMap&lt;Object&gt; map = <span class="hljs-keyword">new</span> StrictMap&lt;Object&gt;();<br>      map.put(<span class="hljs-string">&quot;array&quot;</span>, object);<br>      <span class="hljs-keyword">return</span> map;<br>    &#125;<br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="foreach实现批量插入"><a href="#foreach实现批量插入" class="headerlink" title="foreach实现批量插入"></a><code>foreach</code>实现批量插入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertList&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into sys_user(user_name,user_password,user_email,create_time)<br>    values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>      (#&#123;user.userName&#125;,#&#123;user.userPassword&#125;,#&#123;user.userEmail&#125;,#&#123;user.createTime,jdbcType=TIMESTAMP&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="foreach实现动态UPDATE"><a href="#foreach实现动态UPDATE" class="headerlink" title="foreach实现动态UPDATE"></a><code>foreach</code>实现动态<code>UPDATE</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByMap&quot;</span>&gt;</span><br>  update sys_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;_parameter&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>        $&#123;key&#125; = #&#123;value&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a><code>bind</code></h3><p><code>bind</code>标签可以使用<code>OGNL</code>表达式创建一个变量并将其绑定到上下文中。如上面所述的selectByUser 方法中的<code>like</code>查询条件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>  and user_name like concat(&#x27;%&#x27;, #&#123;userName&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改为<code>bind</code>方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userNameLike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27; + userName + &#x27;%&#x27;&quot;</span>/&gt;</span><br>  and user_name like #&#123;userNameLike&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>name</code>：绑定到上下文的变量名</li><li><code>value</code>：<code>OGNL</code>表达式</li></ul><h2 id="MyBatis缓存技术"><a href="#MyBatis缓存技术" class="headerlink" title="MyBatis缓存技术"></a>MyBatis缓存技术</h2><p>一般提到 MyBatis 缓存的时候，都是指二级缓存。一级缓存默认启用，且不能控制。</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>MyBatis 的一级缓存存在于 <code>SqlSession</code> 的生命周期中，在同一个<code>SqlSession</code> 中查询时，MyBatis 会把执行的方法和参数通过算法生成缓存的键值，将键值和查询结果存入一个 <code>Map</code> 对象中。如果同一个 <code>SqlSession</code> 中执行的方法和参数完全一致，那么通过算法会生成相同的键值，当 <code>Map</code> 缓存对象中已经存在该键值时，则会返回缓存中的对象。任何的 <code>INSERT</code>、 <code>UPDATE</code>、<code>DELETE</code> 操作都会清空一级缓存。也可以在<code>select</code>标签中添加<code>flushCache=&quot;true&quot;</code>元素，让 MyBatis 在查询数据前清空当前的一级缓存。</p><ul><li><p>一级缓存实现</p><p>一级缓存对象：<code>org.apache.ibatis.cache.impl.PerpetualCache</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PerpetualCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cache</span> </span>&#123;<br>  <span class="hljs-comment">// 一级缓存使用 Map 实现</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="hljs-keyword">new</span> HashMap&lt;Object, Object&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行查询时一级缓存实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">query</span><span class="hljs-params">(...)</span></span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 尝试从一级缓存中获取结果</span><br>  list = resultHandler == <span class="hljs-keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>      handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 没有存在一级缓存中时，从数据库查询</span><br>      list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>    &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">private</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">queryFromDatabase</span><span class="hljs-params">(...)</span> </span>&#123;<br>    List&lt;E&gt; list;<br>    localCache.putObject(key, EXECUTION_PLACEHOLDER);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 执行数据库查询</span><br>      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      localCache.removeObject(key);<br>    &#125;<br>  <span class="hljs-comment">// 将查询结果存于本地缓存</span><br>    localCache.putObject(key, list);<br>  <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>      localOutputParameterCache.putObject(key, parameter);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>flushCache</code></p><p>配置<code>flushCache</code>后<code>MappedStatement</code>对象中<code>flushCacheRequired</code>属性值由<code>false</code>变为<code>true</code><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/142228.png" alt="image-20200920142204412"><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/142950.png" alt="image-20200920142607062"></p><p>对应代码段在<code>org.apache.ibatis.executor.BaseExecutor#query</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;<br>  clearLocalCache();<br>&#125;<br><br><span class="hljs-comment">// 清除一级缓存</span><br><span class="hljs-comment">// 最后调用的方法时 Map 的 clear()</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearLocalCache</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!closed) &#123;<br>      localCache.clear();<br>      localOutputParameterCache.clear();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>MyBatis 的二级缓存非常强大，它不同于一级缓存只存在于 <code>SqlSession</code> 的生命周期中， 而是可以理解为存在于 <code>SqlSessionFactory</code> 的生命周期中。当存在多个 <code>SqlSessionFactory</code> 时，它们的缓存都是绑定在各自对象上的，缓存数据在一般情况下是不相通的。只有在使用如 <code>Redis</code> 这样的缓存数据库时，才可以共享缓存。</p><h4 id="配置二级缓存"><a href="#配置二级缓存" class="headerlink" title="配置二级缓存"></a>配置二级缓存</h4><p>MyBatis 全局配置 <code>setting</code>中有一个参数<code>cacheEnabled</code>，是二级缓存的全局开关，默认值为<code>true</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyBatis 的二级缓存和命名空间绑定的，即二级缓存需要配置在<code>Mapper.xml</code>映射文件或者配置在<code>Mapper.java</code>接口中。</p><h5 id="Mapper-xml中配置二级缓存"><a href="#Mapper-xml中配置二级缓存" class="headerlink" title="Mapper.xml中配置二级缓存"></a><code>Mapper.xml</code>中配置二级缓存</h5><p>在保证二级缓存的全局配置开启的情况下，给某个命名空间开启二级缓存只需要在<code>Mapper.xml</code>中添加<code>&lt;cache/&gt;</code>元素即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">＜?xml version=＂1.0＂ encoding=＂UTF-8＂ ?＞ <br>＜!DOCTYPE mapper PUBLIC ＂-//mybatis.org//DTD Mapper 3.0//EN＂ ＂http：//mybatis.org/dtd/mybatis-3-mapper.dtd＂ ＞ <br>＜mapper namespace=＂tk.mybatis.simple.mapper.RoleMapper＂＞<br>    ＜cache/＞<br>    ＜!--其他配置--＞ <br>＜/mapper＞<br></code></pre></td></tr></table></figure><p>默认的二级缓存会有如下效果：</p><ul><li><p>映射语句中的所有<code>SELECT</code>语句将会被缓存。</p></li><li><p>映射语句中所有的<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>语句会刷新缓存。</p></li><li><p>缓存会使用<code>Least Recently Used</code>（最近最少使用的）算法来收回。</p></li><li><p>根据时间表属性缓存</p></li><li><p>缓存存储集合或对象的 1024 个引用。</p></li><li><p>缓存会被视为<code>read/write</code>的，意味着对象检索不是共享的，而且可以安全地被调用者修改，而不干扰其它调用者或线程所做的潜在修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">       <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>对可配置属性的解释如下：</p><ul><li><code>eviction</code>：（回收策略）<ol><li><code>LRU</code>（最近最少使用的）：移除最长时间不被使用的对象，默认值。</li><li><code>FIFO</code>（先进先出）：按对象进入缓存的顺序来移除。</li><li><code>SOFT</code>（软引用）：移除基于垃圾回收器状态和软引用规则的对象。</li><li><code>WEAK</code>（弱引用）：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li></ol></li><li><code>flushInterval</code>（刷新间隔）。设置为任意的正整数，代表一个合理的毫秒形式的时间段。默认情况下不设置，即没有刷新间隔，缓存仅在调用语句时刷新。</li><li><code>size</code>（引用数目）。默认值是 1024.</li><li><code>readOnly</code>（只读）。可以设置为<code>true</code>或<code>false</code>。只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改。可读写的缓存会通过序列化返回缓存对象的拷贝。</li></ul><h5 id="Mapper接口中配置二级缓存"><a href="#Mapper接口中配置二级缓存" class="headerlink" title="Mapper接口中配置二级缓存"></a><code>Mapper</code>接口中配置二级缓存</h5><p>当只使用注解方式配置二级缓存时，需要增加如下配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheNamespace(</span><br><span class="hljs-meta">        eviction = FifoCache.class,</span><br><span class="hljs-meta">        flushInterval = 60000,</span><br><span class="hljs-meta">        size = 512,</span><br><span class="hljs-meta">        readWrite = true</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleMapper</span> </span>&#123;<br>  <span class="hljs-comment">// other code</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当同时使用注解方式和 XML 映射文件时，如果同时配置了上述的二级缓存，会抛出如下异常</p><p><code>Caches collection already contains value for tk.mybatis.simple.mapper.RoleMapper</code></p><p>这时候应该使用参照缓存，参照缓存配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheNamespaceRef(RoleMapper.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleMapper</span> </span>&#123;<br>  <span class="hljs-comment">// other code </span><br>&#125;<br></code></pre></td></tr></table></figure><p><em>Mapper 接口可以通过注解引用 XML 映射文件或者其他接口的缓存，在 XML 中也可以配置参照缓存，如下配置：</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache-ref</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;tk.mybatis.simple.mapper.RoleMapper&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用二级缓存"><a href="#使用二级缓存" class="headerlink" title="使用二级缓存"></a>使用二级缓存</h4><p>当配置缓存为可读写时，MyBatis 使用<code>SerializedCache</code>序列化缓存来实现可读写缓存类，并通过序列化和反序列化来保证通过缓存获取数据时，得到的是一个新的实例。因此，要求被序列化的对象实现<code>Serializable</code>接口。如果配置为只读缓存，MyBatis 就会使用 <code>Map</code> 来存储缓存值，这种情况下，从缓存中获取的对象就是同一个实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testL2Cache</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = getSqlSession();<br>    SysRole role1;<br>    <span class="hljs-keyword">try</span> &#123;<br>      RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);<br>      role1 = mapper.selectById(<span class="hljs-number">1L</span>);<br>      role1.setRoleName(<span class="hljs-string">&quot;NEW NAME&quot;</span>);<br>      SysRole role2 = mapper.selectById(<span class="hljs-number">1L</span>);<br>      Assert.assertEquals(<span class="hljs-string">&quot;NEW NAME&quot;</span>, role2.getRoleName());<br>      Assert.assertEquals(role1, role2);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      sqlSession.close();<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;开启新的 SQLSession&quot;</span>);<br>    sqlSession = getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>      RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);<br>      SysRole role2 = mapper.selectById(<span class="hljs-number">1L</span>);<br>      Assert.assertEquals(role2.getRoleName(), <span class="hljs-string">&quot;NEW NAME&quot;</span>);<br>      Assert.assertNotEquals(role2, role1);<br>      SysRole role3 = mapper.selectById(<span class="hljs-number">1L</span>);<br>      Assert.assertNotEquals(role2, role3);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试执行的日志为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEBUG [main] - Cache Hit Ratio [person.xianglin.simple.mapper.RoleMapper]: 0.0<br>DEBUG [main] - ==&gt;  Preparing: select id,role_name roleName,enabled, create_by createBy,create_time createTime from sys_role where id = ? <br>DEBUG [main] - ==&gt; Parameters: 1(Long)<br>TRACE [main] - &lt;==    Columns: id, roleName, enabled, createBy, createTime<br>TRACE [main] - &lt;==        Row: 1, 管理员, 1, 1, 2016-04-01 17:02:14.0<br>DEBUG [main] - &lt;==      Total: 1<br>DEBUG [main] - Cache Hit Ratio [person.xianglin.simple.mapper.RoleMapper]: 0.0<br>开启新的 SQLSession<br>DEBUG [main] - Cache Hit Ratio [person.xianglin.simple.mapper.RoleMapper]: 0.3333333333333333<br>DEBUG [main] - Cache Hit Ratio [person.xianglin.simple.mapper.RoleMapper]: 0.5<br></code></pre></td></tr></table></figure><h3 id="集成EhCache缓存"><a href="#集成EhCache缓存" class="headerlink" title="集成EhCache缓存"></a>集成<code>EhCache</code>缓存</h3><p>MyBatis 项目开发者最早提供了 <code>EhCache</code> 的 MyBatis 二级缓存实现， 该项目名为 <code>ehcache-cache</code>，地址是 <a href="https://github.com/mybatis/ehcache-cache">https://github.com/mybatis/ehcache-cache</a>。</p><ol><li><p>添加项目依赖</p><p>在<code>pom.xml</code>文件中加入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置 EhCache</p><p>在 resources 目录下新增<code>ehcache.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">monitoring</span>=<span class="hljs-string">&quot;autodetect&quot;</span> <span class="hljs-attr">dynamicConfig</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;C:\Users\xianglin\project\idea-workspace\mybatis\cache&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span> <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;3000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">copyOnRead</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">copyOnWrite</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;3600&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;3600&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>copyOnRead</code> 的含义是，判断从缓存中读取数据时是返回对象的引用还是复制一个对象返回。默认情况下是 <code>false</code>，即返回数据的引用，这种情况下返回的都是相同的对象，和 MyBatis 默认缓存中的只读对象是相同的。如果设置为 <code>true</code>，那就是可读写缓存，每次读取缓存时都会复制一个新的实例。</p><p><code>copyOnWrite</code> 的含义是，判断写入缓存时是直接缓存对象的引用还是复制一个对象然后缓存，默认也是 <code>false</code>。如果想使用可读写缓存，就需要将这两个属性配置为 <code>true</code>，如果使用只读缓存，可以不配置这两个属性，使用默认值 <code>false</code> 即可。</p></li><li><p>修改缓存配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="集成-Redis缓存"><a href="#集成-Redis缓存" class="headerlink" title="集成 Redis缓存"></a>集成 <code>Redis</code>缓存</h3><p>MyBatis 项目开发者提供了 <code>Redis</code> 的 MyBatis 二级缓存实现，该项目名为<code> redis-cache</code>，目前 只有 <code>beta</code> 版本，项目地址是 <a href="https://github.com/mybatis/redis-cache">https://github.com/mybatis/redis-cache</a>。</p><ol><li><p>添加项目依赖</p><p>在<code>pom.xml</code>文件中加入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置<code>Redis</code></p><p>在 resource 目录下新增<code>redis.properties</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">redis.host</span>=<span class="hljs-string">http://122.51.48.52</span><br><span class="hljs-meta">redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">redis.connectionTimeout</span>=<span class="hljs-string">5000</span><br><span class="hljs-meta">redis.soTimeout</span>=<span class="hljs-string">5000</span><br><span class="hljs-meta">redis.password</span>=<span class="hljs-string">950915</span><br><span class="hljs-meta">redis.database</span>=<span class="hljs-string">0</span><br><span class="hljs-meta">redis.clientName</span>=<span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li><li><p>修改缓存配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.redis.RedisCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="脏数据的产生和避免"><a href="#脏数据的产生和避免" class="headerlink" title="脏数据的产生和避免"></a>脏数据的产生和避免</h3><p>MyBatis 的二级缓存是和命名空间绑定的，所以通常情况下每一个 Mapper 映射文件都拥有自己的二级缓存，不同Mapper 的二级缓存互不影响。在常见的数据库操作中，多表联合查询非常常见，由于关系型数据库的设计，使得很多时候需要关联多个表才能获得想要的数据。在关联多表查询时肯定会将该查询放到某个命名空间下的映射文件中，这样一个多表的查询就会缓存在该命名空间的二级缓存中。涉及这些表的增、删、改操作通常不在一个映射文件中，它们的命名空间不同，因此当有数据变化时，多表查询的缓存未必会被清空，这种情况下就会产生脏数据。</p><p>当某几个表可以作为一个业务整体时，通常是让几个会关联的 <code>ER</code> 表同时使用同一个二级缓存，这样就能解决脏数据问题。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda、Stream与函数式编程</title>
    <link href="/2020/09/12/Lambda%E3%80%81Stream%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/09/12/Lambda%E3%80%81Stream%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><ul><li>Java8 开始支持Lambda 表达式，让程序编写更简洁、优雅</li><li>利用 Lambda 表达式可以更简洁的实现匿名内部类和函数声明与调用</li><li>Lambda 使得 Stream 流式编程为操作集合提供便利</li></ul><h2 id="Lambda-表达式语法结构"><a href="#Lambda-表达式语法结构" class="headerlink" title="Lambda 表达式语法结构"></a>Lambda 表达式语法结构</h2><ul><li><code>(参数列表) -&gt; 实现语句</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 标准使用方式</span><br>        MathOperation operation = (<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;加法运算&quot;</span>);<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;;<br>        System.out.println(operation.opt(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">// Lambda 允许忽略参数类型</span><br>        MathOperation operation1 = (a, b) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> a - b;<br>        &#125;;<br>        System.out.println(operation1.opt(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// 单行代码可以省略方法体和 return 语句</span><br>        MathOperation operation2 = (a, b) -&gt; a * b;<br>        System.out.println(operation2.opt(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ul><li>基于函数式接口并使用 Lambda 表达式的编程方式</li><li>函数式编程的理念是将代码作为可重用数据代入到程序运行中</li></ul><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><ul><li>有且仅有一个抽象方法的接口</li><li>Java8 提供了一系列新的函数式接口，位于<code>java.util.function</code>包中</li><li><code>Predicate</code>用于判断传入的数据是否满足要求，使用<code>test()</code>方法进行逻辑判断</li></ul><ol><li><code>java.util.function.Predicate</code> :用于条件判断，返回 Boolean 值</li><li><code>java.util.function.Consumer</code>：对应只有一个输入参数，而不需要返回的情况</li><li><code>java.util.function.Function</code>：对应一个输入参数，且返回数据的情况</li></ol><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><ul><li><code>Stream</code>流式处理是建立在 Lambda 表达式基础上的多数据处理技术</li><li>Stream 对集合数据处理高度抽象，极大简化代码量</li><li>Stream 可以对集合数据进行迭代、去重、筛选、排序、聚合等操作</li><li>位于<code>java.util.stream.Stream</code></li></ul><h2 id="创建流的五种方式"><a href="#创建流的五种方式" class="headerlink" title="创建流的五种方式"></a>创建流的五种方式</h2><ul><li><p>基于数组创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] arr = &#123;<span class="hljs-string">&quot;lili&quot;</span>, <span class="hljs-string">&quot;mark&quot;</span>, <span class="hljs-string">&quot;jackson&quot;</span>&#125;;<br>Stream&lt;String&gt; stringStream = Stream.of(arr);<br>stringStream.forEach(System.out::print);<br></code></pre></td></tr></table></figure></li><li><p>基于集合创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;123&quot;</span>);<br>list.add(<span class="hljs-string">&quot;345&quot;</span>);<br>Stream&lt;String&gt; stream = list.stream();<br>stream.forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>generate</code> 方法创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; generate = Stream.generate(() -&gt; <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">100000</span>)).limit(<span class="hljs-number">100</span>);<br>generate.forEach(System.out::print);<br>System.out.println();<br></code></pre></td></tr></table></figure></li><li><p>使用迭代器创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; limit = Stream.iterate(<span class="hljs-number">1</span>, n -&gt; n + <span class="hljs-number">1</span>).limit(<span class="hljs-number">100</span>);<br>limit.forEach(System.out::print);<br></code></pre></td></tr></table></figure></li><li><p>使用字符序列创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String string = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>IntStream chars = string.chars();<br>chars.forEach(System.out::println);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lambda</tag>
      
      <tag>stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 反射</title>
    <link href="/2020/09/12/Java%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/09/12/Java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="反射概念"><a href="#反射概念" class="headerlink" title="反射概念"></a>反射概念</h2><ul><li>反射是在运行时动态访问类与对象的技术</li><li>反射是JDK1.2版本后的高级技术，隶属于<code>java.lang.reflect</code>包中</li><li>大多数Java 框架都基于反射实现参数配置，动态注入等特性</li></ul><h2 id="反射的核心类"><a href="#反射的核心类" class="headerlink" title="反射的核心类"></a>反射的核心类</h2><ul><li><code>Class</code></li><li><code>Constructor</code></li><li><code>Method</code></li><li><code>Field</code></li></ul><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a><code>Class</code></h3><ul><li><code>Class</code>类是JVM 中表示“类和接口”的类</li><li><code>Class</code> 对象具体包含了某个特定类的结构信息</li><li>通过<code>Class</code>对象可以获取对应类的方法和成员信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    Class&lt;?&gt; employeeClass = Class.forName(<span class="hljs-string">&quot;reflect.entity.Employee&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;Employee已被加载！&quot;</span>);<br>    Employee employee = (Employee) employeeClass.newInstance();<br>    System.out.println(employee);<br>    <span class="hljs-comment">// 类不存在时抛出ClassNotFoundException 访问私有成员是抛出IllegalAccessException 类无法实例化时抛出InstantiationException</span><br>  &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;<br>    e.printStackTrace();<br>  &#125;<br></code></pre></td></tr></table></figure><p><code>Constructor</code></p><ul><li><code>Constructor</code>类是对 Java类中构造方法的抽象</li><li>包含了类某个具体构造方法的声明</li><li>调用 Constructor 带参构造方法创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; employeeClass = Class.forName(<span class="hljs-string">&quot;reflect.entity.Employee&quot;</span>);<br>            Constructor&lt;?&gt; constructor = employeeClass.getConstructor(Integer.class, String.class, Float.class, String.class);<br>            Employee employee = (Employee) constructor.newInstance(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-number">300.4F</span>, <span class="hljs-string">&quot;部门&quot;</span>);<br>            System.out.println(employee);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-comment">// 找不到特定方法时引发</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-comment">// 无访问权限</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-comment">// 无法实例化指定的类对象时引发</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-comment">// 当被调用方法内部抛出异常而没有被捕获时</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a><code>Method</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;reflect.entity.Employee&quot;</span>);<br>    Constructor&lt;?&gt; constructor = aClass.getConstructor(Integer.class, String.class, Float.class, String.class);<br>    Employee employee = (Employee) constructor.newInstance(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-number">123F</span>, <span class="hljs-string">&quot;部门&quot;</span>);<br>    Method method = aClass.getMethod(<span class="hljs-string">&quot;updateSalary&quot;</span>, Float.class);<br>    employee = (Employee) method.invoke(employee, <span class="hljs-number">100F</span>);<br>    System.out.println(employee);<br>  &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | InvocationTargetException | IllegalAccessException | InstantiationException | NoSuchMethodException e) &#123;<br>    e.printStackTrace();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a><code>Field</code></h3><ul><li><code>Field</code>对应类中的成员变量的声明</li><li>可以通过<code>Field</code>类对成员变量赋值和取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class&lt;Employee&gt; aClass = Employee.class;<br>        String ename = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Constructor&lt;Employee&gt; constructor = aClass.getConstructor(Integer.class, String.class, Float.class, String.class);<br>            Employee employee = constructor.newInstance(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-number">3000F</span>, <span class="hljs-string">&quot;部门&quot;</span>);<br>            Field field = aClass.getField(<span class="hljs-string">&quot;ename&quot;</span>);<br>            field.set(employee, <span class="hljs-string">&quot;李磊&quot;</span>);<br>            ename = (String) field.get(employee);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-comment">// 表示类没有指定名称的字段</span><br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;ename: &quot;</span> + ename);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven 基础</title>
    <link href="/2020/09/12/Maven%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/12/Maven%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven-的核心特性"><a href="#Maven-的核心特性" class="headerlink" title="Maven 的核心特性"></a>Maven 的核心特性</h2><ul><li>Maven 是项目管理工具，对软件项目提供构建和依赖管理</li><li>Maven 是 Apache 下的 Java 开源项目</li><li>Maven 为 Java 项目提供了统一的管理方式，已成为业界标准</li><li>项目设置遵循统一的规则，保证不同开发环境的兼容性</li><li>强大的依赖管理，项目依赖组件自动下载，自动更新</li><li><a href="https://maven.apache.org/">Maven 官网</a></li></ul><h3 id="Maven-项目的标准结构"><a href="#Maven-项目的标准结构" class="headerlink" title="Maven 项目的标准结构"></a>Maven 项目的标准结构</h3><ul><li><p>使用 <code>mvn</code>命令创建 Maven 项目</p><p><code>mvn -B archetype:generate -DgroupId=person.xianglin -DartifactId=myApp -DarchetypeArtifacttId=maven-archetype-quickstart -DarchetyVersion=1.4</code></p></li><li><p>查看 Maven 项目结构</p><p><code>tree</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ImoocJava tree myApp<br>myApp<br>├── pom.xml<br>└── src<br>    ├── main<br>    │   └── java<br>    │       └── person<br>    │           └── xianglin<br>    │               └── App.java<br>    └── test<br>        └── java<br>            └── person<br>                └── xianglin<br>                    └── AppTest.java<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224100.png" alt="image-20200912224059582"></p></li></ul><h2 id="Maven-的依赖管理"><a href="#Maven-的依赖管理" class="headerlink" title="Maven 的依赖管理"></a>Maven 的依赖管理</h2><ul><li>Maven 使用 Dependency自动下载，管理第三方 Jar 包</li><li>在<code>pom.xml</code>文件中配置项目的依赖</li><li>Maven 自动将依赖从远程仓库下载至本地仓库，并引入项目中</li></ul><h2 id="Maven-的打包方式"><a href="#Maven-的打包方式" class="headerlink" title="Maven 的打包方式"></a>Maven 的打包方式</h2><h2 id="Maven-常用命令"><a href="#Maven-常用命令" class="headerlink" title="Maven 常用命令"></a>Maven 常用命令</h2><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>mvn archetype:generate</code></td><td>创建 Maven 工程结构</td></tr><tr><td><code>mvn compile</code></td><td>编译源代码</td></tr><tr><td><code>mvn test</code></td><td>执行测试用例</td></tr><tr><td><code>mvn clean</code></td><td>清除产生的项目</td></tr><tr><td><code>mvn package</code></td><td>项目打包</td></tr><tr><td><code>mvn install</code></td><td>安装至本地仓库</td></tr></tbody></table><h3 id="archetype-generate"><a href="#archetype-generate" class="headerlink" title="archetype:generate"></a><code>archetype:generate</code></h3><ol><li><p>键入命令<code>mvn archetype:generate</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/113444.png" alt="image-20200913113443619"></p></li><li><p>输入项目信息</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/113629.png" alt="image-20200913113629033"></p></li></ol><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a><code>compile</code></h3><ol><li><p>键入编译命令<code>mvn compile</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/113849.png" alt="image-20200913113849747"></p></li><li><p>查看编译后的结构</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/113923.png" alt="image-20200913113923269" style="zoom: 50%;" /></li></ol><h3 id="test"><a href="#test" class="headerlink" title="test"></a><code>test</code></h3><ol><li><p>运行当前项目中所有的测试用例：<code>mvn test</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/114032.png" alt="image-20200913114032162"></p></li></ol><h3 id="package"><a href="#package" class="headerlink" title="package"></a><code>package</code></h3><ol><li><p>将当前项目打包</p><p><code>mvn package</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/114330.png" alt="image-20200913114330716"></p></li></ol><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a><code>clean</code></h3><ol><li><p>清除产生的项目</p><p><code>mvn clean</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/114453.png" alt="image-20200913114453103"></p></li></ol><h3 id="install"><a href="#install" class="headerlink" title="install"></a><code>install</code></h3><ol><li><p>安装项目至本地仓库</p><p><code>mvn install</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/114609.png" alt="image-20200913114609715"></p></li><li><p>查看本地仓库文件</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/120345.png" alt="image-20200913114715053"></p></li></ol><h1 id="Maven-实战"><a href="#Maven-实战" class="headerlink" title="Maven 实战"></a>Maven 实战</h1><h2 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h2><h3 id="Maven-安装方式"><a href="#Maven-安装方式" class="headerlink" title="Maven 安装方式"></a>Maven 安装方式</h3><ol><li><p>至<a href="https://maven.apache.org/">官网</a>下载二进制压缩包解压至本地目录即可完成安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz<br><br>tar -xzvf apache-maven-3.6.3-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>使用 homebrew 完成安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install maven<br></code></pre></td></tr></table></figure></li><li><p>使用<code>mvn -v</code>命令验证安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin ./mvn -v<br>Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)<br>Maven home: /Users/xianglin/Documents/JavaToolPackage/apache-maven-3.6.3<br>Java version: 14.0.2, vendor: AdoptOpenJDK, runtime: /Library/Java/JavaVirtualMachines/adoptopenjdk-14.jdk/Contents/Home<br>Default locale: zh_CN_#Hans, platform encoding: UTF-8<br>OS name: &quot;mac os x&quot;, version: &quot;10.15.6&quot;, arch: &quot;x86_64&quot;, family: &quot;mac&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/220832.png" alt="image-20200913220832043"></p></li><li><p>运行<code>mvn help:system</code></p></li></ol><h3 id="安装目录分析"><a href="#安装目录分析" class="headerlink" title="安装目录分析"></a>安装目录分析</h3><p>使用<code>tree</code>命令查看 maven 的目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree -L 1 apache-maven-3.6.3<br>apache-maven-3.6.3<br>├── LICENSE<br>├── NOTICE<br>├── README.txt<br>├── bin<br>├── boot<br>├── conf<br>└── lib<br></code></pre></td></tr></table></figure><ul><li><p><code>bin</code></p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/221240.png" alt="image-20200913221240470" style="zoom:50%;" /><p><code>bin</code>目录包含了<code>mvn</code>命令运行的脚本，在命令行输入任何命令时，都是调用这些脚本。<code>mvnDebug</code>比<code>mvn</code>多了一条<code>MAVEN_DEBUG_OPTS</code>，作用是在运行 Maven 时开启 debug，以便调试Maven 本身。<code>m2.conf</code>是<code>classworlds</code>的配置文件。</p></li><li><p><code>boot</code></p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/222012.png" alt="image-20200913222012160" style="zoom:50%;" /><p>该目录只包含一个文件，即<code>plexus-classworlds-2.6.0.jar</code>。plexus-classworlds 是一个类加载器框架，Maven 使用该框架加载自己的类库。</p></li><li><p><code>conf</code></p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/222245.png" alt="image-20200913222245513" style="zoom:50%;" /><p>该目录包含一个非常重要的配置文件<code>settings.xml</code>，修改该文件，能在全局范围内定制Maven 的行为。</p></li><li><p><code>lib</code></p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/222505.png" alt="image-20200913222505219" style="zoom:50%;" /><p>该目录包含了所有 Maven 运行时所需要的Java 类库，包含 Maven 依赖的第三方依赖。</p></li></ul><h2 id="Maven-使用入门"><a href="#Maven-使用入门" class="headerlink" title="Maven 使用入门"></a>Maven 使用入门</h2><h3 id="编写pom-xml文件"><a href="#编写pom-xml文件" class="headerlink" title="编写pom.xml文件"></a>编写<code>pom.xml</code>文件</h3><p>Maven 项目的核心是<code>pom.xml</code>,<code>POM(Project Object Model)</code>项目对象模型定义了项目的基本信息，描述项目如何构建，声明项目依赖，等等。</p><p>现为 Hello-World 项目编写最简单的<code>pom.xml</code>文件</p><ol><li><p>创建名为<code>hello-world</code>的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir hello-world<br>cd hello-world<br></code></pre></td></tr></table></figure></li><li><p>编写<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>person.xianglin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-world<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Maven Hello World Project<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>第一行指定了 XML 文件的版本和编码方式</li><li><code>project</code>元素是<code>pom.xml</code>的根元素</li><li><code>modelVersion</code>指定了当前 POM 模型的版本</li><li><code>groupId</code>、<code>artifactId</code>、<code>version</code>这三个元素定义一个项目的基本坐标。<code>groupId</code>定义项目属于哪个组，这个组一般与项目所在的公司和组织相关；<code>artifactId</code>定义当前Maven 项目在组中的唯一 ID；<code>version</code>指定当前项目的版本。</li><li><code>name</code>元素声明一个友好的项目名称</li></ul><ol start="3"><li><p>编写主代码</p><p>默认情况下，Maven 假定项目主代码位于<code>src/main/java</code>路径下，我们遵循 Maven 约定，创建该目录，然后在该目录下创建<code>person/xianglin/helloworld/HelloWorld.java</code>文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p src/main/java<br>cd src/main/java<br>mkdir -p person/xianglin/helloworld<br>cd person/xianglin/helloworld<br>vim HelloWorld.java<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> person.xianglin.helloworld;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Maven&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> HelloWorld().sayHello());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>使用 Maven 进行编译</p><p>在项目的根路径下运行<code>mvn clean compile</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean compile<br><br>Building Maven Hello World Project 1.0-SNAPSHOT<br><br>[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello-world ---<br>[INFO] Deleting /Users/xianglin/Documents/Maven/hello-world/target<br>[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello-world ---<br>[INFO] skip non existing resourceDirectory /Users/xianglin/Documents/Maven/hello-world/src/main/resources<br><br>[INFO]<br>[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello-world ---<br>[INFO] Changes detected - recompiling the module!<br>[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!<br>[INFO] Compiling 1 source file to /Users/xianglin/Documents/Maven/hello-world/target/classes<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  1.832 s<br>[INFO] Finished at: 2020-09-13T23:01:12+08:00<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>Maven 首先执行了<code>clean:clean</code>任务，删除target 目录，然后执行<code>resources:resources</code>任务，最后执行<code>compile:compile</code>任务，将项目代码编译至<code>target/classes</code>目录下。</p></li><li><p>编写测试代码</p><p>Maven 项目默认的测试代码位于<code>src/test/java</code>目录下。为项目添加<code>junit</code>依赖，并编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> person.xianglin.helloworld;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldTest</span></span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>HelloWorld helloworld = <span class="hljs-keyword">new</span> HelloWorld();<br><br>String result helloworld.sayHello();<br><br>assertEquals(<span class="hljs-string">&quot;Hello Maven&quot;</span>, result);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用 Maven执行测试</p><p>使用<code>mvn clean test</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">Building Maven Hello World Project 1.0-SNAPSHOT<br><br>maven-clean-plugin:2.5:clean (default-clean) @ hello-world<br><br>maven-resources-plugin:2.6:resources (default-resources) @ hello-world<br><br>maven-compiler-plugin:3.1:compile (default-compile) @ hello-world<br><br>maven-resources-plugin:2.6:testResources (default-testResources) @ hello-world<br><br>maven-compiler-plugin:3.1:testCompile (default-testCompile) @ hello-world<br><br>maven-surefire-plugin:2.12.4:test (default-test) @ hello-world<br><br><br>-------------------------------------------------------<br> T E S T S<br>-------------------------------------------------------<br>Running person.xianglin.helloworld.HelloWorldTest<br>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 sec<br><br>Results :<br><br>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0<br><br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  2.921 s<br>[INFO] Finished at: 2020-09-13T23:17:42+08:00<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>可见，Maven 先后执行了<code>clean:clean resources:resources compile:compile resources:testResources compile:testCompile test:test</code>六个任务。最后显示输出测试报告，显示一共运行了多少、失败、错误、跳过了多少测试用例。</p></li><li><p>打包和运行</p><p><code>pom.xml</code>中没有指定打包类型时，使用<code>mvn clean package</code>默认打包类型为 jar。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[INFO]<br>[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hello-world ---<br>[INFO] Building jar: /Users/xianglin/Documents/Maven/hello-world/target/hello-world-1.0-SNAPSHOT.jar<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  3.320 s<br>[INFO] Finished at: 2020-09-13T23:24:32+08:00<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>Maven 会在打包之前执行编译、测试等操作，<code>jar:jar</code>任务负责打包，打包的文件按照<code>artifactId-version.jar</code>的格式命名。可以使用<code>finalName</code>来自定义该文件的命令。</p></li><li><p>借助<code>maven-shade-plugin</code>生成可执行 jar</p><p>在<code>pom.xml</code>中配置如下插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>person.xianglin.helloworld.HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>  <br>          <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar hello-world-1.0-SNAPSHOT.jar<br>Hello Maven<br></code></pre></td></tr></table></figure><ul><li>使用Archetype生成项目骨架</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn archetype:generate<br></code></pre></td></tr></table></figure></li></ol><h2 id="坐标和依赖"><a href="#坐标和依赖" class="headerlink" title="坐标和依赖"></a>坐标和依赖</h2><h3 id="Maven-坐标"><a href="#Maven-坐标" class="headerlink" title="Maven 坐标"></a>Maven 坐标</h3><p>Maven 坐标为各种构件引入了秩序，任何一个构件都必须明确定义自己的坐标，而一组 Maven 坐标是通过一些元素定义的，它们是：<code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>packaging</code>、<code>classifier</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.sonatype.nexus<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nexus-indexer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>groupId</code>：定义当前项目的实际项目。由于Maven中模块的概念，一个项目往往会被划分为很多模块。</li><li><code>artifactId</code>：定义实际项目中的一个Maven模块，推荐做法是使用实际项目的名称作为artifactId的前缀。</li><li><code>version</code>：定义Maven项目当前所处的版本。</li><li><code>package</code>：定义Maven项目的打包方式，打包方式会影响到构建的生命周期。当不定义packaging时，Maven会使用默认值<code>jar</code>。</li><li><code>classifier</code>：用来帮助定义构建输出的一些辅助构建。</li></ul><h3 id="依赖的配置"><a href="#依赖的配置" class="headerlink" title="依赖的配置"></a>依赖的配置</h3><p>一个依赖声明可以包含如下一些元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>type</code>：依赖的类型，对应于项目坐标定义中的<code>packaging</code>。大部分情况下，该元素不必声明，默认值为<code>jar</code>。</li><li><code>scope</code>：依赖的范围。</li><li><code>option</code>：标记依赖是否可选。</li><li><code>exclusions</code>：用来排除传递性依赖。</li></ul><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖范围就是用来控制依赖与三种 <code>classpath</code>（编译 classpath、测试 classpath、运行 classpath）的关系，Maven 中有以下几种依赖范围：</p><ul><li><p><code>compile</code>：编译依赖范围，默认值。使用此依赖范围的 Maven 依赖，对于编译、测试、运行三种 classpath 都有效。</p></li><li><p><code>test</code>：测试依赖范围，只对测试 classpath 有效，在编译主代码和运行项目时将无法使用此类依赖，典型的例子就是 JUnit。</p></li><li><p><code>provided</code>：已提供依赖范围。使用此依赖范围的 Maven 依赖，对于编译和测试 classpath 有效，但在运行时无效。典型的例子就是<code>servlet-api</code>，编译和测试时需要此依赖，在运行项目时，容器已提供，就不想要重复地引入。</p></li><li><p><code>runtime</code>：运行时依赖范围。使用此依赖范围的 Maven 依赖，对于测试和运行 classpath 有效，但在编译主代码时无效。典型的例子是 JDBC 驱动实现，项目主代码编译时只需要 JDK 提供的 JDBC 接口，只有在执行时测试或运行项目时才需要具体的 JDBC 驱动。</p></li><li><p><code>system</code>：系统依赖范围。和<code>provided</code>依赖范围一致。使用 system 范围的依赖必须通过 systemPath 元素显示地指定依赖文件的路径。systemPath 可以引用环境变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.sql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jdbc-stdext<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>import</code>：导入依赖范围。该依赖范围不会对三种 classpath 产生实际的影响。</p></li></ul><h3 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h3><p>假设 A 依赖于 B，B 依赖于 C，A 对于 B 是第一直接依赖，B 对于 C 是第二直接依赖，A 对于 C 是传递性依赖。第一直接依赖的范围和第二直接依赖的范围决定了传递性依赖的范围。</p><p>如表所示，最左边一行表示第一直接依赖，最上面一行表示第二直接依赖，中间单元格表示传递性依赖范围</p><table><thead><tr><th align="center"></th><th align="center"><code>compile</code></th><th align="center"><code>test</code></th><th align="center"><code>provided</code></th><th align="center"><code>runtime</code></th></tr></thead><tbody><tr><td align="center"><code>compile</code></td><td align="center"><code>compile</code></td><td align="center"><code>--</code></td><td align="center"><code>--</code></td><td align="center"><code>runtime</code></td></tr><tr><td align="center"><code>test</code></td><td align="center"><code>test</code></td><td align="center"><code>--</code></td><td align="center"><code>--</code></td><td align="center"><code>test</code></td></tr><tr><td align="center"><code>provided</code></td><td align="center"><code>provided</code></td><td align="center"><code>--</code></td><td align="center"><code>provided</code></td><td align="center"><code>provided</code></td></tr><tr><td align="center"><code>runtime</code></td><td align="center"><code>runtime</code></td><td align="center"><code>--</code></td><td align="center"><code>--</code></td><td align="center"><code>runtime</code></td></tr></tbody></table><h3 id="依赖调解"><a href="#依赖调解" class="headerlink" title="依赖调解"></a>依赖调解</h3><ol><li><p>路径最近者优先</p><p>比如项目A 中有如下依赖：A-&gt;B-&gt;C-&gt;X(1.0)、A-&gt;D-&gt;X(2.0)，X是 A 的传递性依赖，X(1.0)的路径长度为 3，而 X(2.0)都路径长度为 2，依据路径最近者优先原则，X(2.0)会被项目 A 解析使用。</p></li><li><p>第一声明者优先</p><p>在依赖路径长度相等的前提下，在 POM 中依赖声明的顺序决定了谁会被解析使用，顺序最靠前的那个依赖优先。</p></li><li><p>覆盖优先</p><p>在同一 POM 文件中后面声明的依赖会覆盖前面的依赖</p></li></ol><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>假设项目 A 依赖于项目B，项目 B依赖于项目 X或 Y，B 对于 X 和 Y 的依赖都是可选依赖，即A-&gt;B、B-&gt;X(optional)、   B-&gt;Y(optional)。由于 X 和 Y是可选依赖，对 A 不会产生任何影响。如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202010/234706.png" alt="项目 A"></p><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>假设项目 A 依赖于项目 B，项目 B依赖于项目 C，但由于某些原因不想引入传递性依赖C，而是自己显示的声明对项目 C 特定版本的依赖。使用<code>exclusions</code>元素声明排除依赖，使用 <code>exclusion</code> 时只需要<code>groupId</code>和<code>artifictId</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 事务</title>
    <link href="/2020/09/07/MySQL%E4%BA%8B%E5%8A%A1/"/>
    <url>/2020/09/07/MySQL%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h1><h2 id="MySQL事务简介"><a href="#MySQL事务简介" class="headerlink" title="MySQL事务简介"></a>MySQL事务简介</h2><ul><li>数据库的事务是指一组SQL语句组成的数据库逻辑处理单元，在这组SQL操作中，要么全部执行成功，要么全部执行失败。简单又经典的例子就是转账，事务A中进行转账，那么转出的账号要扣钱，转入的账号要加钱。为了保证数据一致性，这两个操作都必需要同时执行成功。 </li><li>MySQL 事务都是指在 InnoDB 引擎下，MyISAM 引擎是不支持事务的。</li><li>事务用来管理insert、update、delete语句。</li></ul><h2 id="MySQL事务特性"><a href="#MySQL事务特性" class="headerlink" title="MySQL事务特性"></a>MySQL事务特性</h2><h3 id="ACID简介"><a href="#ACID简介" class="headerlink" title="ACID简介"></a>ACID简介</h3><p>MySQL中事务的四大特性包括：<strong>原子性（Atomicity）</strong>、<strong>一致性（Consistent）</strong>、<strong>隔离性（Isolation）</strong>、<strong>持久性（Durable）</strong>,简称<code>ACID</code>。</p><ul><li>原子性是指事务的原子操作，对数据的修改要么全部执行成功，要么全部失败。实现事务的原子性，是基于日志的<code>Redo/Undo</code>机制。</li><li>一致性是指执行事务前后的状态要一致，可以理解为数据一致性。</li><li>隔离性侧重指事务之间相互隔离，不受影响，隔离性与事务设置的隔离级别有密切的关系。</li><li>持久性是指一个事务提交后，这个事务的状态会被持久化到数据库中，也就是事务提交，对数据的新增、更新将会持久化到数据库中。</li></ul><p>原子性、隔离性、持久性都是为了保障一致性而存在的，一致性也是最终目的。</p><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td><code>READ UNCOMMITTED</code></td><td>可以读到其它事务未提交的数据</td></tr><tr><td><code>READ COMMITTED</code></td><td>事务只能读到其他事务已经提交过的数据</td></tr><tr><td><code>REPEATABLE READ</code></td><td>事务不会读到其它事务对数据的更改</td></tr><tr><td><code>SERIALIZABLE</code></td><td>将事务的执行变为顺序执行</td></tr></tbody></table><ul><li><p>MySQL 使用事务</p><p>开启事务：<code>begin / start transaction / set autocommit = 0</code></p><p>提交事务：<code>commit</code></p><p>回滚事务：<code>rollback</code></p><p><em>在执行<code>begin/start transaction</code>命令时，它们并不是一个事务的起点，在执行完它们后的第一个 sql 语句，才表示事务真正的启动 。</em></p></li><li><p>查看当前数据库的隔离级别</p><p><code>select @@transaction_isolation</code></p><p><code>show variables like &#39;transaction_isolation&#39;</code></p></li><li><p>查看当前运行的事务</p><p><code>select * from information_schema.innodb_trx;</code></p></li><li><p>设置隔离级别</p><p><code>set [session | global] transaction isolation level &#123;read uncommitted | read committed | repeatable read | serializable&#125;</code></p><p><em>当设置完隔离级别后对于之前打开的会话，是无效的，要重新打开一个窗口设置隔离级别才生效。</em></p></li><li><p>事务隔离级别演示</p><p>创建一个User表并插入相关测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span><br>(<br>    <span class="hljs-keyword">id</span>   <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> primary <span class="hljs-keyword">key</span> auto_increment,<br>    <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),<br>    age  <span class="hljs-built_in">tinyint</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span><br>) <span class="hljs-keyword">engine</span> = <span class="hljs-keyword">InnoDB</span><br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> = utf8;<br></code></pre></td></tr></table></figure><ol><li><p>读未提交</p><p>设置默认隔离级别为<code>READ UNCOMMITTED</code></p><p><code>set global transaction isolation level read uncommitted;</code></p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/215305.png" alt="image-20200907215304899" style="zoom:50%;" /><p>打开两个查询窗口，同时开启事务，一个窗口更新数据，另一个窗口在更新数据前后分别查询一次数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">  <span class="hljs-comment"># console1</span><br>  <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br>  <span class="hljs-comment"># console2</span><br>  <span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;非科班的科班&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment"># console1</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/215641.png" alt="image-20200907215622686"></p><p>第二个session产生的未提交的事务状态会直接影响到第一个session，也就是脏读。</p></li><li><p>读已提交</p><p>设置默认的事务隔离级别为<code>READ COMMITTED</code></p><p><code>set global transaction isolation level read committed;</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/220111.png" alt="image-20200907220111041"></p><p>重新打开两个窗口同时开启事务A和事务B。在事务B中使用update语句更新行，在事务A中进行查询。在事务B修改数据未提交时，事务A查询到的数据没有改变，当事务B执行提交后，事务A查询到的数据就是改变后的数据</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/220353.png" alt="image-20200907220353267"></p><p>事务B的查询结果会受到事务A的影响，这就是不可重复读。</p></li><li><p>可重复读</p><p>可重复读是对比不可重复读而言的，不可重复读是指同一事务不同时刻读取到的数据值可能不一致。而可重复读是指，事务不会读到其它事务对已有数据的修改，即使其它事务已提交。也就是说，事务开始时读取到的已有数据是什么，在事务提交前的任意时刻，这些数值都是一样的。*<s>但是，对于其它事务新插入的数据是可以读到的，也就引发了幻读问题。</s>（MySQL的<code>repeatable read</code>解决了幻读问题）*</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/220740.png" alt="image-20200907220740412"></p><p>事务 A 在事务 B 删除记录前查询了 ID为 1 的记录，在事务 B中删除记录，并且提交事务，在事务 A 中依旧能查询到，即事务 A 不会读到其它事务对数据的修改。</p></li><li><p>串行化</p><p>串行化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执行变为顺序执行，与其他三个隔离级别相比，它就相当于单线程，后一个事务的执行必须等待前一个事务结束。</p></li></ol></li></ul><h3 id="Redo-Undo机制"><a href="#Redo-Undo机制" class="headerlink" title="Redo/Undo机制"></a><code>Redo/Undo</code>机制</h3><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p><code>redo log</code>叫做重做日志，用来实现事务的持久性。该日志文件由两个部分组成：重做日志缓冲（redo log buffer）、重做日志文件（redo log），前者在内存中，后者在磁盘中。当事务提交后会把所有修改信息保存到该日志中。</p><p>MySQL 为了提升性能不会把每次的修改都实时同步到磁盘，而是先存到缓冲池中，然后使用后台线程去做缓冲池和磁盘间的同步。引入 redo log 来记录已成功提交事务的修改信息，并且把 redo log 同步到磁盘，用于恢复数据，保障数据库的一致性。</p><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h4><p><code>undo log</code>叫做回滚日志，用于记录数据被修改前的信息。为了回滚之前的状态，需要将之前的操作都记录下来。用于保障事务的原子性。</p><h3 id="MySQL锁机制"><a href="#MySQL锁机制" class="headerlink" title="MySQL锁机制"></a>MySQL锁机制</h3><p>MySQL中的锁可以分为：<strong>共享锁（Shared Locks）</strong>、<strong>排它锁（Exclusive Locks）</strong>、<strong>行锁（Record Locks）</strong>、<strong>表锁</strong>、间隙锁。</p><ul><li>共享锁是针对同一份数据，多个读操作可以同时进行，即读加锁，不能写并且可以并行读。</li><li>排它锁针对写操作，假设当前写操作没有完成，它会阻断其它的写锁和读锁，即写加锁，其它读写都阻塞。</li><li>行锁和表锁是从锁的粒度上划分的，行锁锁定当前数据行，锁的粒度小，加锁慢，发生锁冲突的概率小，并发度高。</li><li>表锁锁的粒度大，加锁快，发生冲突的概率大，并发度低。</li><li>间隙锁</li></ul><p>数据库只有增、删、改才会加上排它锁，只是查询时并不会加锁。只能通过在 select 语句后显示的加<code>lock in share mode</code>或者<code>for update </code>来加共享锁和排它锁。</p><ul><li>READ UNCOMMITTED：没有加任何锁，所以它没有隔离效果，性能最好。</li><li>SERIALIZABLE：读的时候加共享锁，也就是其他事务可以并发读，但是不能写。写的时候加排它锁，其他事务不能并发写也不能并发读。</li><li>REPEATABLE READ：在事务开始的时候创建一致性视图，也叫做快照，之后的查询都公用这一个一致性视图，后续事务对数据的更改是对当前事务不可见的。</li><li>READ COMMITTED：每次执行语句的时候都重新生成一次快照。</li></ul><h3 id="快照遵循的规则"><a href="#快照遵循的规则" class="headerlink" title="快照遵循的规则"></a>快照遵循的规则</h3><ol><li>当前事务内的更新都是可见的；</li><li>版本未提交的，都是不可见的；</li><li>版本已提交，但是在创建快照之后提交的，是不可见的；</li><li>版本已提交，但是在创建快照之前提交的，是可见的。</li></ol><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>READ COMMITTED、REPEATABLE READ 底层实现采用 MVCC（多版本并发控制）实现。</p><p>InnoDB 的 MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行创建时间，一个保存了行过期时间，存储的是系统版本号。</p><h3 id="并发写问题"><a href="#并发写问题" class="headerlink" title="并发写问题"></a>并发写问题</h3><p>假如事务1和事务2都要执行update操作，事务1先update数据行的时候，先回获取行锁，锁定数据，当事务2要进行update操作的时候，也会取获取该数据行的行锁，但是已经被事务1占有，事务2只能wait。若是事务1长时间没有释放锁，事务2就会出现超时异常。</p><p>加锁的过程要分有索引和无索引两种情况：</p><ol><li>有索引的情况，那么 MySQL 直接就在索引数中找到了这行数据，然后加上行锁；</li><li>若是没有索引的条件下，就获取所有行，都加上行锁，然后 MySQL 会再次过滤符合条件的的行并释放锁，只有符合条件的行才会继续持有锁。</li></ol>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdbc 基础</title>
    <link href="/2020/09/06/jdbc%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/06/jdbc%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC-基础"><a href="#JDBC-基础" class="headerlink" title="JDBC 基础"></a>JDBC 基础</h1><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><ul><li>IDEA 的<a href="https://www.jetbrains.com/idea/">下载地址</a>：<a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></li><li>IDEA 使用视频教程：<a href="https://www.imooc.com/learn/924">IDEA 神器使用技巧</a></li><li>IDEA 使用教程：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">IntelliJ-IDEA-Tutorial</a></li></ul><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="JDBC-简介"><a href="#JDBC-简介" class="headerlink" title="JDBC 简介"></a>JDBC 简介</h3><ul><li><p>Java DataBase Connectivity</p></li><li><p>JDBC 能让 Java 操作数据库</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/215724.png" alt="image-20200908215723835"></p></li><li><p>JDBC 的优点</p><ol><li>统一的 API，提供一致的开发过程</li><li>抑郁学习，代码结构稳定</li><li>功能强大，执行效率高，能用于处理海量的数据</li></ol></li></ul><h3 id="JDBC-使用步骤"><a href="#JDBC-使用步骤" class="headerlink" title="JDBC 使用步骤"></a>JDBC 使用步骤</h3><ol><li><s>加载并注册 JDBC 驱动</s></li><li>创建数据库连接(<code>Connection</code>)</li><li>创建 Statement 对象</li><li>执行查询操作(<code>ResultSet</code>)</li><li>关闭连接对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>  <span class="hljs-comment">// 1. 加载并注册 JDBC 驱动</span><br>  <span class="hljs-comment">//        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><br>  <span class="hljs-comment">// 2. 获取数据库连接</span><br>  Connection connection = DriverManager.getConnection(<br>    <span class="hljs-string">&quot;jdbc:mysql://122.51.48.52:3306/imooc_demo&quot;</span>,<br>    <span class="hljs-string">&quot;xianglin&quot;</span>,<br>    <span class="hljs-string">&quot;950915&quot;</span><br>  );<br>  <span class="hljs-comment">// 3. 创建 Statement 对象，执行查询操作</span><br>  Statement statement = connection.createStatement();<br>  ResultSet resultSet = statement.executeQuery(<span class="hljs-string">&quot;select * from employee&quot;</span>);<br><br>  <span class="hljs-comment">// 4. 遍历查询结果集</span><br>  <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>    <span class="hljs-keyword">int</span> eno = resultSet.getInt(<span class="hljs-number">1</span>);<br>    String ename = resultSet.getString(<span class="hljs-string">&quot;ename&quot;</span>);<br>    <span class="hljs-keyword">float</span> salary = resultSet.getFloat(<span class="hljs-string">&quot;salary&quot;</span>);<br>    String dname = resultSet.getString(<span class="hljs-string">&quot;dname&quot;</span>);<br>    System.out.println(dname + <span class="hljs-string">&quot;--&quot;</span> + eno + <span class="hljs-string">&quot;--&quot;</span> + ename + <span class="hljs-string">&quot;--&quot;</span> + salary);<br>  &#125;<br>  <span class="hljs-comment">// 5. 关闭连接，释放资源</span><br>  resultSet.close();<br>  statement.close();<br>  connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDBC-细节"><a href="#JDBC-细节" class="headerlink" title="JDBC 细节"></a>JDBC 细节</h3><ul><li><p><code>DriverManager</code></p><ol><li>用于注册、管理 JDBC 驱动程序</li><li><code>DriverManager.getConnection()</code>返回数据库连接</li><li>返回值<code>Connection</code>对象，对应数据库的物理网络连接</li></ol></li><li><p><code>Connection</code></p><ol><li>用于 JDBC 与数据库的网络通信对象</li><li><code>java.sql.Connection</code>是一个接口，具体由驱动厂商实现</li><li>所有数据库操作都建立在 Connection对象基础上</li></ol></li><li><p>MySQL 连接字符串</p><p><code>jdbc:mysql://[hostip][:port]/databaseName?param</code></p><p>参数列表采用 url 编码格式</p><table><thead><tr><th>参数名</th><th>建议值</th><th>说明</th></tr></thead><tbody><tr><td><code>useSSL</code></td><td></td><td>是否启用 ssl</td></tr><tr><td><code>useUnicode</code></td><td>true</td><td>启用 Unicode 编码传输数据</td></tr><tr><td><code>characterEncoding</code></td><td>UTF-8</td><td>使用 UTF-8 编码传输数据</td></tr><tr><td><code>serverTimeZone</code></td><td>Asia/Shanghai</td><td>使用东 8 时区</td></tr><tr><td>allowPublicKeyRetrieval</td><td>true</td><td>运行从客户端获取公钥加密传输</td></tr></tbody></table></li></ul><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ul><li>SQL 注入攻击是未对原始 SQL 中的铭感字符做特殊处理</li><li><code>PreparedStatement</code>是<code>Statement</code>的子接口</li><li><code>PreparedStatement</code>对SQL 进行参数化，防止 SQL 注入</li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="阿里巴巴-Druid连接池"><a href="#阿里巴巴-Druid连接池" class="headerlink" title="阿里巴巴 Druid连接池"></a>阿里巴巴 Druid连接池</h3><ul><li><p>Druid 是阿里巴巴开源的数据库连接池组件。</p></li><li><p>Druid 能对数据库连接进行有效的管理与重用，最大化程序执行效率。</p></li><li><p>连接池负责创建管理连接，应用程序只管使用和归还。</p></li><li><p>Druid 使用方式</p><ol><li><p>获取 jar 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建配置文件：<code>db.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClass</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://122.51.48.52:3306/imooc_demo?useSSL=false</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">xianglin</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">950915</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">20</span><br></code></pre></td></tr></table></figure></li><li><p>使用数据库连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 加载属性文件</span><br>InputStream inputStream = DruidSample.class.getResourceAsStream(&quot;/druid.properties&quot;);<br>Properties properties = <span class="hljs-keyword">new</span> Properties();<br>properties.load(inputStream);<br><span class="hljs-comment">// 2. 获取 DateSource 数据源对象</span><br>DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);<br><span class="hljs-comment">// 3. 创建数据库连接</span><br>Connection connection = dataSource.getConnection();<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><ul><li><p><a href="https://www.mchange.com/projects/c3p0/">C3P0 官网</a></p></li><li><p>C3P0 使用方式</p><ol><li><p>获取 jar 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>c3p0-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://122.51.48.52:3306/imooc_demo?useSSL=false<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>xianglin<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>950915<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">default-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用数据库连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 加载配置文件</span><br><span class="hljs-comment">// 2. 创建 DataSource 数据源</span><br>DataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br><span class="hljs-comment">// 3. 获取数据库连接</span><br>Connection connection = dataSource.getConnection();<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Apache-Commons-DBUtils"><a href="#Apache-Commons-DBUtils" class="headerlink" title="Apache Commons DBUtils"></a>Apache Commons DBUtils</h2><ul><li><p><code>Apache Commons DBUtils</code>是 Apache 提供的开源JDBC 工具类库</p></li><li><p>它对 JDBC简单封装，学习成本低</p></li><li><p>使用 DBUtils 能简化编码工作量</p></li><li><p><a href="https://commons.apache.org/proper/commons-dbutils/">commons-dbutil 官网</a></p></li><li><p>DBUtils 的依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-dbutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-dbutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Statement-和-PreparedStatement"><a href="#Statement-和-PreparedStatement" class="headerlink" title="Statement 和 PreparedStatement"></a>Statement 和 PreparedStatement</h2><ul><li><code>Statement</code>用于执行静态SQL 并返回结果</li><li><code>PreparedStatement</code>用于执行预编译的 SQL 语句。</li><li><code>PreparedStatement</code>由于预编译使得效率较高</li><li><code>PreparedStatement</code>可以有效的防止 SQL 注入风险</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 与数据库</title>
    <link href="/2020/09/06/MySQL%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2020/09/06/MySQL%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="SQL-与-NoSQL"><a href="#SQL-与-NoSQL" class="headerlink" title="SQL 与 NoSQL"></a>SQL 与 NoSQL</h2><h3 id="常见的关系型数据库："><a href="#常见的关系型数据库：" class="headerlink" title="常见的关系型数据库："></a>常见的关系型数据库：</h3><ul><li>MySQL</li><li>Oracle</li><li>DB2</li><li>SQL Server</li></ul><h3 id="常见的非关系型数据库"><a href="#常见的非关系型数据库" class="headerlink" title="常见的非关系型数据库"></a>常见的非关系型数据库</h3><ul><li>Redis</li><li>MongoDB</li></ul><h3 id="MySQL-安装与用户管理"><a href="#MySQL-安装与用户管理" class="headerlink" title="MySQL 安装与用户管理"></a>MySQL 安装与用户管理</h3><h3 id="MySQL-配置文件"><a href="#MySQL-配置文件" class="headerlink" title="MySQL 配置文件"></a>MySQL 配置文件</h3><p><code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p><h2 id="MySQL-数据库、表操作"><a href="#MySQL-数据库、表操作" class="headerlink" title="MySQL 数据库、表操作"></a>MySQL 数据库、表操作</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li>DML：数据操作语言</li><li>DCL：数据控制语言</li><li>DDL：数据定义语言</li><li>SQL 语句的注意事项<ol><li>SQL 语句不区分大小写</li><li>SQL 语句必须以分号结尾</li></ol></li><li>SQL 语句的注释<ol><li><code># 这是一段注释文字</code></li><li><code>/* 这是另一段注释文字 */</code></li></ol></li></ul><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 数据库操作</span><br><span class="hljs-comment"># 创建数据库</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> demo;<br><span class="hljs-comment"># 查询存在的数据库</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;<br><span class="hljs-comment"># 删除数据库</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> demo;<br></code></pre></td></tr></table></figure><h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">use</span> demo;<br><span class="hljs-comment"># 创建数据表--student</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student<br>(<br>    <span class="hljs-keyword">id</span>       <span class="hljs-built_in">int</span> <span class="hljs-keyword">unsigned</span> primary <span class="hljs-keyword">key</span>,<br>    <span class="hljs-keyword">name</span>     <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    sex      <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>)     <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    birthday <span class="hljs-built_in">date</span>        <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    tel      <span class="hljs-built_in">char</span>(<span class="hljs-number">11</span>)    <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    remark   <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student<br><span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;李强&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;1999-01-01&#x27;</span>, <span class="hljs-string">&#x27;17328222989&#x27;</span>, <span class="hljs-string">&#x27;备注&#x27;</span>);<br><br><span class="hljs-comment"># 查看表</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br><span class="hljs-comment"># 查看表结构</span><br>desc student;<br><span class="hljs-comment"># 查看建表语句</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-comment"># 删除表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student;<br></code></pre></td></tr></table></figure><h3 id="修改数据表结构"><a href="#修改数据表结构" class="headerlink" title="修改数据表结构"></a>修改数据表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 修改表结构</span><br><span class="hljs-comment"># 增加表字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br>    <span class="hljs-keyword">add</span> address  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">add</span> home_tel <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment"># 修改表字段属性</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br>    <span class="hljs-keyword">modify</span> home_tel <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment"># 修改字段名</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br>    <span class="hljs-keyword">change</span> address home_address <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment"># 删除字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br>    <span class="hljs-keyword">drop</span> home_address,<br>    <span class="hljs-keyword">drop</span> home_tel;<br><br>desc student;<br></code></pre></td></tr></table></figure><h2 id="MySQL-的数据类型和约束"><a href="#MySQL-的数据类型和约束" class="headerlink" title="MySQL 的数据类型和约束"></a>MySQL 的数据类型和约束</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>数值型</p><table><thead><tr><th>类型</th><th>大小（字节）</th><th>范围（有符号）</th><th>范围（无符号）</th><th>说明</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>[-128, 127]</td><td>[0, 255]</td><td>小整型值</td></tr><tr><td>SMALLINT</td><td>2</td><td>[-32768, 32767]</td><td>[0, 65535]</td><td></td></tr><tr><td>MEDIUMINT</td><td>3</td><td></td><td></td><td></td></tr><tr><td>INT</td><td>4</td><td>[-2147483648, 2147483647]</td><td>[0, 4294967295]</td><td></td></tr><tr><td>BIGINT</td><td>8</td><td></td><td></td><td></td></tr><tr><td>FLOAT</td><td>4</td><td></td><td></td><td>单精度浮点数</td></tr><tr><td>DOUBLE</td><td>8</td><td></td><td></td><td>双精度浮点数</td></tr><tr><td>DECIMAL</td><td>DECIMAL(M,D)</td><td></td><td></td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td></tr></tbody></table></li><li><p>字符串类型</p><table><thead><tr><th>类型</th><th>大小（字符）</th><th>说明</th></tr></thead><tbody><tr><td>CHAR</td><td>1 - 255</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>1 - 65535</td><td>变长字符串</td></tr><tr><td>TEXT</td><td>1 - 65535</td><td>长文本数据</td></tr><tr><td>BLOB</td><td>1 - 65535</td><td>二进制形式的长文本数据</td></tr></tbody></table><p><em>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</em></p></li><li><p>日期/时间类型</p><table><thead><tr><th>类型</th><th>大小（字节）</th><th>范围</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 / 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 / 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 / 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 / 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>日期时间</td></tr><tr><td>TIMESTAMP</td><td>4</td><td></td><td>YYYYMMDD HHMMSS</td><td>时间戳</td></tr></tbody></table></li></ul><h3 id="关系型数据库三范式"><a href="#关系型数据库三范式" class="headerlink" title="关系型数据库三范式"></a>关系型数据库三范式</h3><ol><li>列不可以再分：数据表的每一列都是不可分割的基本数据项，同一列中不能有多个值，也不能存在重复的属性</li><li>属性完全依赖于主键：数据表中的每条记录必须是唯一的。为了区分，通常要为表加上一个列存储唯一标识</li><li>属性不依赖于其他非主属性：每列都与主键有直接关系，不存在传递依赖</li></ol><h3 id="字段约束"><a href="#字段约束" class="headerlink" title="字段约束"></a>字段约束</h3><table><thead><tr><th>约束名称</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>主键约束</td><td>PRIMARY KEY</td><td>字段值唯一，且不能为 NULL</td></tr><tr><td>非空约束</td><td>NOT NULL</td><td>字段值不能为 NULL</td></tr><tr><td>唯一约束</td><td>UNIQUE</td><td>字段值唯一，可以为 NULL</td></tr><tr><td>外键约束</td><td>FOREIGN KEY</td><td></td></tr></tbody></table><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><p>数据量很大，而且经常被查询的数据可以设置索引</p></li><li><p>索引只添加在经常被用作检索条件的字段上</p></li><li><p>创建表时添加索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 使用索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_message<br>(<br>    <span class="hljs-keyword">id</span>          <span class="hljs-built_in">int</span> <span class="hljs-keyword">unsigned</span> primary <span class="hljs-keyword">key</span>,<br>    <span class="hljs-keyword">content</span>     <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>)            <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">type</span>        enum (<span class="hljs-string">&quot;公告&quot;</span>,<span class="hljs-string">&quot;通报&quot;</span>,<span class="hljs-string">&quot;个人通知&quot;</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    create_time <span class="hljs-built_in">timestamp</span>               <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">index</span> idx_type (<span class="hljs-keyword">type</span>)<br>);<br></code></pre></td></tr></table></figure></li><li><p>操作索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 添加删除索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_type <span class="hljs-keyword">on</span> t_message (<span class="hljs-keyword">type</span>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_message<br>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">index</span> idx_time (create_time);<br><span class="hljs-comment"># 查看索引</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">index</span> <span class="hljs-keyword">from</span> t_message;<br><span class="hljs-comment"># 删除索引</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> idx_type <span class="hljs-keyword">on</span> t_message;<br></code></pre></td></tr></table></figure></li></ul><h2 id="数据库的基本查询"><a href="#数据库的基本查询" class="headerlink" title="数据库的基本查询"></a>数据库的基本查询</h2><h3 id="数据的简单查询（别名、字段计算）"><a href="#数据的简单查询（别名、字段计算）" class="headerlink" title="数据的简单查询（别名、字段计算）"></a>数据的简单查询（别名、字段计算）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 基本查询</span><br><span class="hljs-keyword">select</span> *<br><span class="hljs-keyword">from</span> t_emp;<br><br><span class="hljs-keyword">select</span> empno, ename<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br><br><span class="hljs-comment"># 使用列别名</span><br><span class="hljs-keyword">select</span> empno, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">as</span> income<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br></code></pre></td></tr></table></figure><h3 id="数据的高级查询（排序、分页、去重）"><a href="#数据的高级查询（排序、分页、去重）" class="headerlink" title="数据的高级查询（排序、分页、去重）"></a>数据的高级查询（排序、分页、去重）</h3><ul><li><p>分页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 分页查询</span><br><span class="hljs-keyword">select</span> empno, ename<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">5</span>;<br><span class="hljs-keyword">select</span> *<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li><li><p>排序：ASC、DESC</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 排序</span><br><span class="hljs-keyword">select</span> empno, ename, sal, deptno<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span>;<br><br><span class="hljs-keyword">select</span> empno, ename, sal, hiredate<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span>, hiredate;<br><br><span class="hljs-keyword">select</span> empno,ename,sal<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span><br><span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li><li><p>去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 去重</span><br><span class="hljs-keyword">select</span> job<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br><br><span class="hljs-comment"># 去重失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job, ename<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br></code></pre></td></tr></table></figure></li></ul><h3 id="数据的有条件查询（表达式）"><a href="#数据的有条件查询（表达式）" class="headerlink" title="数据的有条件查询（表达式）"></a>数据的有条件查询（表达式）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 条件查询</span><br><span class="hljs-keyword">select</span> empno, ename, sal<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">where</span> deptno = <span class="hljs-number">10</span><br>  <span class="hljs-keyword">and</span> sal &gt;= <span class="hljs-number">2000</span>;<br>  <br><span class="hljs-comment"># 数字运算 </span><br><span class="hljs-keyword">select</span> empno, ename, sal, hiredate<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">where</span> deptno = <span class="hljs-number">10</span><br>  <span class="hljs-keyword">and</span> (sal + <span class="hljs-keyword">ifnull</span>(comm, <span class="hljs-number">0</span>)) * <span class="hljs-number">12</span> &gt;= <span class="hljs-number">15000</span><br>  <span class="hljs-keyword">and</span> <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(), hiredate) / <span class="hljs-number">365</span> &gt;= <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><ol><li><code>IS NULL</code></li><li><code>IS NOT NULL</code></li><li><code>BETWEEN AND</code></li><li><code>LIKE</code></li><li><code>REGEXP</code></li></ol><h2 id="数据库高级查询"><a href="#数据库高级查询" class="headerlink" title="数据库高级查询"></a>数据库高级查询</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>avg()</code>、<code>sum()</code></td><td>返回某列的平均值、和</td></tr><tr><td><code>count()</code></td><td>返回某列的行数</td></tr><tr><td><code>max()</code>、<code>min()</code></td><td>返回某列的最大值、最小值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal + <span class="hljs-keyword">ifnull</span>(comm, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> <span class="hljs-keyword">avg</span><br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(sal)<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">where</span> deptno <span class="hljs-keyword">in</span> (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br><br><span class="hljs-keyword">select</span> ename<br><span class="hljs-keyword">from</span> t_emp<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">char_length</span>(ename) = (<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(<span class="hljs-keyword">char_length</span>(ename))<br>                            <span class="hljs-keyword">from</span> imooc_demo.t_emp);<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(hiredate)<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*), <span class="hljs-keyword">count</span>(comm)<br><span class="hljs-keyword">from</span> imooc_demo.t_emp;<br><br></code></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">round</span>(<span class="hljs-keyword">avg</span>(sal))<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br><br><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal), <span class="hljs-keyword">sum</span>(sal), <span class="hljs-keyword">max</span>(sal), <span class="hljs-keyword">min</span>(sal)<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>;<br><br><span class="hljs-comment"># group_concat</span><br><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">group_concat</span>(ename), <span class="hljs-keyword">count</span>(*)<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">where</span> sal &gt;= <span class="hljs-number">2000</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></table></figure><h3 id="表连接查询"><a href="#表连接查询" class="headerlink" title="表连接查询"></a>表连接查询</h3><ul><li><p>表连接分为两种：内连接和外连接</p></li><li><p>内连接用于查询多张关系表满足连接条件的记录</p></li><li><p>内连接的多种语法形式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">select</span> ename<br><span class="hljs-keyword">from</span> imooc_demo.t_emp<br><span class="hljs-keyword">where</span> deptno = (<span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> imooc_demo.t_emp <span class="hljs-keyword">where</span> ename = <span class="hljs-string">&#x27;SCOTT&#x27;</span>);<br><br><span class="hljs-keyword">select</span> e2.ename<br><span class="hljs-keyword">from</span> imooc_demo.t_emp e1<br>         <span class="hljs-keyword">join</span> imooc_demo.t_emp e2 <span class="hljs-keyword">on</span> e1.deptno = e2.deptno<br><span class="hljs-keyword">where</span> e1.ename = <span class="hljs-string">&#x27;SCOTT&#x27;</span><br>  <span class="hljs-keyword">and</span> e2.ename != e1.ename;<br></code></pre></td></tr></table></figure></li><li><p>外连接的各种语法形式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询每名员工的编号、姓名、部门、月薪、工资等级、工龄、上司编号、上司姓名、上司部门</span><br><span class="hljs-keyword">select</span> e1.empno,<br>       e1.ename,<br>       d1.dname,<br>       (e1.sal + <span class="hljs-keyword">ifnull</span>(e1.comm, <span class="hljs-number">0</span>))             <span class="hljs-keyword">as</span> sal,<br>       s.grade,<br>       <span class="hljs-keyword">floor</span>(<span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(), e1.hiredate) / <span class="hljs-number">365</span>) <span class="hljs-keyword">as</span> gl,<br>       e2.empno                                     ssbh,<br>       e2.ename                                     ssxm,<br>       d2.dname                                     ssbm<br><span class="hljs-keyword">from</span> t_emp e1<br>         <span class="hljs-keyword">join</span> t_emp e2 <span class="hljs-keyword">on</span> e1.mgr = e2.empno<br>         <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_dept d1 <span class="hljs-keyword">on</span> e1.deptno = d1.deptno<br>         <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_salgrade s <span class="hljs-keyword">on</span> (e1.sal + <span class="hljs-keyword">ifnull</span>(e1.comm, <span class="hljs-number">0</span>)) <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal<br>         <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_dept d2 <span class="hljs-keyword">on</span> e2.deptno = d2.deptno;<br><br><span class="hljs-keyword">select</span> e1.empno,<br>       e1.ename,<br>       (<span class="hljs-keyword">select</span> d1.dname <span class="hljs-keyword">from</span> t_dept d1 <span class="hljs-keyword">where</span> d1.deptno = e1.deptno)                                       dname,<br>       (e1.sal + <span class="hljs-keyword">ifnull</span>(e1.comm, <span class="hljs-number">0</span>))             <span class="hljs-keyword">as</span>                                                       sal,<br>       (<span class="hljs-keyword">select</span> s.grade <span class="hljs-keyword">from</span> t_salgrade s <span class="hljs-keyword">where</span> (e1.sal + <span class="hljs-keyword">ifnull</span>(e1.comm, <span class="hljs-number">0</span>)) <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal) grade,<br>       <span class="hljs-keyword">floor</span>(<span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(), e1.hiredate) / <span class="hljs-number">365</span>) <span class="hljs-keyword">as</span>                                                       gl,<br>       e2.empno                                                                                           ssbh,<br>       e2.ename                                                                                           ssxm,<br>       (<span class="hljs-keyword">select</span> d2.dname <span class="hljs-keyword">from</span> t_dept d2 <span class="hljs-keyword">where</span> d2.deptno = e2.deptno)                                       ssbm<br><span class="hljs-keyword">from</span> t_emp e1<br>         <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_emp e2 <span class="hljs-keyword">on</span> e1.mgr = e2.empno;<br></code></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>子查询是一种查询中嵌套查询的语句</li><li>WHERE 子查询</li><li>FROM 子查询，只会执行一次</li><li>SELECT 子查询每输出一条记录都要执行一次，查询效率很低</li><li>单行子查询</li><li>多行子查询，只能出现在 WHERE 和 FROM 子查询中</li></ul><h2 id="MySQL对数据的基本操作"><a href="#MySQL对数据的基本操作" class="headerlink" title="MySQL对数据的基本操作"></a>MySQL对数据的基本操作</h2><h3 id="数据添加-INSERT"><a href="#数据添加-INSERT" class="headerlink" title="数据添加 INSERT"></a>数据添加 <code>INSERT</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tableName(col1,clo2,...) <span class="hljs-keyword">values</span>(value1,value2,...),(value1,value2,...);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_dept(deptno, dname, loc)<br><span class="hljs-keyword">values</span> (<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;技术部&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>),<br>       (<span class="hljs-number">70</span>, <span class="hljs-string">&#x27;保安部&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>);<br>      <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_emp<br>(empno, ename, job, mgr, hiredate, sal, comm, deptno)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8001</span>, <span class="hljs-string">&#x27;李娜&#x27;</span>, <span class="hljs-string">&#x27;SALESMAN&#x27;</span>, <span class="hljs-number">8000</span>, <span class="hljs-string">&#x27;1988-12-20&#x27;</span>, <span class="hljs-number">200</span>, <span class="hljs-literal">null</span>, (<span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> t_dept <span class="hljs-keyword">where</span> dname = <span class="hljs-string">&#x27;技术部&#x27;</span>));<br></code></pre></td></tr></table></figure><p>MySQL 的 INSERT 语句方言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] tableName <span class="hljs-keyword">set</span> col1 = value1,col2 = value2;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_dept<br><span class="hljs-keyword">set</span> deptno = <span class="hljs-number">8000</span>,<br>    dname  = <span class="hljs-string">&#x27;开发部&#x27;</span>,<br>    loc    = <span class="hljs-string">&#x27;上海&#x27;</span>;<br></code></pre></td></tr></table></figure><p>IGNORE 关键字会让 INSERT 只插入数据库不存在的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">ignore</span> <span class="hljs-keyword">into</span> t_dept (deptno, dname, loc)<br><span class="hljs-keyword">values</span> (<span class="hljs-number">40</span>, <span class="hljs-string">&#x27;部门名称&#x27;</span>, <span class="hljs-string">&#x27;部门地址&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> [<span class="hljs-keyword">ignore</span>] tableName<br><span class="hljs-keyword">set</span> col1 = value1, col2 = value2,...<br>[<span class="hljs-keyword">where</span> condition]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ...]<br>[<span class="hljs-keyword">limit</span> ...];<br></code></pre></td></tr></table></figure><ul><li><p>UPDATE 语句的表连接</p></li><li><p>表链接的 UPDATE 语句可以修改多张表的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> table1 [<span class="hljs-keyword">left</span> | <span class="hljs-keyword">right</span>]<span class="hljs-keyword">join</span> table2 <span class="hljs-keyword">on</span> condition <span class="hljs-keyword">set</span> col1 = value1, col2 = value2 ...;<br><span class="hljs-keyword">update</span> table1, table2 <span class="hljs-keyword">set</span> col1 = value1, col2 = value2 <span class="hljs-keyword">where</span> condition;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 把 ALLEN 调往 REASERCH 部门，职务调整为ANALYST</span><br><span class="hljs-keyword">update</span> t_emp e <span class="hljs-keyword">join</span> t_dept d<br><span class="hljs-keyword">set</span> e.deptno = d.deptno,<br>    e.job    = <span class="hljs-string">&#x27;ANALYST&#x27;</span>,<br>    d.loc    = <span class="hljs-string">&#x27;北京&#x27;</span><br><span class="hljs-keyword">where</span> e.ename = <span class="hljs-string">&#x27;ALLEN&#x27;</span><br>  <span class="hljs-keyword">AND</span> d.dname = <span class="hljs-string">&#x27;RESEARCH&#x27;</span>;<br>  <br>  <br><span class="hljs-comment"># 把底薪低于公司平均底薪的员工，底薪增加150 元</span><br><span class="hljs-keyword">update</span> t_emp <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> <span class="hljs-keyword">avg</span><br>                   <span class="hljs-keyword">from</span> t_emp) <span class="hljs-keyword">as</span> s<br>    <span class="hljs-keyword">on</span> sal &lt; s.avg<br><span class="hljs-keyword">set</span> sal = sal + <span class="hljs-number">150</span>;<br><br><span class="hljs-keyword">update</span> t_emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno<br><span class="hljs-keyword">set</span> e.deptno = <span class="hljs-number">20</span><br><span class="hljs-keyword">where</span> e.deptno <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span><br>   <span class="hljs-keyword">or</span> (d.dname = <span class="hljs-string">&#x27;SALES&#x27;</span> <span class="hljs-keyword">and</span> e.sal &lt; <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> [<span class="hljs-keyword">IGNORE</span>] <span class="hljs-keyword">FROM</span> tableName<br>[<span class="hljs-keyword">where</span> condition]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ...]<br>[<span class="hljs-keyword">limit</span> ...];<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">from</span> t_emp<br><span class="hljs-keyword">where</span> deptno = <span class="hljs-number">20</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal + <span class="hljs-keyword">ifnull</span>(comm, <span class="hljs-number">0</span>) <span class="hljs-keyword">desc</span><br><span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li><p>DELETE 语句可以引入表连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> table1 ,... <span class="hljs-keyword">FROM</span> table1 <span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> codition<br>[<span class="hljs-keyword">WHERE</span> ...]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...]<br>[<span class="hljs-keyword">LIMIT</span> ...];<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 删除 SALES 部门下所有员工和 SALES 部门记录</span><br><span class="hljs-keyword">DELETE</span> e,d<br><span class="hljs-keyword">FROM</span> t_emp e<br>         <span class="hljs-keyword">join</span> t_dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno<br><span class="hljs-keyword">where</span> d.dname = <span class="hljs-string">&#x27;SALES&#x27;</span>;<br><br><span class="hljs-comment"># 删除每个部门中底薪低于部门平均底薪的员工</span><br><span class="hljs-keyword">delete</span> e<br><span class="hljs-keyword">from</span> t_emp e<br>         <span class="hljs-keyword">join</span><br>     (<span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> <span class="hljs-keyword">avg</span><br>      <span class="hljs-keyword">from</span> t_emp<br>      <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">on</span> e.sal &lt; t.avg;<br>      <br><span class="hljs-comment"># 删除员工 KING 和直接下属的记录</span><br><span class="hljs-keyword">delete</span> e<br><span class="hljs-keyword">from</span> t_emp e<br>         <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> empno <span class="hljs-keyword">from</span> t_emp <span class="hljs-keyword">where</span> ename = <span class="hljs-string">&#x27;KING&#x27;</span>) t<br>              <span class="hljs-keyword">on</span> e.mgr = t.empno<br>                  <span class="hljs-keyword">or</span> e.empno = t.empno; <br></code></pre></td></tr></table></figure></li><li><p>DELETE 语句既可以是内连接也可以是外连接</p></li><li><p>快速删除数据表中的全量记录</p><p><code>TRUNCATE TABLE tableName</code></p><h2 id="MySQL-函数"><a href="#MySQL-函数" class="headerlink" title="MySQL 函数"></a>MySQL 函数</h2></li></ul><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225854.png" alt="image-20200906131818682"></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225855.png" alt="image-20200906132344618"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 数字函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">abs</span>(<span class="hljs-number">-100</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">round</span>(<span class="hljs-number">4.6288</span>, <span class="hljs-number">2</span>); <span class="hljs-comment"># 4.63</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">floor</span>(<span class="hljs-number">9.9</span>); <span class="hljs-comment"># 9</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">ceil</span>(<span class="hljs-number">3.2</span>); <span class="hljs-comment"># 4</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">power</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment"># 8</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">log</span>(<span class="hljs-number">7</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">ln</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">sqrt</span>(<span class="hljs-number">9</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">pi</span>();<br></code></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><ul><li><p>获取当前日期时间：<code>now()</code>、<code>curDate()</code>、<code>curTime()</code></p></li><li><p>日期格式化函数：<code>date_format()</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/133208.png" alt="image-20200906133207708"></p></li><li><p>日期偏移计算：<code>date_add(date,interval 偏移量 时间单位)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ADDDATE(<span class="hljs-keyword">now</span>(), <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">date_add</span>(<span class="hljs-keyword">now</span>(), <span class="hljs-built_in">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">day</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>left()</code></td><td>返回串左边的字符</td></tr><tr><td><code>right()</code></td><td>返回串右边的字符</td></tr><tr><td><code>ltrim()</code></td><td>去掉串左边的空格</td></tr><tr><td><code>rtrim()</code></td><td>去掉串右边的空格</td></tr><tr><td><code>trim()</code></td><td>去掉串左、右两边的字符</td></tr><tr><td><code>upper()</code></td><td>将串转为大写</td></tr><tr><td><code>lower()</code></td><td>将串转为小写</td></tr><tr><td><code>length()</code>、<code>char_length()</code>、<code>character_length()</code></td><td>返回串的长度</td></tr><tr><td><code>locate()</code></td><td>找出一个串的子串</td></tr><tr><td><code>substr()</code>、<code>substring()</code></td><td>返回字串的字符</td></tr><tr><td><code>concat()</code></td><td>链接字符串</td></tr><tr><td><code>replace()</code></td><td>替换字符</td></tr><tr><td><code>insert()</code></td><td>插入、替换字符串</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">right</span>(<span class="hljs-string">&#x27;right&#x27;</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">ltrim</span>(<span class="hljs-string">&#x27; 123 &#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">rtrim</span>(<span class="hljs-string">&#x27; 123 &#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(<span class="hljs-string">&#x27; 1 2 3 &#x27;</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">upper</span>(<span class="hljs-string">&#x27;Abc&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">lower</span>(<span class="hljs-string">&#x27;Abc&#x27;</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">length</span>(<span class="hljs-string">&#x27;123&#x27;</span>); <span class="hljs-comment">-- 3</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">length</span>(<span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">-- 3</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">length</span>(<span class="hljs-string">&#x27;中文 &#x27;</span>); <span class="hljs-comment">-- 7</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">length</span>(<span class="hljs-string">&#x27;中A&#x27;</span>); <span class="hljs-comment">-- 4</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">char_length</span>(<span class="hljs-string">&#x27;123 &#x27;</span>); <span class="hljs-comment">-- 4</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">char_length</span>(<span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">-- 3</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">char_length</span>(<span class="hljs-string">&#x27;中文&#x27;</span>); <span class="hljs-comment">-- 2</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">char_length</span>(<span class="hljs-string">&#x27;中A&#x27;</span>); <span class="hljs-comment">-- 2</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">character_length</span>(<span class="hljs-string">&#x27;123&#x27;</span>); <span class="hljs-comment">-- 3</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">character_length</span>(<span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">-- 3</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">character_length</span>(<span class="hljs-string">&#x27;中文&#x27;</span>); <span class="hljs-comment">-- 2</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">character_length</span>(<span class="hljs-string">&#x27;中A&#x27;</span>); <span class="hljs-comment">-- 2</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">locate</span>(<span class="hljs-string">&#x27;ab1c&#x27;</span>, <span class="hljs-string">&#x27;中3abcde&#x27;</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">substr</span>(<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-number">-3</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">substring</span>(<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">select</span> substring_index(<span class="hljs-string">&#x27;www.ee.com&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">-1</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">insert</span>(<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;先生&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">replace</span>(<span class="hljs-string">&#x27;先生你好&#x27;</span>, <span class="hljs-string">&#x27;先生&#x27;</span>, <span class="hljs-string">&#x27;女士&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h3><ul><li><p><code>IF()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;a&#x27;</span> &gt; <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">IF</span>(<span class="hljs-keyword">day</span>(<span class="hljs-keyword">now</span>()) = <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;第一天&#x27;</span>, <span class="hljs-string">&#x27;不是第一天&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>IFNULL()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">ifnull</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>CASE()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">CASE<br>WHEN condition1 THEN value1<br>WHEN condition2 THEN value2<br>ELSE value<br><span class="hljs-keyword">END</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">day</span>(<span class="hljs-keyword">now</span>()) <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;第一天&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;不是第一天&#x27;</span> <span class="hljs-keyword">end</span> ;<br></code></pre></td></tr></table></figure></li></ul><h2 id="MySQL-的事务机制"><a href="#MySQL-的事务机制" class="headerlink" title="MySQL 的事务机制"></a>MySQL 的事务机制</h2><h3 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> <span class="hljs-keyword">TRANSACTION</span>;<br><span class="hljs-keyword">comment</span>;<br>[<span class="hljs-keyword">ROLLBACK</span>]|[<span class="hljs-keyword">COMMIT</span>];<br><br><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">from</span> t_emp;<br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">from</span> t_dept;<br><span class="hljs-keyword">select</span> *<br><span class="hljs-keyword">from</span> t_dept;<br><br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h3 id="事务的-ACID"><a href="#事务的-ACID" class="headerlink" title="事务的 ACID"></a>事务的 ACID</h3><ul><li>原子性：一个事务中的所有操作要么全部成功，要么全部失败。事务执行后，不允许存在中间状态；</li><li>一致性：不管在任何给定时间，并发事务有多少，事务必须保证运行结果的一致性；</li><li>隔离性：事务不受其它并发事务的影响；</li><li>持久性：事务一旦提交，结果便是永久性的。即便发生宕机，依然可以依靠事务日志完成数据的持久化。</li></ul><h3 id="事务的四个隔离级别"><a href="#事务的四个隔离级别" class="headerlink" title="事务的四个隔离级别"></a>事务的四个隔离级别</h3><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>可以读取其它事务未提交的数据</td></tr><tr><td>READ COMMITTED</td><td>读取其它事务提交的数据</td></tr><tr><td>repeatable read</td><td>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作</td></tr><tr><td>Serializable</td><td>事务串行化顺序执行，可以避免脏读、不可重复读与幻读</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">SESSION</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">ISOLATION</span> <span class="hljs-keyword">LEVEL</span> <span class="hljs-keyword">READ</span> UNCOMMITTED; <br></code></pre></td></tr></table></figure><h3 id="MySQL-数据导入导出"><a href="#MySQL-数据导入导出" class="headerlink" title="MySQL 数据导入导出"></a>MySQL 数据导入导出</h3><ul><li><p>数据导出，导出的是业务数据</p></li><li><p>数据备份，备份数据文件、日志文件、索引文件等等</p></li><li><p><code>mysqldump</code> 用来把业务数据导出成 SQL 文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysqldump -uroot -p [no-data] database &gt; path<br><br>mysqldump -uxianglin -p mybatis &gt; mybatis.sql<br></code></pre></td></tr></table></figure></li><li><p><code>source</code> 命令用于导入 SQL 文件，包括创建数据表、写入记录等。</p></li></ul><h2 id="SQL-练习"><a href="#SQL-练习" class="headerlink" title="SQL 练习"></a>SQL 练习</h2><p>表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`dept`</span>  (<br>  <span class="hljs-string">`deptno`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`dname`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`loc`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`deptno`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) <span class="hljs-keyword">ENGINE</span> = <span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT = <span class="hljs-number">71</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_general_ci ROW_FORMAT = Dynamic;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`emp`</span>  (<br>  <span class="hljs-string">`empno`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`ename`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`job`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`mgr`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`hiredate`</span> <span class="hljs-built_in">date</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`sal`</span> <span class="hljs-built_in">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`comm`</span> <span class="hljs-built_in">decimal</span>(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>) <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`deptno`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`empno`</span>) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">INDEX</span> <span class="hljs-string">`deptno`</span>(<span class="hljs-string">`deptno`</span>) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-string">`emp_ibfk_1`</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`deptno`</span>) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-string">`dept`</span> (<span class="hljs-string">`deptno`</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> RESTRICT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> RESTRICT<br>) <span class="hljs-keyword">ENGINE</span> = <span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT = <span class="hljs-number">8019</span> <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_general_ci ROW_FORMAT = Dynamic;<br></code></pre></td></tr></table></figure><ul><li><p>按部门编号升序、工资倒序排列员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">asc</span>, sal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li><li><p>列出 deptno=30的部门名称及员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.*,d.dname <span class="hljs-keyword">from</span> emp e, dept d <span class="hljs-keyword">where</span> e.deptno = d.deptno <span class="hljs-keyword">and</span> d.deptno = <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li><li><p>列出每个部门最高、最低、平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">max</span>, <span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">min</span>, <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">avg</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno; <br></code></pre></td></tr></table></figure></li><li><p>列出市场部 SALES 及研发部RESEARCH的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.*,d.dname <span class="hljs-keyword">from</span> emp e, dept d <span class="hljs-keyword">where</span> e.deptno = d.deptno <span class="hljs-keyword">and</span> d.dname <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;SALES&#x27;</span>,<span class="hljs-string">&#x27;RESEARCH&#x27;</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> d.deptno;<br></code></pre></td></tr></table></figure></li><li><p>列出人数超过三人的部门</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">where</span> d.deptno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> e.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> e.deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(*) &gt; <span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">select</span> d.dname, <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> dept d , emp e <span class="hljs-keyword">where</span> d.deptno = e.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(*) &gt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>计算 MILLER 年薪比 SMITH 高多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s.salary - m.salary <span class="hljs-keyword">from</span> <br>(<span class="hljs-keyword">select</span> e.sal * <span class="hljs-number">12</span> + <span class="hljs-keyword">ifnull</span>(e.comm,<span class="hljs-number">0</span>) salary, e.ename  <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">where</span> e.ename = <span class="hljs-string">&#x27;SMITH&#x27;</span>) m,<br>(<span class="hljs-keyword">select</span> e.sal * <span class="hljs-number">12</span> + <span class="hljs-keyword">ifnull</span>(e.comm,<span class="hljs-number">0</span>) salary, e.ename  <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">where</span> e.ename = <span class="hljs-string">&#x27;MILLER&#x27;</span>) s<br></code></pre></td></tr></table></figure></li><li><p>列出直接向KING 汇报的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">where</span> e.mgr = (<span class="hljs-keyword">select</span> empno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename = <span class="hljs-string">&#x27;KING&#x27;</span>);<br><br><span class="hljs-keyword">select</span> e.* <span class="hljs-keyword">from</span> emp e,emp e1 <span class="hljs-keyword">where</span> e.mgr = e1.empno <span class="hljs-keyword">and</span> e1.ename = <span class="hljs-string">&#x27;KING&#x27;</span>;<br><br><span class="hljs-keyword">select</span> e.* <span class="hljs-keyword">from</span> emp e1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp e <span class="hljs-keyword">on</span> e1.empno = e.mgr <span class="hljs-keyword">where</span> e1.ename = <span class="hljs-string">&#x27;KING&#x27;</span>; <br></code></pre></td></tr></table></figure></li><li><p>列出公司所有员工的工龄，并按倒序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename ,<span class="hljs-keyword">ceil</span>(<span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(),hiredate)/<span class="hljs-number">365</span>) age <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age<br></code></pre></td></tr></table></figure></li><li><p>计算管理者与基层员工平均薪资的差距</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.avg - b.avg <span class="hljs-keyword">from</span> <br>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">avg</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job = <span class="hljs-string">&#x27;PRESIDENT&#x27;</span> <span class="hljs-keyword">or</span> job = <span class="hljs-string">&#x27;MANAGER&#x27;</span>) a,<br>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">avg</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job <span class="hljs-keyword">not</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;PRESIDENT&#x27;</span> ,<span class="hljs-string">&#x27;MANAGER&#x27;</span>)) b<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Web 进阶</title>
    <link href="/2020/09/06/javaweb%E8%BF%9B%E9%98%B6/"/>
    <url>/2020/09/06/javaweb%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="JSON入门"><a href="#JSON入门" class="headerlink" title="JSON入门"></a>JSON入门</h1><h2 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h2><ul><li>JavaScript Object Notation</li><li>JSON是轻量级的数据交换格式</li><li>独立于语言、自解释、易于理解书写</li></ul><h2 id="JavaScript与JSON"><a href="#JavaScript与JSON" class="headerlink" title="JavaScript与JSON"></a>JavaScript与JSON</h2><ul><li><code>JSON.parse()</code>将json格式的字符串转为JSON对象</li><li><code>JSON.stringify()</code>将JSON对象转为json字符串</li></ul><h2 id="Java与JSON"><a href="#Java与JSON" class="headerlink" title="Java与JSON"></a>Java与JSON</h2><ul><li>Java 的JSON工具包：FastJson、Jackson、Gson、Json-lib</li><li>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</li><li><code>JSON.toJSONString(Object object)</code></li><li><code>JSON.parseObject(String text, Class&lt;T&gt; clazz)</code></li><li><code>JSON.parseArray(String text, Class&lt;T&gt; clazz)</code></li></ul><h1 id="jQuery-amp-Ajax"><a href="#jQuery-amp-Ajax" class="headerlink" title="jQuery&amp;Ajax"></a>jQuery&amp;Ajax</h1><h2 id="jQuery使用"><a href="#jQuery使用" class="headerlink" title="jQuery使用"></a>jQuery使用</h2><ul><li>jQuery是一个轻量级的js库，使用简便</li><li>jQuery的核心是选择器，用于获取页面的元素</li><li>jQuery<a href="https://jquery.com/">官网</a>，采用独立JS文件发布</li></ul><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><ul><li><p>jQuery选择器用于选中需要操作的页面元素：<code>$(expression)</code></p></li><li><p>jQuery基础选择器</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202008/235955.png" alt="image-20200808105406866"></p></li><li><p>jQuery层叠选择器</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225741.png" alt="image-20200808110521981"></p></li><li><p>jQuery属性选择器</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225744.png" alt="image-20200808111327519"></p></li><li><p>位置选择器</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/20200808125830.png" alt="image-20200808125829925"></p></li><li><p>表单选择器</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225746.png" alt="image-20200808130313340"></p></li></ul><h3 id="jQuery操作元素"><a href="#jQuery操作元素" class="headerlink" title="jQuery操作元素"></a>jQuery操作元素</h3><ul><li>操作元素的属性：<code>$().attr()</code>、<code>$().removeAttr(name)</code></li><li>操作元素的样式：<code>css()</code>、<code>addClass()</code>、<code>removeClass()</code></li><li>操作元素的内容：<code>val()</code>、<code>text()</code>、<code>html()</code></li></ul><h3 id="jQuery处理事件"><a href="#jQuery处理事件" class="headerlink" title="jQuery处理事件"></a>jQuery处理事件</h3><ul><li><p><code>on(&#39;eventName&#39;,function(event)&#123;&#125;)</code></p></li><li><p>jQuery常用事件</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225747.png" alt="image-20200808134153452"></p></li></ul><h2 id="Ajax原理"><a href="#Ajax原理" class="headerlink" title="Ajax原理"></a>Ajax原理</h2><ul><li>Ajax:Asynchronous JavaScript and XML（异步的JavaScript和XML）</li></ul><h3 id="XMLHttpRequest使用步骤和属性及方法"><a href="#XMLHttpRequest使用步骤和属性及方法" class="headerlink" title="XMLHttpRequest使用步骤和属性及方法"></a>XMLHttpRequest使用步骤和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">属性及方法</a></h3><ol><li><p>创建 XMLHttpRequest</p></li><li><p>发送请求</p></li><li><p>处理服务类响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xhr;<br> <span class="hljs-comment">// 创建请求</span><br> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>   xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>   xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br> &#125;<br> <span class="hljs-comment">// 发送请求</span><br> xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8080/ajax/ajax&#x27;</span>, <span class="hljs-literal">true</span>);<br> xhr.send();<br> <span class="hljs-comment">// 处理响应</span><br> xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-comment">// 响应已被接收且服务器处理成功</span><br>   <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>     <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;divContent&quot;</span>).innerHTML = xhr.responseText;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>XMLHttpRequest状态</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225748.png" alt="image-20200808215829083"></p></li></ul><h3 id="jQuery-对-Ajax-的支持"><a href="#jQuery-对-Ajax-的支持" class="headerlink" title="jQuery 对 Ajax 的支持"></a>jQuery 对 Ajax 的支持</h3><ul><li><p>Ajax 常用设置项</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225750.png" alt="截屏2020-08-08 22.32.33"></p></li><li><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>  url: <span class="hljs-string">&#x27;/ajax/news&#x27;</span>,<br>  type: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>  success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(json);<br>    $.each(json, <span class="hljs-function">(<span class="hljs-params">i, news</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(news);<br>      <span class="hljs-built_in">console</span>.log(i);<br>      <span class="hljs-keyword">let</span> content = $(<span class="hljs-string">&#x27;#divContent&#x27;</span>);<br>      content.html(content.html() + <span class="hljs-string">`&lt;h2&gt;<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>.<span class="hljs-subst">$&#123;news.title&#125;</span>&lt;/h2&gt;&lt;br&gt;&lt;p&gt;<span class="hljs-subst">$&#123;news.date&#125;</span>:<span class="hljs-subst">$&#123;news.content&#125;</span>&lt;/p&gt;`</span>);<br>    &#125;);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h1 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h1><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><ul><li><p>正则表达式是检查、匹配字符串的表达式</p></li><li><p>字符串的查找、替换是正则表达式的主要用途</p></li><li><p>字符范围匹配，正则表达式<a href="https://tool.oschina.net/regex">测试工具</a></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202008/101942.png" alt="image-20200809101941816"></p></li><li><p>元字符</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225754.png" alt="image-20200809102743977"></p></li><li><p>多次重复匹配</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225755.png" alt="image-20200809103658986"></p></li><li><p>定位匹配</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225756.png" alt="image-20200809104705932"></p></li><li><p>贪婪模式和非贪婪模式</p></li><li><p>表达式分组</p></li></ul><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><ul><li><p>Java 使用正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegexSample</span> </span>&#123;<br>    <span class="hljs-comment">// 1. 创建正则表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern PATTERN = Pattern.compile(<span class="hljs-string">&quot;&lt;li&gt;([\\u4e00-\\u9fa5]&#123;2,8&#125;)([a-zA-Z]&#123;1,10&#125;)&lt;/li&gt;&quot;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 2. 获取内容</span><br>        String source = <span class="hljs-string">&quot;/Users/xianglin/Documents/IdeaProjects/JavaWeb/json-ajax-reg-filter-listener/web/sample.html&quot;</span>;<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(source, StandardCharsets.UTF_8));<br>        StringBuilder content = <span class="hljs-keyword">new</span> StringBuilder();<br>        String lineText;<br>        <span class="hljs-keyword">while</span> ((lineText = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            content.append(lineText);<br>        &#125;<br>        <span class="hljs-comment">// 3. 匹配正则表达式</span><br>        Matcher matcher = PATTERN.matcher(content);<br>        <span class="hljs-comment">// 4. 分析处理结果</span><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            <span class="hljs-comment">// 匹配完整字符串</span><br>            System.out.println(matcher.group(<span class="hljs-number">0</span>));<br><br>            String chineseName = matcher.group(<span class="hljs-number">1</span>);<br>            String englishName = matcher.group(<span class="hljs-number">2</span>);<br>            System.out.println(chineseName + <span class="hljs-string">&quot;-&quot;</span> + englishName);<br>        &#125;<br><br>        reader.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="过滤器的作用和使用场景"><a href="#过滤器的作用和使用场景" class="headerlink" title="过滤器的作用和使用场景"></a>过滤器的作用和使用场景</h2><ul><li>过滤器是 J2EE Servlet 模块下的标准组件</li><li>Filter 的作用是对 URL进行统一的拦截处理</li><li>Filter通常用于应用程序层面的全局处理</li><li>任何过滤器都要实现接口：<code>javax.servlet.Filter</code></li><li>在Filter 实现类中的<code>doFilter</code>方法编写过滤器的功能代码</li><li>在 <code>web.xml </code>中对过滤器进行配置，说明拦截 URL 的范围</li><li>在<code>web.xml</code>中配置<code>&lt;init-param&gt;</code>为 Filter 提供参数</li></ul><h2 id="过滤器开发和原理"><a href="#过滤器开发和原理" class="headerlink" title="过滤器开发和原理"></a>过滤器开发和原理</h2><h3 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h3><ol><li>初始化：Filter 创建 <code>Filter.init()</code></li><li>提供服务：<code>Filter.doFilter()</code></li><li>销毁：<code>Filter.destroy()</code></li></ol><h3 id="过滤链"><a href="#过滤链" class="headerlink" title="过滤链"></a>过滤链</h3><ul><li>每个过滤器应该只有单独的职能</li><li>过滤器的执行顺序是以<code>&lt;filter-mapping&gt;</code>配置为准</li><li>注解形式的过滤链是按照过滤器的类名的字母升序的顺序依次执行的而不是filterName名称</li><li><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225758.png" alt="image-20200809134059344"></li></ul><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><h2 id="监听器的作用"><a href="#监听器的作用" class="headerlink" title="监听器的作用"></a>监听器的作用</h2><ul><li>监听器 Listener 是 J2EE Servlet 中的标准模块</li><li>Listener的作用是对Web 应用对象的行为进行监控</li><li>三种监听对象<ol><li><code>ServletContext</code>:<code>javax.servlet.ServletContextListener</code></li><li><code>HttpSession</code>:<code>javax.servlet.http.HttpSessionListener</code></li><li><code>ServletRequest</code>:<code>javax.servlet.ServletRequestListener</code></li></ol></li><li>属性监听接口<ol><li><code>javax.servlet.ServletContextAttributeListener</code></li><li><code>javax.servlet.http.HttpSessionAttributeListener</code></li><li><code>javax.servlet.ServletRequestAttributeListener</code></li></ol></li></ul><h2 id="监听器的使用"><a href="#监听器的使用" class="headerlink" title="监听器的使用"></a>监听器的使用</h2><ul><li>实现 XXXListener 接口，不同接口对应不同的监听对象</li><li>实现监听器中的独有方法</li><li>在<code>web.xml</code>对监听器进行配置</li></ul><h2 id="重定向与请求转发"><a href="#重定向与请求转发" class="headerlink" title="重定向与请求转发"></a>重定向与请求转发</h2><ul><li>请求转发是服务器跳转，只会产生一次请求</li><li>请求转发语句是：<code>request.getRequestDispatcher().forward()</code></li><li>重定向是浏览器端的跳转，会产生两次请求 </li><li><code>Status Code 302</code> <code>Location: /sb</code></li><li>重定向语句是：<code>response.sendRedirect()</code></li></ul><h2 id="Session原理"><a href="#Session原理" class="headerlink" title="Session原理"></a>Session原理</h2><h1 id="Freemarker"><a href="#Freemarker" class="headerlink" title="Freemarker"></a>Freemarker</h1><h2 id="模板引擎的实现过程"><a href="#模板引擎的实现过程" class="headerlink" title="模板引擎的实现过程"></a>模板引擎的实现过程</h2><ul><li>数据+模板=结果</li><li>将数据与展示解耦</li><li>JSP、Freemarker</li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP-请求结构"><a href="#HTTP-请求结构" class="headerlink" title="HTTP 请求结构"></a>HTTP 请求结构</h2><ul><li>HTTP 请求包含三个结构：请求行、请求头、请求体</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Web 基础</title>
    <link href="/2020/09/06/javaweb%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/06/javaweb%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="XML入门"><a href="#XML入门" class="headerlink" title="XML入门"></a>XML入门</h1><h2 id="XML的作用"><a href="#XML的作用" class="headerlink" title="XML的作用"></a>XML的作用</h2><ul><li>XML（EXtensible Makup Language）是可扩展标记语言</li><li>编写XML就是编写标签，XML没有预定义标签</li><li>XML重在保存和传输数据</li><li>良好的可读性</li></ul><h3 id="XML用途"><a href="#XML用途" class="headerlink" title="XML用途"></a>XML用途</h3><ol><li>用于Java程序的配置文件（<code>web.xml</code>）</li><li>用于保存、传输程序产生的数据（EJB调用、WebService的soap协议）</li></ol><h2 id="XML的语法规则"><a href="#XML的语法规则" class="headerlink" title="XML的语法规则"></a>XML的语法规则</h2><ol><li><p>XML第一行必须是XML声明；XML声明说明XML文档的基本信息，包括版本号与字符集。</p><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></p></li><li><p>XML只有一个根节点</p></li></ol><h3 id="XML书写规则"><a href="#XML书写规则" class="headerlink" title="XML书写规则"></a>XML书写规则</h3><ul><li><p>合法的标签名</p></li><li><p>适当的注释与缩进可以让XML文档易于阅读理解</p></li><li><p>合理使用属性</p></li><li><p>处理特殊字符：</p><ol><li><p>实体引用：</p><table><thead><tr><th>实体引用</th><th>对应符号</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;lt;</code></td><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&amp;gt;</code></td><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&amp;amp;</code></td><td><code>&amp;</code></td><td>和号</td></tr><tr><td><code>&amp;apos;</code></td><td><code>&#39;&#39;</code></td><td>单引号</td></tr><tr><td><code>&amp;quot;</code></td><td><code>&quot;&quot;</code></td><td>双引号</td></tr></tbody></table></li><li><p>使用CDATA标签：CDATA指的是不应该由XML解析器进行解析的文本数据</p><p><code>&lt;![CDATA[1+1&lt;3]]&gt;</code></p></li></ol></li><li><p>有序的子元素</p></li></ul><h2 id="Java解析XML"><a href="#Java解析XML" class="headerlink" title="Java解析XML"></a>Java解析XML</h2><ul><li>DOM文档对象模型：定义了访问和操作XML文档的标准方法</li><li>Dom4j是一个易用的，开源的库，用于解析XML。</li><li>Dom4j将XML视为一个Document对象</li><li>XML标签被Dom4j定义为Element对象</li></ul><h2 id="XML语义约束"><a href="#XML语义约束" class="headerlink" title="XML语义约束"></a>XML语义约束</h2><ul><li>XML文档结构正确，但可能不是有效的</li><li>XML语义约束的两种方式：DTD、Schema</li></ul><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><ul><li>DTD（Document Type Definition），是一种简单易用的语义约束方式。</li><li>DTD文件的扩展名为<code>.dtd</code></li><li>在XML中使用<code>&lt;!DOCTYPE&gt;</code>标签来引用DTD</li><li>利用DTD中的<code>&lt;!ELEMENT&gt;</code>标签，定义XML中运行出现的节点及数量</li></ul><h3 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h3><ul><li>XML Schema提供了数据类型，格式限定，数据范围等特性</li><li>XML Schema是W3C标准</li></ul><h2 id="XPath路径表达式"><a href="#XPath路径表达式" class="headerlink" title="XPath路径表达式"></a>XPath路径表达式</h2><ul><li><p>XPath路径表达式是XML文档中查找数据的语言</p></li><li><p>最常用的基本表达式</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>nodename</code></td><td>选取此节点的所有子节点</td></tr><tr><td><code>/</code></td><td>从根节点选取</td></tr><tr><td><code>//</code></td><td>从匹配的当前节点选择文档中的节点，而不考虑它们的位置</td></tr><tr><td><code>.</code></td><td>选取当前节点</td></tr><tr><td><code>..</code></td><td>选取当前节点的父节点</td></tr><tr><td><code>@</code></td><td>选取属性</td></tr></tbody></table></li><li><p>XPath谓语表达式</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225704.png"></p></li><li><p>Jaxen：Jaxen的是一个Java编写的开源的XPath库。</p></li><li><p>适应多种不同的对象模型，包括DOM，XOM，dom4j和JDOM。</p></li></ul><h1 id="Servlet入门"><a href="#Servlet入门" class="headerlink" title="Servlet入门"></a>Servlet入门</h1><h3 id="J2EE"><a href="#J2EE" class="headerlink" title="J2EE"></a>J2EE</h3><ul><li>J2EE（Java 2 Platform Enterprise Edition）是指Java 2 企业版</li><li>J2EE是一组技术规范与指南，具体实现由软件厂商实现</li><li>开发Web应用程序是J2EE最核心功能</li><li>J2EE是由13个功能模块组成的<ul><li>Servlet、JSP、JDBC、XML、EJB、RMI、JNDI、JMS、JTA、JavaMail、JAF、CORBA、JTS</li></ul></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ul><li>Tomcat是J2EE Web标准实现</li></ul><h2 id="Servlet-开发技巧"><a href="#Servlet-开发技巧" class="headerlink" title="Servlet 开发技巧"></a>Servlet 开发技巧</h2><ul><li><p>Servlet（Server Applet）服务器小程序，主要用于生成动态Web内容</p></li><li><p>标准Java WEB工程目录</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202008/235805.png"></p></li></ul><h3 id="Servlet开发步骤"><a href="#Servlet开发步骤" class="headerlink" title="Servlet开发步骤"></a>Servlet开发步骤</h3><ol><li>创建类，继承自<code>javax.servlet.http.HttpServlet</code></li><li>在<code>service</code>方法中处理事件</li><li>在<code>web.xml</code>中配置servlet访问路径和servlet实现类的映射</li></ol><h2 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h2><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ol><li>装载–扫描<code>web.xml</code>和<code>@Servlet</code>注解</li><li>执行构造函数创建实例</li><li>执行初始化方法<code>init()</code>进行初始化</li><li>通过<code>service()</code>方法提供服务</li><li>Servlet销毁时执行<code>destroy()</code>方法</li></ol><h3 id="使用注解简化Servlet配置"><a href="#使用注解简化Servlet配置" class="headerlink" title="使用注解简化Servlet配置"></a>使用注解简化Servlet配置</h3><ul><li>在Servlet3.x之后引用了注解特性</li><li>Servlet核心注解：<code>@Servlet</code></li></ul><h3 id="启动时加载Servlet"><a href="#启动时加载Servlet" class="headerlink" title="启动时加载Servlet"></a>启动时加载Servlet</h3><ul><li>在<code>web.xml</code>中使用<code>&lt;load-on-startup&gt;</code></li><li>启动时加载在工作中常用于系统预处理</li></ul><h2 id="Servlet核心对象"><a href="#Servlet核心对象" class="headerlink" title="Servlet核心对象"></a>Servlet核心对象</h2><h1 id="JSP入门"><a href="#JSP入门" class="headerlink" title="JSP入门"></a>JSP入门</h1><h2 id="JSP用途"><a href="#JSP用途" class="headerlink" title="JSP用途"></a>JSP用途</h2><h3 id="Servlet的缺点"><a href="#Servlet的缺点" class="headerlink" title="Servlet的缺点"></a>Servlet的缺点</h3><ul><li>静态的HTML和和Java代码柔和在一起，难以维护</li><li>Servlet利用<code>out.pringln()</code>输出HTML代码，效率低下</li><li>JSP全称是：Java Server Page，本质就是Servlert</li></ul><h2 id="JSP执行原理"><a href="#JSP执行原理" class="headerlink" title="JSP执行原理"></a>JSP执行原理</h2><h3 id="JSP的执行过程"><a href="#JSP的执行过程" class="headerlink" title="JSP的执行过程"></a>JSP的执行过程</h3><ul><li>浏览器请求</li><li>Tomcat找到对应的JSP（index.jsp），将其转译为Servlet ( index_jsp.java)</li><li>Servlet编译成Java字节码 (index_jsp.class)</li></ul><h2 id="JSP基本语法规则"><a href="#JSP基本语法规则" class="headerlink" title="JSP基本语法规则"></a>JSP基本语法规则</h2><h3 id="JSP代码块"><a href="#JSP代码块" class="headerlink" title="JSP代码块"></a>JSP代码块</h3><p>用于在JSP中嵌入Java代码</p><p>JSP代码块的语法：<code>&lt;% code %&gt;</code></p><h3 id="JSP声明构造块"><a href="#JSP声明构造块" class="headerlink" title="JSP声明构造块"></a>JSP声明构造块</h3><p>JSP声明构造块用于定义声明方法和变量</p><p>JSP声明语法块语法：<code>&lt;%! code %&gt;</code></p><h3 id="JSP输出指令"><a href="#JSP输出指令" class="headerlink" title="JSP输出指令"></a>JSP输出指令</h3><p>JSP输出指令用于在JSP页面中显示Java代码执行的结果</p><p>JSP输出指令语法：<code>&lt;%= code %&gt;</code></p><h3 id="JSP处理指令"><a href="#JSP处理指令" class="headerlink" title="JSP处理指令"></a>JSP处理指令</h3><p>JSP处理指令用于提供JSP执行过程中的辅助信息</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;%@page%&gt;</code></td><td>定义当前JSP页面的全局设置</td></tr><tr><td><code>&lt;%@include%&gt;</code></td><td>将其他JSP页面与当前JSP页面合并</td></tr><tr><td><code>&lt;%@taglib%&gt;</code></td><td>引入JSP标签库</td></tr></tbody></table><h3 id="JSP中的注释"><a href="#JSP中的注释" class="headerlink" title="JSP中的注释"></a>JSP中的注释</h3><ol><li>JSP注释：<code>&lt;%-- statment --%&gt;</code></li><li>Java注释：<code>// /* */</code></li><li>HTML注释：<code>&lt;!-- --&gt;</code></li></ol><h2 id="JavaWeb核心特性"><a href="#JavaWeb核心特性" class="headerlink" title="JavaWeb核心特性"></a>JavaWeb核心特性</h2><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><h3 id="Tomcat乱码问题"><a href="#Tomcat乱码问题" class="headerlink" title="Tomcat乱码问题"></a>Tomcat乱码问题</h3><ul><li>Tomcat默认使用ISO-8859-1编码规则</li><li>Tomcat的<code>server.xml</code>中配置<code>URLEncoding=&quot;UTF-8&quot;</code></li></ul><h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202008/235816.png" alt="image-20200802132136208"></p><h1 id="JSTL和EL表达式"><a href="#JSTL和EL表达式" class="headerlink" title="JSTL和EL表达式"></a>JSTL和EL表达式</h1><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li><p>Expression Language，用于简化JSP的输出</p></li><li><p>EL表达式的基本语法：<code>$&#123;expression&#125;</code></p></li><li><p>作用域对象，忽略作用域对象时，EL表达式默认会按作用域范围从小到大依次尝试获取</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202008/235821.png" alt="image-20200802140924186"></p></li><li><p>EL表达式输出：<code>$&#123;[scope.]attr[.subAttr]&#125;</code></p></li><li><p>EL表达式支持运算</p></li></ul><h2 id="JSTL常用标签"><a href="#JSTL常用标签" class="headerlink" title="JSTL常用标签"></a>JSTL常用标签</h2><ul><li><p>JSP Standard Tag Library，JSP标准标签库</p></li><li><p>JSTL由Sun定义规范，由Apache Tomcat进行实现</p></li><li><p>JSTL下载地址：<a href="https://tomcat.apache.org/download-taglibs.cgi">https://tomcat.apache.org/download-taglibs.cgi</a></p></li><li><p>JSTL按功能划分为五类标签库</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202008/235854.png" alt="image-20200802205819340"></p></li><li><p>核心标签库Core是JSTL标签库中最重要的标签库，提供了JSTL的基础功能</p></li><li><p><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code>：<code>taglibs-standard-impl-1.2.5.jar!\META-INF\c.tld</code></p><ul><li><code>&lt;c:if&gt;</code>单分支判断</li><li><code>&lt;c:when&gt; &lt;c:choose&gt; &lt;c:otherwise&gt;</code>多分支判断</li><li><code>&lt;c:forEach&gt;</code>遍历集合中的每一个对象</li></ul></li><li><p>格式化标签库</p></li><li><p><code>&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</code></p><ul><li><code>&lt;fmt:formatDate&gt;</code></li><li><code>&lt;fmt:formatNumber&gt;</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web 基础</title>
    <link href="/2020/09/06/web%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/06/web%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB-基础"><a href="#WEB-基础" class="headerlink" title="WEB 基础"></a>WEB 基础</h1><h2 id="CSS-基础"><a href="#CSS-基础" class="headerlink" title="CSS 基础"></a>CSS 基础</h2><h3 id="CSS-基本样式"><a href="#CSS-基本样式" class="headerlink" title="CSS 基本样式"></a>CSS 基本样式</h3><h3 id="CSS-浮动"><a href="#CSS-浮动" class="headerlink" title="CSS 浮动"></a>CSS 浮动</h3><h3 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h3><ul><li>css定位属性<code>position</code>有如下属性值：<code>relative</code>、<code>absolute</code>、<code>static</code>、<code>fixed</code></li><li>相对定位的偏移参考元素是元素本身，不会使元素脱离文档流。元素初始位置占据的空间会被保留。</li><li>绝对定位的参照物是最近的祖先元素，如果没有已定位的祖先元素，则参照物为body。</li><li>固定定位相对于浏览器窗口进行定位。</li></ul><h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><h3 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h3><ul><li>Javascript是一种脚本语言</li><li>BOM、DOM</li></ul><h3 id="JavaScript使用方法"><a href="#JavaScript使用方法" class="headerlink" title="JavaScript使用方法"></a>JavaScript使用方法</h3><ul><li>使用<code>&lt;script&gt;</code>在HTML页面中插入JavaScript</li><li>引用外部JS文件</li></ul><h3 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h3><h3 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h3><ul><li>函数表达式</li><li>函数声明</li></ul><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="字符串内置函数"><a href="#字符串内置函数" class="headerlink" title="字符串内置函数"></a>字符串内置函数</h4><ul><li><code>substr</code>、<code>substring</code></li><li><code>charAt</code></li><li><code>indexOf</code></li><li><code>split</code></li><li><code>concat</code></li><li><code>replace</code></li></ul><h4 id="日期内置函数"><a href="#日期内置函数" class="headerlink" title="日期内置函数"></a>日期内置函数</h4><ul><li><code>Date()</code></li></ul><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul><li><code>Math.round()</code></li><li><code>Math.min()</code>、<code>Math.max()</code></li><li><code>toFixed()</code></li><li><code>Math.abs()</code></li></ul><h3 id="JavaScript数组"><a href="#JavaScript数组" class="headerlink" title="JavaScript数组"></a>JavaScript数组</h3><ul><li><code>for-in</code>循环</li><li><code>for-i</code>循环</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 设计模式</title>
    <link href="/2020/09/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/09/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul><li>设计模式是前人总结的设计经验</li><li>设计模式的目标是代码更容易理解和维护</li><li>设计模式可以让代码更可靠</li></ul><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>工厂模式用于隐藏创建对象的细节</li><li>工厂模式的核心：工厂类（factory）</li><li>工厂模式可细分为：简单工厂、工厂方法、抽象工厂</li></ul><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/121241.png" alt="image-20200913121241287"></p><ul><li><p>编写一个自动按区域获取标题语言的工厂方法</p><ol><li><p>抽象出一个接口，用于获取标题描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">I18N</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTitle</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>按不同区域实现各自的方法，返回标题描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chinese</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">I18N</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTitle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;图书&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">English</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">I18N</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTitle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;book&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用静态方法，按照传入的区域自动创建返回标题的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">I18NFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> I18N <span class="hljs-title">getI18N</span><span class="hljs-params">(String country)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">switch</span> (country) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;China&quot;</span> -&gt; <span class="hljs-keyword">new</span> Chinese();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;English&quot;</span> -&gt; <span class="hljs-keyword">new</span> English();<br>            <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">null</span>;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用工厂方法获取<code>I18N</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoftWare</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        I18N i18N = I18NFactory.getI18N(<span class="hljs-string">&quot;China&quot;</span>);<br>        System.out.println(i18N.getTitle());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 面向对象基础</title>
    <link href="/2020/09/06/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/06/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-面向对象"><a href="#Java-面向对象" class="headerlink" title="Java 面向对象"></a>Java 面向对象</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在 Java 中，万物皆对象，只要是现实存在的，都可以是对象。</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><p>类是模型，确定对象将会有的属性（特征）和方法（行为）</p></li><li><p>对象是类的实例体现。</p></li><li><p>定义一个类<code>Cat</code>描述猫</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-comment">// 属性：昵称、年龄、体重、品种</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * String 类型的默认值是 null</span><br><span class="hljs-comment">     * 昵称</span><br><span class="hljs-comment">     */</span><br>    String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * int 类型的默认值是 0</span><br><span class="hljs-comment">     * 年龄</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * double 类型的默认值是 0.0</span><br><span class="hljs-comment">     * 体重</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 品种</span><br><span class="hljs-comment">     */</span><br>    String species;<br><br>    <span class="hljs-comment">// 方法：跑动、吃东西</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 跑动</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫快跑！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;快跑！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 吃东西</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫吃鱼！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="对象实例化"><a href="#对象实例化" class="headerlink" title="对象实例化"></a>对象实例化</h2><ul><li><p>测试<code>Cat</code>对象的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 对象实例化</span><br>        Cat one = <span class="hljs-keyword">new</span> Cat();<br>        <span class="hljs-comment">// 测试方法</span><br>        one.eat();<br>        one.run();<br><br>        <span class="hljs-comment">// 为属性赋值</span><br>        one.name = <span class="hljs-string">&quot;花花&quot;</span>;<br>        one.month = <span class="hljs-number">2</span>;<br>        one.weight = <span class="hljs-number">1000</span>;<br>        one.species = <span class="hljs-string">&quot;英国短毛猫&quot;</span>;<br><br>        <span class="hljs-comment">// 输出属性</span><br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + one.month);<br>        System.out.println(<span class="hljs-string">&quot;昵称：&quot;</span> + one.name);<br>        System.out.println(<span class="hljs-string">&quot;体重：&quot;</span> + one.weight);<br>        System.out.println(<span class="hljs-string">&quot;品种：&quot;</span> + one.species);<br><br>        one.run(one.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象实例化步骤"><a href="#对象实例化步骤" class="headerlink" title="对象实例化步骤"></a>对象实例化步骤</h3><ul><li>声明对象 <code>Cat cat</code></li><li>实例化对象 <code>new Cat()</code></li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2></li><li><p>构造方法也称为构造器</p><ul><li>构造方法与类名相同且没有返回值</li></ul></li><li><p>构造方法只能在对象实例化的时候调用</p><ul><li>当没有指定构造方法时，编译器会自动添加无参的构造方法。</li></ul><h3 id="This-关键字"><a href="#This-关键字" class="headerlink" title="This 关键字"></a>This 关键字</h3><p><code>this</code> 是 Java中常用的关键字，代表当前对象本身，可以理解为：指向当前对象的一个引用。</p><p><code>this</code> 在Java中可用于调用成员属性、成员方法、构造方法，也可以当作参数进行方法传参以及方法返回值。</p><ul><li>可以在构造方法中，通过<code>this</code>调用本类中的另一个构造方法，但是，调用动作必须置于方法中的第一行。</li><li>可以通过<code>this</code>调用本类中带参或者无参构造方法，调用带参构造方法时，需要按顺序传入设定的参数。</li></ul></li></ul><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>  单一职责原则（SRP：Single responsibility principle）又称单一功能原则。它规定一个类应该只有一个发生变化的原因。所谓职责是指类变化的原因，如果一个类有多余一个的动机被改变，name 这个类就具有多余一个职责。</p><p>  单一职责原则表明，一个类承担的职责越多，它被复用的可能性及越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响到其它职责的运作，因此要将这些职责进行分离，将不同职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将它们封装在同一类中。</p><h1 id="Java-封装"><a href="#Java-封装" class="headerlink" title="Java 封装"></a>Java 封装</h1><ul><li>将类的某些信息在类内部，不允许外部程序访问</li><li>通过该类提供的方法，访问隐藏的属性</li><li>封装类（对象）的属性，隐藏实现的细节，方便修改和维护</li><li>提供改变的接口</li></ul><h2 id="Java-封装的实现"><a href="#Java-封装的实现" class="headerlink" title="Java 封装的实现"></a>Java 封装的实现</h2><ol><li>修改属性的可见性，设为<code>private</code></li><li>创建<code>getter</code>、<code>setter</code>方法，设为<code>public</code>用于属性的读写</li><li>在方法方法中对属性进行操作</li></ol><h2 id="使用包进行类管理"><a href="#使用包进行类管理" class="headerlink" title="使用包进行类管理"></a>使用包进行类管理</h2><ul><li><p><code>package</code>语句必须放在 Java 源文件中的第一行，一个 Java 源文件只能有一条<code>package</code>语句。</p></li><li><p><code>import</code>语句只能加载包路径下直接访问的类</p></li><li><p>使用<code>package</code>定义包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> person.xianglin.pkg;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>import</code>引入类</p><ol><li><p>使用<code>import</code>引入包下所有类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> person.xianglin.pkg;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>import</code>引入包下特定类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> person.xianglin.pkg.Cat;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a><code>Static</code>关键字</h2><ul><li><code>static</code>是 Java 中常用的关键字，代表“全局”或者“静态”的意思。通常用于修饰成员变量和方法，页可以用于静态代码块。</li><li>静态成员是属于整个类的，由类进行维护，仅在类初次加载时会被初始化，在类销毁时回收。</li><li>通过该类实例化的所有对象都共享类中静态资源，任一对象中信息的修改都将影响所有对象。</li></ul><h1 id="Java-继承"><a href="#Java-继承" class="headerlink" title="Java 继承"></a>Java 继承</h1><p>面向对象的编程思想来源为生活</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>描述一种类与类之间的关系</li><li>使用已存在的类定义作为基础建立新类</li><li>新类的定义可以增加新的数据或新的功能，也可以使用父类的功能，但不能选择性地继承父类</li><li>满足<code>A is a B</code>的关系就可以形成继承关系</li><li>Java 使用<code>extends</code>实现继承关系</li><li>子类可以获取父类非私有的成员</li></ul><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ul><li>在子类中定义，方法名、参数列表与父类中方法一致</li><li>方法重载：<ol><li>在同一个类中</li><li>方法名相同，参数列表不同（参数顺序、个数、类型）</li><li>方法返回值、访问修饰符任意</li></ol></li><li>方法重写：<ol><li>在有继承关系的子类中</li><li>方法名相同，参数列表相同（参数顺序、个数、类型）</li><li>与方法的参数名无关</li><li>方法返回值小于等于父类方法返回值</li><li>方法的访问修饰符大于等于父类的访问修饰符</li></ol></li></ul><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ul><li>共有的：<code>public</code>，允许在任意位置访问</li><li>私有的：<code>private，只能在本类中访问</code></li><li>保护的：<code>protected</code>，能在当前类、相同包中的类及子类中访问</li><li>默认：允许在相同包中被访问</li></ul><table><thead><tr><th align="center">访问修饰符</th><th align="center">本类</th><th align="center">同包</th><th align="center">子类</th><th align="center">其他</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center"><code>protected</code></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center"><code>default</code></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>private</code></td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的构造代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BaseClass</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClass</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类的静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类的构造代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SubClass</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212507.png" alt="image-20200602213033364" style="zoom: 67%;" /><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a><code>final</code>关键字</h2><ul><li>修饰类：表示类不能被继承</li><li>修饰方法：表示方法不能被重写</li><li>修饰变量：对于基本数据类表示变量的值不能改变，对于引用数据类型表示引用指向的地址不能改变<ul><li>修饰局部变量：局部变量在使用前赋值即可</li><li>修饰成员变量：定义时初始化、构造块初始化、构造方法里初始化</li><li>修饰静态变量：定义时初始化，静态代码块里初始化</li></ul></li></ul><h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><ul><li>JDK1.5引入注解</li><li>用来对元素进行说明、注释</li></ul><h1 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java 多态"></a>Java 多态</h1><h2 id="多态实现形式"><a href="#多态实现形式" class="headerlink" title="多态实现形式"></a>多态实现形式</h2><ul><li>编译时多态：方法重载</li><li>运行时多态：方法重写</li></ul><h2 id="实现多态的条件"><a href="#实现多态的条件" class="headerlink" title="实现多态的条件"></a>实现多态的条件</h2><ul><li>满足继承关系</li><li>父类引用指向子类应用</li></ul><h2 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h2><ul><li>向上转型：隐式转型、自动转型，父类引用指向子类对象</li><li>向下转型：强制转型：子类引用指向父类对象</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>为子类提供一个公共的引用类型</li><li>封装子类中的重复内容</li><li>父类需要限定子类应该包含的方法，但无法准确知道方法的实现。</li><li>抽象方法必须包含在抽象类中，抽象类中可以没有抽象方法</li><li>抽象方法使用<code>abstract</code>修饰，不允许有方法体</li></ul><h1 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 <code>interface</code></h1><ul><li>Java 只支持单继承</li><li>使用<code>interface</code>定义接口</li><li>使用<code>implements</code>实现接口</li><li>接口的访问修饰符：<code>public</code>或者 default</li><li>接口方法的修饰语默认是：<code>public abstract</code></li><li>接口中可以定义常量，常量的修饰语是：<code>public static final</code></li><li>JDK1.8 后接口方法可以用<code>default</code>修饰，提供默认实现；可以创建静态方法</li><li>当类实现接口时，需要实现接口所有方法，或者将类修饰为抽象类</li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul><li>Java 中可以将一个类定义在另一个类的内部或方法的内部，这样的类称为内部类；包含内部类的类称为外部类。</li><li>内部类能将信息封装在类的内部</li></ul><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><ul><li><p>内部类中最常见的就是成员内部类，也称为普通内部类</p></li><li><p>获取内部类</p><ul><li>方式一：<code>new outerClass().new innerClass();</code></li><li>方式二：使用外部类对象获取内部类：<code>outer.new innerClass()</code></li><li>方式三：获取内部类对象实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> InnerClass <span class="hljs-title">getInner</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> InnerClass();<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>内部类可以直接访问外部类的成员属性和方法，如果重名，优先访问内部类属性</p></li><li><p>可以使用 <code>OutClass.this.field</code> 访问外部类的信息</p></li><li><p>成员内部类无法定义静态变量、静态方法。外部类访问内部类属性需要通过内部类实例对象访问</p></li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ul><li>静态内部类创建可以不依赖外部类</li><li>获取静态内部类实例：<code>Outer.Inner myHeart = new Outer.Inner();</code></li><li>静态内部类实例化时，不依赖外部类</li><li>可以通过 <code>Outer.Inner.method</code> 访问内部类的静态资源</li></ul><h2 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h2><ul><li>定义在方法中的类，也称为局部内部类</li><li>方法内部类的成员只能在方法内部使用</li><li>方法前面不能加访问修饰符和 <code>static</code></li><li>类中不能包含静态成员</li><li>方法内部类可以定义为抽象类，类中可以定义抽象方法</li></ul><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li>将类的定义与对象实例创建一起完成</li><li>匿名内部类没有类型名称、实例对象名称</li><li>编译后的文件命名：外部类$数字.class</li><li>无法使用访问修饰符</li><li>无法编写构造方法</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><h2 id="静态变量与实例变量"><a href="#静态变量与实例变量" class="headerlink" title="静态变量与实例变量"></a>静态变量与实例变量</h2><ul><li>使用<code>static</code>关键字定义静态变量</li><li>静态变量属于类，不需要依附于实例</li><li>静态变量在类加载时初始化与 JVM 的方法区，实例变量在对象创建时初始化与堆内存中</li></ul><h2 id="代码块的执行顺序"><a href="#代码块的执行顺序" class="headerlink" title="代码块的执行顺序"></a>代码块的执行顺序</h2><ul><li>静态块优先</li><li>父类优先</li><li>构造块由于构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> SubClass();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>&#123;<br><br>    Parent() &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类构造器&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类构造块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类静态块&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span>&#123;<br>    SubClass() &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类构造器&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类构造块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类静态块2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类静态块1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">父类静态块</span><br><span class="hljs-comment">子类静态块2</span><br><span class="hljs-comment">子类静态块1</span><br><span class="hljs-comment">父类构造块</span><br><span class="hljs-comment">父类构造器</span><br><span class="hljs-comment">子类构造块</span><br><span class="hljs-comment">子类构造器</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Java-的异常体系"><a href="#Java-的异常体系" class="headerlink" title="Java 的异常体系"></a>Java 的异常体系</h2><h3 id="Exception-和-Error-的区别"><a href="#Exception-和-Error-的区别" class="headerlink" title="Exception 和 Error 的区别"></a>Exception 和 Error 的区别</h3><h2 id="字符串与常量池"><a href="#字符串与常量池" class="headerlink" title="字符串与常量池"></a>字符串与常量池</h2><ul><li>字符串不可变与字符串引用不可变是两个概念</li><li>可以通过反射改变<code>value[]</code>的值，不过没有实际意义</li><li>JDK9 开始，存储字符串的数组由<code>private final char[] value</code> 变为<code>private final byte[] value</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>        System.out.println(str);<br>        Field valueField = String.class.getDeclaredField(&quot;value&quot;);<br>        valueField.setAccessible(<span class="hljs-keyword">true</span>);<br>      <span class="hljs-comment">// java9 </span><br>        <span class="hljs-keyword">byte</span>[] obj = (<span class="hljs-keyword">byte</span>[]) valueField.get(str);<br>        obj[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">byte</span>) (obj[<span class="hljs-number">0</span>] - <span class="hljs-number">32</span>);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// abcdefg</span><br><span class="hljs-comment">// Abcdefg</span><br></code></pre></td></tr></table></figure><h2 id="String、StringBuilder、StringBuffer"><a href="#String、StringBuilder、StringBuffer" class="headerlink" title="String、StringBuilder、StringBuffer"></a>String、StringBuilder、StringBuffer</h2><ul><li><code>String</code> 不可变，使用<code>final byte[] value</code>存储字符</li><li><code>StringBuilder</code>、<code>StringBuffer</code>继承自<code>AbstractStringBuilder</code>，字符串存储于父类的<code>byte[] value</code></li><li><code>StringBuffer</code>主要方法均使用<code>synchronized</code>保证线程安全</li><li><code>AbstractStringBuilder</code>并没有实现<code>equals</code>方法</li></ul><h2 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h2><h3 id="从装饰者模式理解-Java-IO"><a href="#从装饰者模式理解-Java-IO" class="headerlink" title="从装饰者模式理解 Java IO"></a>从装饰者模式理解 Java IO</h3><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileCopyDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        copyFile(<span class="hljs-string">&quot;/Users/xianglin/Documents/IdeaProjects/share-mybatis-plugin.zip&quot;</span>,<br>                <span class="hljs-string">&quot;/Users/xianglin/Documents/IdeaProjects/share-mybatis-plugin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(String srcFilePath, String descDirPath)</span> </span>&#123;<br>        File srcFile = <span class="hljs-keyword">new</span> File(srcFilePath);<br>        File descDir = <span class="hljs-keyword">new</span> File(descDirPath);<br>        <span class="hljs-keyword">if</span> (!srcFile.exists() || !srcFile.isFile()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (descDir.isFile()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!descDir.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (descDir.mkdirs()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> index = srcFilePath.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>);<br>        String fileName = srcFilePath.substring(index);<br><br>        <span class="hljs-keyword">try</span> (FileInputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(srcFile);<br>                FileOutputStream outputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(descDir, fileName))) &#123;<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> length;<br>            <span class="hljs-keyword">while</span> ((length = inputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(bytes, <span class="hljs-number">0</span>, length);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            exception.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 方法</title>
    <link href="/2020/09/06/java%E6%96%B9%E6%B3%95/"/>
    <url>/2020/09/06/java%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="JVM-内存组成"><a href="#JVM-内存组成" class="headerlink" title="JVM 内存组成"></a>JVM 内存组成</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/213950.png" alt="image-20201126213950104"></p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h2 id="Java-的内存泄漏"><a href="#Java-的内存泄漏" class="headerlink" title="Java 的内存泄漏"></a>Java 的内存泄漏</h2><ul><li>静态集合类</li><li>各种连接</li></ul><h2 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCopyDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Dancer dancer = <span class="hljs-keyword">new</span> Dancer();<br>        Dancer partner = <span class="hljs-keyword">new</span> Dancer();<br>        partner.setName(<span class="hljs-string">&quot;Partner&quot;</span>);<br>        dancer.setName(<span class="hljs-string">&quot;Dancer&quot;</span>);<br>        dancer.setPartner(partner);<br>        System.out.println(<span class="hljs-string">&quot;-----原对象-----&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;dancer = &quot;</span> + dancer);<br>        System.out.println(<span class="hljs-string">&quot;partner = &quot;</span> + partner);<br>        System.out.println(<span class="hljs-string">&quot;-----拷贝后-----&quot;</span>);<br>        Dancer newDancer = (Dancer) dancer.clone();<br>        System.out.println(<span class="hljs-string">&quot;newDancer = &quot;</span> + newDancer);<br>        System.out.println(<span class="hljs-string">&quot;newPartner = &quot;</span> + newDancer.getPartner());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dancer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> Dancer partner;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPartner</span><span class="hljs-params">(Dancer partner)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.partner = partner;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dancer <span class="hljs-title">getPartner</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.partner;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">try</span> (ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>                ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);) &#123;<br>            oos.writeObject(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">try</span> (ByteArrayInputStream bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>                    ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis)) &#123;<br>                <span class="hljs-keyword">return</span> ois.readObject();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">----原对象-----</span><br><span class="hljs-comment">dancer = Dancer@2f0e140b</span><br><span class="hljs-comment">partner = Dancer@7440e464</span><br><span class="hljs-comment">-----拷贝后-----</span><br><span class="hljs-comment">newDancer = Dancer@1d56ce6a</span><br><span class="hljs-comment">newPartner = Dancer@5197848c</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 数组</title>
    <link href="/2020/09/06/java%E6%95%B0%E7%BB%84/"/>
    <url>/2020/09/06/java%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h1><ul><li>数组是相同类型的数据按顺序组成的一种引用数据类型</li></ul><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h3><ul><li>语法格式：<code>数据类型[] 数组名;</code></li></ul><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><ul><li><p>先声明后创建</p><p><code>数据类型[] 数组名;</code></p><p><code>数组名 = new 数据类型[]&#123;&#125;</code></p></li><li><p>声明时创建数组</p><p><code>数据类型[] 数组名 = new 数据类型[数组大小];</code></p></li></ul><h3 id="数组在内存中的存储"><a href="#数组在内存中的存储" class="headerlink" title="数组在内存中的存储"></a>数组在内存中的存储</h3><ul><li>数组会被分配连续的内存空间</li></ul><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><ul><li><p>声明数组的同事给数组赋值，叫做数组的初始化</p><p><code>int[] arr = &#123;1,2,3&#125;;</code></p></li></ul><h3 id="数组元素的引用"><a href="#数组元素的引用" class="headerlink" title="数组元素的引用"></a>数组元素的引用</h3><ul><li><code>数组名[下表]</code></li><li>数组下表从 0 开始</li></ul><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><ul><li>属性<code>length</code>表示数组的长度</li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 控制流程</title>
    <link href="/2020/09/06/java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <url>/2020/09/06/java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-流程控制"><a href="#Java-流程控制" class="headerlink" title="Java 流程控制"></a>Java 流程控制</h1><p>三大流程控制语句：顺序、选择、循环</p><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a><code>if</code> 结构</h3><ul><li>判断条件是布尔类型，且是一个范围</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><span class="hljs-keyword">int</span> score = scanner.nextInt();<br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;优&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span> &amp;&amp; score &lt; <span class="hljs-number">90</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;良&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt; <span class="hljs-number">80</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;中&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">60</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多重-if"><a href="#多重-if" class="headerlink" title="多重 if"></a>多重 <code>if</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;优&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;良&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;中&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="嵌套-if"><a href="#嵌套-if" class="headerlink" title="嵌套 if"></a>嵌套 <code>if</code></h4><ul><li>将整个 if 块嵌套到另一个 if 块中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-comment">// 定义两个整型变量并初始化</span><br>      <span class="hljs-keyword">int</span> x, y;<br>      Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>      x = scanner.nextInt();<br>      y = scanner.nextInt();<br>      <span class="hljs-comment">// 判断 x 和 y 是否相等</span><br>      <span class="hljs-keyword">if</span> (x != y) &#123;<br>          <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>              System.out.println(<span class="hljs-string">&quot;x 大于 y!&quot;</span>);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              System.out.println(<span class="hljs-string">&quot;x 小于 y！&quot;</span>);<br>          &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          System.out.println(<span class="hljs-string">&quot;x 和 y 相等！&quot;</span>);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="switch结构"><a href="#switch结构" class="headerlink" title="switch结构"></a><code>switch</code>结构</h3><ul><li><p>判断条件是一个常量</p></li><li><p><code>switch</code>结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(condition)&#123;<br>  <span class="hljs-keyword">case</span> 常量表达式 <span class="hljs-number">1</span>:<br>    语句 <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> 常量表达式 <span class="hljs-number">2</span>:<br>    语句 <span class="hljs-number">2</span>;<span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>:<br>    语句 <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>JDK7.0以后表达式结果可以是 byte、short、int、char 以及 String</p></li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(condition)&#123;<br>  statement;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a><code>do-while</code></h3><ul><li><code>do-while</code>循环最少执行一次</li><li>循环条件后的分号<code>;</code>不能丢</li></ul><h3 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            sum += i;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1-5 的累加和是：&quot;</span> + sum);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="三种循环结构的应用场景"><a href="#三种循环结构的应用场景" class="headerlink" title="三种循环结构的应用场景"></a><strong>三种循环结构的应用场景</strong></h3><ol><li>从for循环的结构看，三个表达式会依次被执行到，执行的顺序也是固定的，所以for循环适用于循环次数固定的场景</li><li>while 循环，只有一个判断条件，结果为布尔值，如果为true就执行循环，为false就不执行。所以while循环适用于不知道循环次数，只知道循环达到某个条件可以执行时使用。<br>在循环内，一般需要对循环变量进行改变，否则会发生死循环。</li><li>do-while循环，与while循环类似，只是判断条件放到了循环最后，不管是否满足条件，循环都会被执行一次。因此，do-while循环适用于不知道循环具体执行次数，只知道满足某个条件继续执行或结束执行，并且循环肯定执行一次时使用。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 运算符</title>
    <link href="/2020/09/06/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2020/09/06/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h1><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ul><li>表达式由运算符和操作数组成</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li><p>算术运算符主要用于进行基本的算术运算，包括加减乘除</p><table><thead><tr><th align="center">算术运算符</th><th align="center">名称</th><th align="left">举例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td><td align="left">5+10=15</td></tr><tr><td align="center">-</td><td align="center">减法</td><td align="left">10-5=5</td></tr><tr><td align="center">*</td><td align="center">乘法</td><td align="left">3*6=18</td></tr><tr><td align="center">/</td><td align="center">除法</td><td align="left">10/2=5</td></tr><tr><td align="center">%</td><td align="center">取余数</td><td align="left">3%2=1</td></tr><tr><td align="center">++</td><td align="center">自增1</td><td align="left">int n;n++;</td></tr><tr><td align="center">–</td><td align="center">自减1</td><td align="left">int n=4;–n;</td></tr></tbody></table></li><li><p>自增自减运算符</p><table><thead><tr><th>表达式</th><th>运算顺序</th><th>结果</th></tr></thead><tbody><tr><td>num2=++num1;</td><td>num1=num1+1;num2=num1;</td><td>num1=2;num2=2;</td></tr><tr><td>num2=num1++;</td><td>num2=num1;num1=num1+1;</td><td>num1=2;num2=1;</td></tr><tr><td>num2=–num1;</td><td>num1=num1-1;num2=num1;</td><td>num1=0;num2=0;</td></tr><tr><td>num2=num1–;</td><td>num2=num1;num1=num1-1;</td><td>num2=1;num1=0;</td></tr></tbody></table></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>格式：<code>变量=表达式;</code></p></li><li><p>赋值运算符是从有往左运算！</p></li><li><p>赋值运算符的左边不能为常量</p></li><li><p>复合赋值运算符</p><table><thead><tr><th>运算符</th><th>表达式</th><th>计算</th><th>结果（假设 x=15）</th></tr></thead><tbody><tr><td>+=</td><td>x+=5</td><td>x=x+5</td><td>20</td></tr><tr><td>-=</td><td>x-=5</td><td>x=x-5</td><td>10</td></tr><tr><td>*=</td><td>x*=5</td><td>x=x*5</td><td>75</td></tr><tr><td>/=</td><td>x/=5</td><td>x=x/5</td><td>3</td></tr><tr><td>%=</td><td>x%=5</td><td>x=x%5</td><td>0</td></tr></tbody></table></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><p>用于判断两个数据的大小</p></li><li><p>比较的结果是一个布尔值</p><table><thead><tr><th align="center">运算符</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr></tbody></table></li><li><p>关于运算符主要用于条件结构或循环结构中</p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>用于连接一个或多个条件，判断这些条件是否成立</p></li><li><p>逻辑运算符的结果是布尔值</p><table><thead><tr><th align="center">名称</th><th align="center">运算符</th><th align="center">表达式</th></tr></thead><tbody><tr><td align="center">与</td><td align="center">&amp;&amp;或&amp;</td><td align="center">opt1&amp;&amp;opt2</td></tr><tr><td align="center">或</td><td align="center">||或|</td><td align="center">opt1||opt2</td></tr><tr><td align="center">非</td><td align="center">！</td><td align="center">!opt</td></tr></tbody></table></li><li><p><code>&amp;&amp;</code>和<code>&amp;</code>都可以表示逻辑与，但他们是有区别的，共同点是他们两边的条件都成立的时候最终结果才是<code>true</code>；不同点是<code>&amp;&amp;</code>只要是第一个条件不成立为<code>false</code>，就不会再去判断第二个条件，最终结果直接为<code>false</code>，而<code>&amp;</code>判断的是所有的条件；</p></li><li><p><code>||</code>和<code>|</code>都表示逻辑或，共同点是只要两个判断条件其中有一个成立最终的结果就是<code>true</code>，区别是<code>||</code>只要满足第一个条件，后面的条件就不再判断，而<code>|</code>要对所有的条件进行判断。</p></li></ul><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><ul><li><p>简单 <code>if</code> 语句的格式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(condition)</span></span>&#123;<br>code<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>if-else</code>语句的形式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(true)</span></span>&#123;<br>code<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>anothor code<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Java中的条件运算符是三目运算符。<code>condition?expression1:expression2</code></p></li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>()</code></td><td align="center">圆括号</td></tr><tr><td align="center"><code>!</code>、<code>++</code>、<code>--</code></td><td align="center">逻辑非、自增、自减</td></tr><tr><td align="center"><code>*</code>、<code>/</code>、<code>%</code></td><td align="center">乘、除、取余</td></tr><tr><td align="center"><code>+</code>、<code>-</code></td><td align="center">加、减</td></tr><tr><td align="center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></td><td align="center">小于、小于等于、大于、大于等于</td></tr><tr><td align="center"><code>==</code>、<code>!=</code></td><td align="center">等于、不等于</td></tr><tr><td align="center"><code>&amp;&amp;</code></td><td align="center">逻辑与</td></tr><tr><td align="center">`</td><td align="center"></td></tr><tr><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>%=</code>、<code>/=</code></td><td align="center">赋值运算符、符合赋值运算符</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 变量与常量</title>
    <link href="/2020/09/06/java%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    <url>/2020/09/06/java%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-常量与变量"><a href="#Java-常量与变量" class="headerlink" title="Java 常量与变量"></a>Java 常量与变量</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>标识符可以由字母、数字、下划线<code>_</code>和美元符<code>$</code>组成，且不能以数字开头</li><li>标识符完全区分大小写，即<code>void</code>是关键字，<code>Void</code>是合法的标识符</li><li>标识符不能是 Java 关键字和保留字</li><li>标识符命名最好能见名知意</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/213028.png" alt="img"></p><p><em><code>goto</code>、<code>const</code>在 Java 中被定义为保留字，暂未使用</em></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量是程序中数据的零时存放场所</li><li>变量的三元素：变量类型、变量名和变量值</li></ul><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><ul><li>满足标识符命名规则</li><li>符合驼峰法命名规范</li><li>尽量简短、见名知意</li></ul><h3 id="类的命名规则"><a href="#类的命名规则" class="headerlink" title="类的命名规则"></a>类的命名规则</h3><ul><li>满足 Pascal 命名规范</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型介绍"><a href="#数据类型介绍" class="headerlink" title="数据类型介绍"></a>数据类型介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/213030.png" alt="数据类型"></p><ol><li><p>整型的应用场景</p><ul><li>整型主要用来存储整数，如：1，2，3等等。</li><li>按照存储数据的范围不同分为四种，分别是：byte、short、int、long，数据表示范围依次增大。</li><li>byte类型主要对二进制数据进行存储，在文件输入输出流部分将会使用，用于二进制数据的传输。</li><li>short类型在有的需求中会用到，比如：对于登录账号的状态表示，一般用0表示正常，1表示冻结，2表示已删除。这里的数值比较固定，值也比较小，可以使用short类型表示。</li></ul></li><li><p>浮点型的应用场景</p><ul><li>浮点类型表示小数，包括float和double两种类型，具体使用哪种数据类型，也是可以按照表示范围进行选择。但double类型使用相对较多。</li><li>浮点型因为其表示方式的原因，会产生精度丢失的问题，所以会结合BigDecimal类进行使用</li></ul></li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th><th align="center">字节数</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">字节型</td><td align="center">1</td><td align="center">-128~127</td></tr><tr><td align="center">short</td><td align="center">短整型</td><td align="center">2</td><td align="center">-32768~32767</td></tr><tr><td align="center">int</td><td align="center">整型</td><td align="center">4</td><td align="center">-2^31~2^31-1</td></tr><tr><td align="center">long</td><td align="center">长整型</td><td align="center">8</td><td align="center">-2^63~2^63</td></tr><tr><td align="center">float</td><td align="center">单精度浮点型</td><td align="center">4</td><td align="center">-3.40E+38~3.40E+38</td></tr><tr><td align="center">double</td><td align="center">双精度浮点型</td><td align="center">8</td><td align="center">-1.79E+308~1.79E+308</td></tr><tr><td align="center">char</td><td align="center">字符型</td><td align="center">2</td><td align="center">0~65535</td></tr><tr><td align="center">boolean</td><td align="center">布尔型</td><td align="center">1</td><td align="center">true/false</td></tr></tbody></table><h3 id="进制表示"><a href="#进制表示" class="headerlink" title="进制表示"></a>进制表示</h3><ul><li>八进制：以 0 开头，包括 0-7的数字</li><li>十六进制：以 0x或 0X 开头，包括数字 0-9，以及字母a-f 或 A-F</li></ul><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><ol><li>整形字面值<ul><li>Java 中有三种表示整数的方式：十进制、八进制、十六进制</li></ul></li><li>浮点型字面值<ul><li>浮点值字面值默认表示double 类型，也可以在值后面加 d 或者 D</li><li>如需表示float 类型，需要在字面值后面加 f 或 F</li></ul></li><li>字符型字面值<ul><li>字符型字面值用单引号内的单个字符表示</li></ul></li><li>布尔字面值<ul><li>布尔值只能定义为 <code>true</code> <code>false</code></li></ul></li><li>字符串字面值<ul><li>字符串不属于基本数据类型</li><li>双引号引起来的 0 个或多个字符</li></ul></li></ol><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>格式：<code>变量类型 变量名;</code></li><li><code>int n;</code>声明整形变量 n</li><li><code>long count;</code>声明长整型变量 count</li></ul><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><ul><li>使用<code>=</code>运算符进行赋值</li><li>将<code>=</code>右边的值赋值给左边的变量</li><li><code>int n;n=3;</code>定义 int 型变量 n，将 3 赋值给变量 n</li></ul><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ul><li>可以在变量声明时给变量赋值：<code>int n = 3;</code></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>类型转换分为自动类型转换和强制类型转换：<code>char ch = (char)65536;</code></li><li>自动类型转换也叫做隐式类型转换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/225104.png" alt="Java 基本数据类型转换"></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><code>final int n = 5;</code></li></ul><h2 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h2><ul><li>ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）</li><li>基于拉丁字母的一套电脑编码系统</li><li>主要用于显示现代英语和其他西欧语言</li><li>使用 7 位或 8 位二进制组合来表示128 种或 256 种可能的字符</li></ul><p>ASCII 码对照表</p><table><thead><tr><th align="center">Bin</th><th align="center">Dec</th><th align="center">Hex</th><th align="left">缩写/字符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="center">00000000</td><td align="center">0</td><td align="center">00</td><td align="left">NUL(null)</td><td align="left">空字符</td></tr><tr><td align="center">00000001</td><td align="center">1</td><td align="center">01</td><td align="left">SOH(start of headling)</td><td align="left">标题开始</td></tr><tr><td align="center">00000010</td><td align="center">2</td><td align="center">02</td><td align="left">STX (start of text)</td><td align="left">正文开始</td></tr><tr><td align="center">00000011</td><td align="center">3</td><td align="center">03</td><td align="left">ETX (end of text)</td><td align="left">正文结束</td></tr><tr><td align="center">00000100</td><td align="center">4</td><td align="center">04</td><td align="left">EOT (end of transmission)</td><td align="left">传输结束</td></tr><tr><td align="center">00000101</td><td align="center">5</td><td align="center">05</td><td align="left">ENQ (enquiry)</td><td align="left">请求</td></tr><tr><td align="center">00000110</td><td align="center">6</td><td align="center">06</td><td align="left">ACK (acknowledge)</td><td align="left">收到通知</td></tr><tr><td align="center">00000111</td><td align="center">7</td><td align="center">07</td><td align="left">BEL (bell)</td><td align="left">响铃</td></tr><tr><td align="center">00001000</td><td align="center">8</td><td align="center">08</td><td align="left">BS (backspace)</td><td align="left">退格</td></tr><tr><td align="center">00001001</td><td align="center">9</td><td align="center">09</td><td align="left">HT (horizontal tab)</td><td align="left">水平制表符</td></tr><tr><td align="center">00001010</td><td align="center">10</td><td align="center">0A</td><td align="left">LF (NL line feed, new line)</td><td align="left">换行键</td></tr><tr><td align="center">00001011</td><td align="center">11</td><td align="center">0B</td><td align="left">VT (vertical tab)</td><td align="left">垂直制表符</td></tr><tr><td align="center">00001100</td><td align="center">12</td><td align="center">0C</td><td align="left">FF (NP form feed, new page)</td><td align="left">换页键</td></tr><tr><td align="center">00001101</td><td align="center">13</td><td align="center">0D</td><td align="left">CR (carriage return)</td><td align="left">回车键</td></tr><tr><td align="center">00001110</td><td align="center">14</td><td align="center">0E</td><td align="left">SO (shift out)</td><td align="left">不用切换</td></tr><tr><td align="center">00001111</td><td align="center">15</td><td align="center">0F</td><td align="left">SI (shift in)</td><td align="left">启用切换</td></tr><tr><td align="center">00010000</td><td align="center">16</td><td align="center">10</td><td align="left">DLE (data link escape)</td><td align="left">数据链路转义</td></tr><tr><td align="center">00010001</td><td align="center">17</td><td align="center">11</td><td align="left">DC1 (device control 1)</td><td align="left">设备控制1</td></tr><tr><td align="center">00010010</td><td align="center">18</td><td align="center">12</td><td align="left">DC2 (device control 2)</td><td align="left">设备控制2</td></tr><tr><td align="center">00010011</td><td align="center">19</td><td align="center">13</td><td align="left">DC3 (device control 3)</td><td align="left">设备控制3</td></tr><tr><td align="center">00010100</td><td align="center">20</td><td align="center">14</td><td align="left">DC4 (device control 4)</td><td align="left">设备控制4</td></tr><tr><td align="center">00010101</td><td align="center">21</td><td align="center">15</td><td align="left">NAK (negative acknowledge)</td><td align="left">拒绝接收</td></tr><tr><td align="center">00010110</td><td align="center">22</td><td align="center">16</td><td align="left">SYN (synchronous idle)</td><td align="left">同步空闲</td></tr><tr><td align="center">00010111</td><td align="center">23</td><td align="center">17</td><td align="left">ETB (end of trans. block)</td><td align="left">传输块结束</td></tr><tr><td align="center">00011000</td><td align="center">24</td><td align="center">18</td><td align="left">CAN (cancel)</td><td align="left">取消</td></tr><tr><td align="center">00011001</td><td align="center">25</td><td align="center">19</td><td align="left">EM (end of medium)</td><td align="left">介质中断</td></tr><tr><td align="center">00011010</td><td align="center">26</td><td align="center">1A</td><td align="left">SUB (substitute)</td><td align="left">替补</td></tr><tr><td align="center">00011011</td><td align="center">27</td><td align="center">1B</td><td align="left">ESC (escape)</td><td align="left">溢出</td></tr><tr><td align="center">00011100</td><td align="center">28</td><td align="center">1C</td><td align="left">FS (file separator)</td><td align="left">文件分割符</td></tr><tr><td align="center">00011101</td><td align="center">29</td><td align="center">1D</td><td align="left">GS (group separator)</td><td align="left">分组符</td></tr><tr><td align="center">00011110</td><td align="center">30</td><td align="center">1E</td><td align="left">RS (record separator)</td><td align="left">记录分离符</td></tr><tr><td align="center">00011111</td><td align="center">31</td><td align="center">1F</td><td align="left">US (unit separator)</td><td align="left">单元分隔符</td></tr><tr><td align="center">00100000</td><td align="center">32</td><td align="center">20</td><td align="left">(space)</td><td align="left">空格</td></tr><tr><td align="center">00100001</td><td align="center">33</td><td align="center">21</td><td align="left">!</td><td align="left"></td></tr><tr><td align="center">00100010</td><td align="center">34</td><td align="center">22</td><td align="left">“</td><td align="left"></td></tr><tr><td align="center">00100011</td><td align="center">35</td><td align="center">23</td><td align="left">#</td><td align="left"></td></tr><tr><td align="center">00100100</td><td align="center">36</td><td align="center">24</td><td align="left">$</td><td align="left"></td></tr><tr><td align="center">00100101</td><td align="center">37</td><td align="center">25</td><td align="left">%</td><td align="left"></td></tr><tr><td align="center">00100110</td><td align="center">38</td><td align="center">26</td><td align="left">&amp;</td><td align="left"></td></tr><tr><td align="center">00100111</td><td align="center">39</td><td align="center">27</td><td align="left">‘</td><td align="left"></td></tr><tr><td align="center">00101000</td><td align="center">40</td><td align="center">28</td><td align="left">(</td><td align="left"></td></tr><tr><td align="center">00101001</td><td align="center">41</td><td align="center">29</td><td align="left">)</td><td align="left"></td></tr><tr><td align="center">00101010</td><td align="center">42</td><td align="center">2A</td><td align="left">*</td><td align="left"></td></tr><tr><td align="center">00101011</td><td align="center">43</td><td align="center">2B</td><td align="left">+</td><td align="left"></td></tr><tr><td align="center">00101100</td><td align="center">44</td><td align="center">2C</td><td align="left">,</td><td align="left"></td></tr><tr><td align="center">00101101</td><td align="center">45</td><td align="center">2D</td><td align="left">-</td><td align="left"></td></tr><tr><td align="center">00101110</td><td align="center">46</td><td align="center">2E</td><td align="left">.</td><td align="left"></td></tr><tr><td align="center">00101111</td><td align="center">47</td><td align="center">2F</td><td align="left">/</td><td align="left"></td></tr><tr><td align="center">00110000</td><td align="center">48</td><td align="center">30</td><td align="left">0</td><td align="left"></td></tr><tr><td align="center">00110001</td><td align="center">49</td><td align="center">31</td><td align="left">1</td><td align="left"></td></tr><tr><td align="center">00110010</td><td align="center">50</td><td align="center">32</td><td align="left">2</td><td align="left"></td></tr><tr><td align="center">00110011</td><td align="center">51</td><td align="center">33</td><td align="left">3</td><td align="left"></td></tr><tr><td align="center">00110100</td><td align="center">52</td><td align="center">34</td><td align="left">4</td><td align="left"></td></tr><tr><td align="center">00110101</td><td align="center">53</td><td align="center">35</td><td align="left">5</td><td align="left"></td></tr><tr><td align="center">00110110</td><td align="center">54</td><td align="center">36</td><td align="left">6</td><td align="left"></td></tr><tr><td align="center">00110111</td><td align="center">55</td><td align="center">37</td><td align="left">7</td><td align="left"></td></tr><tr><td align="center">00111000</td><td align="center">56</td><td align="center">38</td><td align="left">8</td><td align="left"></td></tr><tr><td align="center">00111001</td><td align="center">57</td><td align="center">39</td><td align="left">9</td><td align="left"></td></tr><tr><td align="center">00111010</td><td align="center">58</td><td align="center">3A</td><td align="left">:</td><td align="left"></td></tr><tr><td align="center">00111011</td><td align="center">59</td><td align="center">3B</td><td align="left">;</td><td align="left"></td></tr><tr><td align="center">00111100</td><td align="center">60</td><td align="center">3C</td><td align="left">&lt;</td><td align="left"></td></tr><tr><td align="center">00111101</td><td align="center">61</td><td align="center">3D</td><td align="left">=</td><td align="left"></td></tr><tr><td align="center">00111110</td><td align="center">62</td><td align="center">3E</td><td align="left">&gt;</td><td align="left"></td></tr><tr><td align="center">00111111</td><td align="center">63</td><td align="center">3F</td><td align="left">?</td><td align="left"></td></tr><tr><td align="center">01000000</td><td align="center">64</td><td align="center">40</td><td align="left">@</td><td align="left"></td></tr><tr><td align="center">01000001</td><td align="center">65</td><td align="center">41</td><td align="left">A</td><td align="left"></td></tr><tr><td align="center">01000010</td><td align="center">66</td><td align="center">42</td><td align="left">B</td><td align="left"></td></tr><tr><td align="center">01000011</td><td align="center">67</td><td align="center">43</td><td align="left">C</td><td align="left"></td></tr><tr><td align="center">01000100</td><td align="center">68</td><td align="center">44</td><td align="left">D</td><td align="left"></td></tr><tr><td align="center">01000101</td><td align="center">69</td><td align="center">45</td><td align="left">E</td><td align="left"></td></tr><tr><td align="center">01000110</td><td align="center">70</td><td align="center">46</td><td align="left">F</td><td align="left"></td></tr><tr><td align="center">01000111</td><td align="center">71</td><td align="center">47</td><td align="left">G</td><td align="left"></td></tr><tr><td align="center">01001000</td><td align="center">72</td><td align="center">48</td><td align="left">H</td><td align="left"></td></tr><tr><td align="center">01001001</td><td align="center">73</td><td align="center">49</td><td align="left">I</td><td align="left"></td></tr><tr><td align="center">01001010</td><td align="center">74</td><td align="center">4A</td><td align="left">J</td><td align="left"></td></tr><tr><td align="center">01001011</td><td align="center">75</td><td align="center">4B</td><td align="left">K</td><td align="left"></td></tr><tr><td align="center">01001100</td><td align="center">76</td><td align="center">4C</td><td align="left">L</td><td align="left"></td></tr><tr><td align="center">01001101</td><td align="center">77</td><td align="center">4D</td><td align="left">M</td><td align="left"></td></tr><tr><td align="center">01001110</td><td align="center">78</td><td align="center">4E</td><td align="left">N</td><td align="left"></td></tr><tr><td align="center">01001111</td><td align="center">79</td><td align="center">4F</td><td align="left">O</td><td align="left"></td></tr><tr><td align="center">01010000</td><td align="center">80</td><td align="center">50</td><td align="left">P</td><td align="left"></td></tr><tr><td align="center">01010001</td><td align="center">81</td><td align="center">51</td><td align="left">Q</td><td align="left"></td></tr><tr><td align="center">01010010</td><td align="center">82</td><td align="center">52</td><td align="left">R</td><td align="left"></td></tr><tr><td align="center">01010011</td><td align="center">83</td><td align="center">53</td><td align="left">S</td><td align="left"></td></tr><tr><td align="center">01010100</td><td align="center">84</td><td align="center">54</td><td align="left">T</td><td align="left"></td></tr><tr><td align="center">01010101</td><td align="center">85</td><td align="center">55</td><td align="left">U</td><td align="left"></td></tr><tr><td align="center">01010110</td><td align="center">86</td><td align="center">56</td><td align="left">V</td><td align="left"></td></tr><tr><td align="center">01010111</td><td align="center">87</td><td align="center">57</td><td align="left">W</td><td align="left"></td></tr><tr><td align="center">01011000</td><td align="center">88</td><td align="center">58</td><td align="left">X</td><td align="left"></td></tr><tr><td align="center">01011001</td><td align="center">89</td><td align="center">59</td><td align="left">Y</td><td align="left"></td></tr><tr><td align="center">01011010</td><td align="center">90</td><td align="center">5A</td><td align="left">Z</td><td align="left"></td></tr><tr><td align="center">01011011</td><td align="center">91</td><td align="center">5B</td><td align="left">[</td><td align="left"></td></tr><tr><td align="center">01011100</td><td align="center">92</td><td align="center">5C</td><td align="left">\</td><td align="left"></td></tr><tr><td align="center">01011101</td><td align="center">93</td><td align="center">5D</td><td align="left">]</td><td align="left"></td></tr><tr><td align="center">01011110</td><td align="center">94</td><td align="center">5E</td><td align="left">^</td><td align="left"></td></tr><tr><td align="center">01011111</td><td align="center">95</td><td align="center">5F</td><td align="left">_</td><td align="left"></td></tr><tr><td align="center">01100000</td><td align="center">96</td><td align="center">60</td><td align="left">`</td><td align="left"></td></tr><tr><td align="center">01100001</td><td align="center">97</td><td align="center">61</td><td align="left">a</td><td align="left"></td></tr><tr><td align="center">01100010</td><td align="center">98</td><td align="center">62</td><td align="left">b</td><td align="left"></td></tr><tr><td align="center">01100011</td><td align="center">99</td><td align="center">63</td><td align="left">c</td><td align="left"></td></tr><tr><td align="center">01100100</td><td align="center">100</td><td align="center">64</td><td align="left">d</td><td align="left"></td></tr><tr><td align="center">01100101</td><td align="center">101</td><td align="center">65</td><td align="left">e</td><td align="left"></td></tr><tr><td align="center">01100110</td><td align="center">102</td><td align="center">66</td><td align="left">f</td><td align="left"></td></tr><tr><td align="center">01100111</td><td align="center">103</td><td align="center">67</td><td align="left">g</td><td align="left"></td></tr><tr><td align="center">01101000</td><td align="center">104</td><td align="center">68</td><td align="left">h</td><td align="left"></td></tr><tr><td align="center">01101001</td><td align="center">105</td><td align="center">69</td><td align="left">i</td><td align="left"></td></tr><tr><td align="center">01101010</td><td align="center">106</td><td align="center">6A</td><td align="left">j</td><td align="left"></td></tr><tr><td align="center">01101011</td><td align="center">107</td><td align="center">6B</td><td align="left">k</td><td align="left"></td></tr><tr><td align="center">01101100</td><td align="center">108</td><td align="center">6C</td><td align="left">l</td><td align="left"></td></tr><tr><td align="center">01101101</td><td align="center">109</td><td align="center">6D</td><td align="left">m</td><td align="left"></td></tr><tr><td align="center">01101110</td><td align="center">110</td><td align="center">6E</td><td align="left">n</td><td align="left"></td></tr><tr><td align="center">01101111</td><td align="center">111</td><td align="center">6F</td><td align="left">o</td><td align="left"></td></tr><tr><td align="center">01110000</td><td align="center">112</td><td align="center">70</td><td align="left">p</td><td align="left"></td></tr><tr><td align="center">01110001</td><td align="center">113</td><td align="center">71</td><td align="left">q</td><td align="left"></td></tr><tr><td align="center">01110010</td><td align="center">114</td><td align="center">72</td><td align="left">r</td><td align="left"></td></tr><tr><td align="center">01110011</td><td align="center">115</td><td align="center">73</td><td align="left">s</td><td align="left"></td></tr><tr><td align="center">01110100</td><td align="center">116</td><td align="center">74</td><td align="left">t</td><td align="left"></td></tr><tr><td align="center">01110101</td><td align="center">117</td><td align="center">75</td><td align="left">u</td><td align="left"></td></tr><tr><td align="center">01110110</td><td align="center">118</td><td align="center">76</td><td align="left">v</td><td align="left"></td></tr><tr><td align="center">01110111</td><td align="center">119</td><td align="center">77</td><td align="left">w</td><td align="left"></td></tr><tr><td align="center">01111000</td><td align="center">120</td><td align="center">78</td><td align="left">x</td><td align="left"></td></tr><tr><td align="center">01111001</td><td align="center">121</td><td align="center">79</td><td align="left">y</td><td align="left"></td></tr><tr><td align="center">01111010</td><td align="center">122</td><td align="center">7A</td><td align="left">z</td><td align="left"></td></tr><tr><td align="center">01111011</td><td align="center">123</td><td align="center">7B</td><td align="left">{</td><td align="left"></td></tr><tr><td align="center">01111100</td><td align="center">124</td><td align="center">7C</td><td align="left">|</td><td align="left"></td></tr><tr><td align="center">01111101</td><td align="center">125</td><td align="center">7D</td><td align="left">}</td><td align="left"></td></tr><tr><td align="center">01111110</td><td align="center">126</td><td align="center">7E</td><td align="left">~</td><td align="left"></td></tr><tr><td align="center">01111111</td><td align="center">127</td><td align="center">7F</td><td align="left">DEL (delete)</td><td align="left">删除</td></tr></tbody></table><h2 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h2><ul><li>Unicode 编码的目标是支持全世界的字符集</li><li>在值前面加<code>\u</code>：<code>char u = &#39;\u005d&#39;</code></li></ul><h2 id="转移字符"><a href="#转移字符" class="headerlink" title="转移字符"></a>转移字符</h2><table><thead><tr><th align="center">转移字符</th><th>描述</th><th>ASCII 值</th></tr></thead><tbody><tr><td align="center"><code>\a</code></td><td>响铃</td><td>007</td></tr><tr><td align="center"><code>\b</code></td><td>退格</td><td>008</td></tr><tr><td align="center"><code>\f</code></td><td>换页</td><td>012</td></tr><tr><td align="center"><code>\n</code></td><td>换行</td><td>010</td></tr><tr><td align="center"><code>\r</code></td><td>回车</td><td>013</td></tr><tr><td align="center"><code>\t</code></td><td>水平制表</td><td>009</td></tr><tr><td align="center"><code>\v</code></td><td>垂直制表</td><td>011</td></tr><tr><td align="center"><code>\\</code></td><td>表示一个反斜杠字符<code>\</code></td><td>092</td></tr><tr><td align="center"><code>\&#39;</code></td><td>代表一个单引号字符<code>&#39;</code></td><td>039</td></tr><tr><td align="center"><code>\&quot;</code></td><td>代表一个双引号字符<code>&quot;</code></td><td>034</td></tr><tr><td align="center"><code>\?</code></td><td>代表一个问号<code>?</code></td><td>063</td></tr><tr><td align="center"><code>\0</code></td><td>空字符</td><td>000</td></tr><tr><td align="center"><code>\ddd</code></td><td>一到三位八进制数表示的任意字符</td><td></td></tr><tr><td align="center"><code>\xhh</code></td><td>十六进制所表示的任意字符</td><td></td></tr></tbody></table><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202011/220835.png" alt="image-20201123220811706"></p><h2 id="IEEE754"><a href="#IEEE754" class="headerlink" title="IEEE754"></a><code>IEEE754</code></h2><h2 id="Float-精度问题"><a href="#Float-精度问题" class="headerlink" title="Float 精度问题"></a>Float 精度问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloatDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">float</span> f1 = <span class="hljs-number">423432423F</span>;<br>        <span class="hljs-keyword">float</span> f2 = f1 + <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;f1 == f2 :&quot;</span> + (f1 == f2));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// f1 == f2 :true</span><br></code></pre></td></tr></table></figure><h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-comment">// 生成 300 - 100 的随机数</span><br>        <span class="hljs-keyword">int</span> max = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">30</span>;<br>        <span class="hljs-comment">// [30,100)</span><br>        <span class="hljs-keyword">int</span> random = <span class="hljs-keyword">new</span> Random().nextInt(max + <span class="hljs-number">1</span> - min) + min;<br>        System.out.println(random);<br><br>        <span class="hljs-keyword">int</span> random2 = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">70</span> + <span class="hljs-number">30</span>);<br>        System.out.println(random2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="求-1-1000-的质数"><a href="#求-1-1000-的质数" class="headerlink" title="求 1-1000 的质数"></a>求 1-1000 的质数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimeNumber</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 打印出 1 - 1000 之间的质数</span><br>        <span class="hljs-keyword">int</span> round = <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= round; i++) &#123;<br>            <span class="hljs-keyword">boolean</span> prime = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    prime = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (prime) &#123;<br>                System.out.println(i + <span class="hljs-string">&quot; 是质数！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 初识</title>
    <link href="/2020/09/06/java%E5%88%9D%E8%AF%86/"/>
    <url>/2020/09/06/java%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-初识"><a href="#Java-初识" class="headerlink" title="Java 初识"></a>Java 初识</h1><h2 id="Java-简介"><a href="#Java-简介" class="headerlink" title="Java 简介"></a>Java 简介</h2><ul><li>Java 是一门面向对象的程序设计语言。</li><li>1995 年由 sun 公司发布。</li><li>2010 年 sun 公司被 Oracle 收购，Java 现在属于 Oracle 公司。</li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul><li>JVM（Java Virtual Machine），Java 虚拟机的简称。</li><li>JVM 是 Java 语言平台无关性的关键。</li></ul><h2 id="Java-程序执行的流程"><a href="#Java-程序执行的流程" class="headerlink" title="Java 程序执行的流程"></a>Java 程序执行的流程</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224832.png" alt="image-20200511220044340"></p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><ul><li>JDK（Java Development Kit），Java 语言的软件开发包。</li><li>两个主要的组件：<ul><li><code>javac</code>，将源程序编译成字节码</li><li><code>java</code>，运行编译后的Java 程序</li></ul></li></ul><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><ul><li><p>JRE（Java Runtime Environment）</p></li><li><p>包括 Java 虚拟机（JVM）、Java 核心类库和支持文件</p></li><li><p>如果只需要运行 Java 程序，下载并安装 JRE即可</p></li><li><p>如果要开发 Java 软件，需要下载 JDK</p></li><li><p>在 JDK 中包含 JRE</p><h2 id="JDK、JRE-和-JVM-三者的关系"><a href="#JDK、JRE-和-JVM-三者的关系" class="headerlink" title="JDK、JRE 和 JVM 三者的关系"></a>JDK、JRE 和 JVM 三者的关系</h2></li></ul><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212948.png" alt="image-20200511220713080" style="zoom:25%;" /><ul><li>JRE = JVM + JavaSE标准类库</li><li>JDK = JRE + 开发工具集</li></ul><h2 id="Java-平台"><a href="#Java-平台" class="headerlink" title="Java 平台"></a>Java 平台</h2><ul><li>Java SE：Java 标准版，用于开发桌面程序</li><li>Java EE：Java 企业版，用于开发 Web 程序（电商网站、门户网站）</li><li>Java ME：Java 微型版，用于移动设备，现占用率已不高</li></ul><h2 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h2><ul><li><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">Oracle官网</a>下载各个版本的 JDK</p></li><li><p>MAC 下使用 <a href="https://brew.sh/index_zh-cn">HomeBrew</a> 安装各个版本的 <a href="https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html">JDK</a></p></li><li><p>验证 JDK 安装：<code>java -version</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212953.png" alt="image-20200512214446103"></p></li></ul><h2 id="使用-Eclipse-开发-Java-程序"><a href="#使用-Eclipse-开发-Java-程序" class="headerlink" title="使用 Eclipse 开发 Java 程序"></a>使用 Eclipse 开发 Java 程序</h2><ul><li><p>Eclipse <a href="https://www.eclipse.org/downloads/">下载地址</a></p></li><li><p>使用 HomeBrew 安装 Eclipse</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224833.png" alt="image-20200512215316576"></p></li><li><p>使用 Eclipse 创建 Java 项目</p><ol><li><p>创建一个名为<code>FirstJavaProject</code>的项目</p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/213002.png" alt="image-20200512215557878" style="zoom:50%;" /></li><li><p>创建一个名为<code>person.xianglin</code>的包</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/213007.png" alt="截屏2020-05-12 21.57.24"></p></li><li><p>创建第一个名为<code>HelloWorld</code>的 Java 类</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224834.png" alt="image-20200512215937592"></p></li><li><p>完成编程语言第一壮举：输出<code>Hello World!</code></p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224836.png" alt="image-20200512220419959"></p></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu-linux</title>
    <link href="/2020/09/06/ubuntu-linux/"/>
    <url>/2020/09/06/ubuntu-linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-介绍"><a href="#Linux-介绍" class="headerlink" title="Linux 介绍"></a>Linux 介绍</h1><h2 id="GNU-项目"><a href="#GNU-项目" class="headerlink" title="GNU 项目"></a>GNU 项目</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212626.png" alt="img"></p><p>GNU 是GNU is Not Unix 的递归缩写。</p><h2 id="Linus-Torvalds"><a href="#Linus-Torvalds" class="headerlink" title="Linus Torvalds"></a>Linus Torvalds</h2><p>1991 年，Linus Torvalds完成了 Linux 内核的第一个版本。Linux 可以说是 Linus 和 Unix 的合并，也可以说是 Linux is Not Unix 的递归缩写。</p><ol><li>操作系统的核心称为“内核”，但内核并不等于操作系统。内核提供系统服务，比如文件管理、虚拟内存、设备 I/O等。</li><li>单独的 Linux 内核是没办法工作的，必须要有 GNU 项目的众多应用程序来添砖加瓦。</li><li>Linux 内核的官网是<a href="https://www.kernel.org/">https://www.kernel.org</a>。Linux 的官方称谓是 GNU/Linux。</li></ol><h2 id="Linux-发行版"><a href="#Linux-发行版" class="headerlink" title="Linux 发行版"></a>Linux 发行版</h2><p>Linux 发展至今，已经是一个相当复杂和丰富的操作系统了，其大部分源代码还是 GNU 项目的。为了简化安装过程，以及提供一些基本的软件，产生了不少的 Linux 发行版，不同 Linux 发行版的主要区别有：</p><ol><li>安装方法不一样；</li><li>安装应用程序的方法不一样，及软件包的管理方式不一样。</li><li>不同的 Linux预装的应用程序不一样。</li></ol><h3 id="众多的-Linux-发行版"><a href="#众多的-Linux-发行版" class="headerlink" title="众多的 Linux 发行版"></a>众多的 Linux 发行版</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212634.png" alt="img"></p><h3 id="Debian-一组"><a href="#Debian-一组" class="headerlink" title="Debian 一组"></a>Debian 一组</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224549.jpg" alt="img"></p><h3 id="继承自-Debian-的-Ubuntu-发行版"><a href="#继承自-Debian-的-Ubuntu-发行版" class="headerlink" title="继承自 Debian 的 Ubuntu 发行版"></a>继承自 Debian 的 Ubuntu 发行版</h3><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212642.png" alt="img"></p><h1 id="Linux-终端和文件操作"><a href="#Linux-终端和文件操作" class="headerlink" title="Linux 终端和文件操作"></a>Linux 终端和文件操作</h1><h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224550.png" alt="image-20200510160128347"></p><h3 id="对tomcat-VM-0-2-ubuntu-的解释"><a href="#对tomcat-VM-0-2-ubuntu-的解释" class="headerlink" title="对tomcat@VM-0-2-ubuntu:~$的解释"></a>对<code>tomcat@VM-0-2-ubuntu:~$</code>的解释</h3><ul><li><code>tomcat</code>是当前登录用户的名字，Linux 是一个完全的多用户多进程的操作系统。</li><li><code>@</code>就是英语中 <code>at</code> 的意思，<code>@</code>前面是用户名，后面是所在的域。</li><li><code>VM-0-2-ubuntu</code>是当前主机的名称，因为这是腾讯云的虚拟主机，所以默认名称是这样。</li><li><code>:</code>就是分隔符，没有特殊的含义。</li><li><code>~</code>是当前所在目录的名称，会随着用户进入不同的目录而改变，<code>~</code>表示当前用户的家目录。</li><li><code>$/#</code>指示当前用户权限的字符。<code>$</code>表示普通用户，有权限的限制；<code>#</code>表示超级用户，即<code>root</code>,拥有所有的权限。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224551.png" alt="截屏2020-05-10 16.13.49"></p><h2 id="命令和命令参数"><a href="#命令和命令参数" class="headerlink" title="命令和命令参数"></a>命令和命令参数</h2><h3 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h3><ul><li><p><code>date</code>显示当前日期及时间</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212657.png" alt="截屏2020-05-10 16.22.38"></p></li><li><p><code>ls</code> 是<code>list</code>的缩写，显示当前目录下的文件</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212707.png" alt="image-20200510162839664"></p></li></ul><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p>命令参数就是写在命令后的一些补充选项，命令和参数之间用空格隔开。</p><ol><li><p>短参数：最常见的参数形式就是一个短横线后接一个字母。例如：<code>command -p</code>，如果要一次性加好几个参数，可以使用空格隔开，例如：<code>command -p -a -T -c</code>，多个短参数可以合并在一起，例如 ：<code>command -paTc</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224552.png" alt="image-20200510165559766"></p></li><li><p>长参数：长参数是以两个短横开始的，例如：<code>command --parameter</code>，如果有多个长参数，只能使用空格隔开，例如：<code>command --parameter1 -parameter2</code>，可以组合使用短参数和长参数，例如：<code>command --parameter -acT</code>。</p></li><li><p>有时候，同一个意义的参数有短参数和长参数两种形式，效果是一样的，例如<code>ls -a</code>，<code>ls --all</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212714.png" alt="image-20200510170046052"></p></li><li><p>参数的值：短参数的赋值：<code>command -p 10</code>，长参数的赋值：<code>command --parameter=10</code>。</p></li></ol><h3 id="如何查找命令及历史记录"><a href="#如何查找命令及历史记录" class="headerlink" title="如何查找命令及历史记录"></a>如何查找命令及历史记录</h3><ul><li><p>Tab 可以补全命令及路径</p></li><li><p><code>Ctrl+R</code>可以查找使用过的命令</p></li><li><p><code>history</code>命令用于列出之前使用过的所有命令</p></li><li><p>一些实用的快捷键</p><table><thead><tr><th align="center">命令</th><th>解释</th></tr></thead><tbody><tr><td align="center"><code>Ctrl + L</code></td><td>清屏，同<code>clear</code>命令</td></tr><tr><td align="center"><code>Ctrl + D</code></td><td>给终端传递 EOF</td></tr><tr><td align="center"><code>Shift + PgUp</code></td><td>向上滚屏</td></tr><tr><td align="center"><code>Shift + PgDn</code></td><td>向下滚屏</td></tr><tr><td align="center"><code>Ctrl + A</code></td><td>光标跳到一行命令的开头，<code>Home</code>键有相同的效果</td></tr><tr><td align="center"><code>Ctrl + E</code></td><td>光标跳到一行命令的结尾，<code>End</code>键有相同的效果</td></tr></tbody></table></li></ul><h3 id="文件组织，pwd和which命令"><a href="#文件组织，pwd和which命令" class="headerlink" title="文件组织，pwd和which命令"></a>文件组织，<code>pwd</code>和<code>which</code>命令</h3><ul><li><p>Linux 的两种类型文件</p><ol><li>普通的文件：是我们已经熟知的文件类型，这样的文件包括：文本类型的文件、声音文件、程序等。</li><li>特殊的文件：这类特殊的文件表示一些东西。例如，光盘驱动就是特殊的文件。甚至根目录也是文件。</li></ol></li><li><p>根目录：Linux 中只有一个根目录，就是<code>/</code>。根目录就是Linux 的最顶层目录。</p></li><li><p>根目录的直属子目录</p><ol><li><p><code>bin</code>：英语 binary 的缩写，表示二进制文件，包含了会被所有用户使用的可执行程序</p></li><li><p><code>boot</code>：英语 boot 表示启动，包含与 Linux 启动密切相关的文件</p></li><li><p><code>dev</code>：英语 device 的缩写，表示设备，包含外设。它里面的子目录，每一个对应一个外设</p></li><li><p><code>etc</code>：包含系统的配置文件</p></li><li><p><code>home</code>：用户的私人目录，Linux 中每个用户在<code>home</code>目录下都有自己的私人目录</p></li><li><p><code>lib</code>：英语 library 的缩写，表示库，包含程序所调用的库文件</p></li><li><p><code>media</code>：当一个可移动的外设插入电脑时，Linux 就可以让我们通过 media 的子目录来访问这些外设的内容</p></li><li><p><code>mnt</code>：表示挂载，一般用于临时挂载一些装置</p></li><li><p><code>opt</code>：英语 optionnal application software package 的缩写，表示可选的应用程序，用于安装多数第三方软件和插件</p></li><li><p><code>root</code>：超级用户 root 的家目录/主目录</p></li><li><p><code>sbin</code>：系统二进制文件，包含系统级的重要可执行程序</p></li><li><p><code>srv</code>：service 的缩写，包含一些网络服务启动之后所需要存取的数据</p></li><li><p><code>tmp</code>：temporary 的缩写，表示临时的，普通用户和程序存放临时文件的地方</p></li><li><p><code>usr</code>：Unix Software Resource 的缩写，表示 Unix 操作系统软件资源，安装了大部分用户要调用的程序</p></li><li><p><code>var</code>：variable 的缩写，表示动态的、可变的。通常包含程序的数据，比如一些日志文件</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224553.png" alt="img"></p></li></ol></li><li><p><code>pwd</code>命令，显示当前目录的路径。Print Working Director 的缩写，表示打印当前工作目录</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212723.png" alt="image-20200516205610545"></p></li><li><p><code>which</code>命令，获取命令的可执行文件的位置</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212726.png" alt="image-20200516205807314"></p></li></ul><h3 id="目录相关的命令：ls、cd、du"><a href="#目录相关的命令：ls、cd、du" class="headerlink" title="目录相关的命令：ls、cd、du"></a>目录相关的命令：<code>ls</code>、<code>cd</code>、<code>du</code></h3><ul><li><p><code>ls</code>是<code>list</code>的缩写，用于列出文件和目录</p><ol><li><p><code>-a</code>：显示所有的文件和目录，包括隐藏的，<code>-A</code>不列出<code>.</code>和<code>..</code>两个文件</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212733.png" alt="image-20200516210244203"></p></li><li><p><code>-l</code>：列出一个显示文件和目录的详细信息列表</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224555.png" alt="image-20200516210406392"></p></li><li><p><code>-h</code>：以 Ko、Mo、Go 的形式显示文件大小</p><p>仅用<code>ls -l</code>时，列出的文件详细信息中，文件的大小是以字节为单位的，可以加一个参数<code>-h</code>，<code>h</code>是 human-readable 的缩写，表示适合人阅读的。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212741.png" alt="image-20200516210935889"></p></li><li><p><code>-t</code>：按文件最近一次修改时间排序</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224557.png" alt="image-20200516211204284"></p></li></ol></li><li><p><code>cd</code>命令：切换目录</p><p><code>cd</code>是 change directory 的缩写，表示切换目录。</p><ol><li><code>cd ..</code>：切换到当前目录的上级目录</li><li><code>cd -</code>：切换到前一个目录</li><li><code>cd ~</code>或<code>cd</code>返回到家目录</li></ol></li><li><p><code>du</code>命令：显示目录包含的文件大小</p><p>du命令会深入遍历每个目录的子目录，把所有文件的大小都做一个统计。<code>du</code>是 disk usage 的缩写。</p><ol><li><p><code>-h</code>，同<code>ls -lh</code>，以 Ko、Mo、Go 的形式显示文件大小</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212812.png" alt="image-20200516212014414"></p></li><li><p><code>-a</code>,显示文件和目录大小</p></li><li><p><code>-s</code>，只显示当前目录的总大小</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224558.png" alt="image-20200516212031765"></p></li></ol></li></ul><h3 id="文件操作，创建和浏览文件：cat、less、head、tail、touch、mkdir"><a href="#文件操作，创建和浏览文件：cat、less、head、tail、touch、mkdir" class="headerlink" title="文件操作，创建和浏览文件：cat、less、head、tail、touch、mkdir"></a>文件操作，创建和浏览文件：<code>cat</code>、<code>less</code>、<code>head</code>、<code>tail</code>、<code>touch</code>、<code>mkdir</code></h3><ul><li><p><code>cat</code>命令：一次性显示文件的所有内容</p><p><code>cat</code>命令的描述是：concatenate files and print on the standard output，意思是：把文件链接起来，一并打在在标准输出。</p><ol><li><p><code>-n</code>，在显示的文件内容上加上行号</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224559.png" alt="截屏2020-05-30 22.48.36"></p></li></ol></li><li><p><code>less</code>命令：分页显示文件内容</p><p><code>less</code>命令用法和<code>cat</code>命令是一样的，也是在命令后直接加文件的路径。<code>less</code>命令的好处是它会先读入文件开始的若干行，然后就停在那里，而这若干行的行数取决于终端屏幕的大小。</p><ul><li>空格键：文件内容读取下一个终端屏幕的行数，相当于前进一个屏幕。</li><li>回车键：文件内容读取下一行，也就是前进一行。</li><li>d 键：前进半页。</li><li>b 键：后退一页。</li><li>y 键：后退一行。</li><li>u 键：后退半页。</li><li>q 键：停止读取文件，终止<code>less</code>命令。</li><li><code>/</code>：进入搜索模式，只要在斜杠后面输入要搜索的文字，按下回车键，就会把素有符合的结果标识出来。要在搜索所得结果中跳转，可以按 n 键（跳到下一个结果），N 键（跳到上一个结果）。</li></ul></li></ul><ul><li><p><code>head</code>命令：显示文件开头</p><p>默认情况下，<code>head</code>会显示文件的头 10 行。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202005/233406.png" alt="image-20200530230420952"></p><ol><li><p><code>-n</code>，指定显示的行数</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212831.png" alt="image-20200530230546793"></p></li></ol></li><li><p><code>tail</code>命令：显示文件结尾</p><p>默认情况下，<code>tail</code>命令会显示文件的尾10 行</p><ol><li><code>-n</code>，指定显示的行数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224602.png" alt="image-20200530230742256"></p><ol start="2"><li><p><code>-f</code>，实时追踪文件的更新，默认地，<code>tail -f</code>每隔 1 秒检车一下文件是否有更新。可以使用<code>-s</code>参数指定间隔检查的秒数。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212843.png" alt="image-20200530231351046"></p></li></ol></li><li><p><code>touch</code>命令：创建一个空白文件</p><p><code>touch</code>命令设计初衷是修改文件的时间戳，就是可以修改文件的创建时间或修改时间，让电脑以为文件就是在那个时候被修改或创建的。如果<code>touch</code>后面跟着的文件名是不存在的，那么它就会新建一个。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224603.png" alt="image-20200530231710427"></p></li><li><p><code>mkdir</code>命令：创建一个目录</p><p><code>mkdir</code>其实是<code>mk</code>和<code>dir</code>的缩合，<code>mk</code>是<code>make</code>的缩写，表示创建，<code>dir</code>是<code>directory</code>的缩写，表示目录。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212852.png" alt="image-20200530232002164"></p><ol><li><p><code>-p</code>，递归地创建目录结构</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212856.png" alt="image-20200530232138483"></p></li></ol></li></ul><h3 id="文件的复制，移动，删除和链接：cp、mv、rm、ln"><a href="#文件的复制，移动，删除和链接：cp、mv、rm、ln" class="headerlink" title="文件的复制，移动，删除和链接：cp、mv、rm、ln"></a>文件的复制，移动，删除和链接：<code>cp</code>、<code>mv</code>、<code>rm</code>、<code>ln</code></h3><ul><li><p><code>cp</code>命令，复制文件和目录</p><p><code>cp</code>命令是<code>copy</code>的缩写，用于文件和目录的拷贝。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224604.png" alt="image-20200601222836656"></p><ol><li><p><code>-r</code>、<code>-R</code>，拷贝目录</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212902.png" alt="image-20200601223101653"></p></li></ol></li><li><p><code>mv</code>命令，移动文件或目录（重命名文件或目录）</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery/202006/223258.png" alt="image-20200601223258402"></p></li><li><p><code>rm</code>命令，删除文件和目录</p><p><code>rm</code>是<code>remove</code>的缩写，表示移除，<code>rm</code>命令可以删除一个文件、多个文件、目录。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224605.png" alt="image-20200601224405343"></p><ol><li><p><code>-i</code>，向用户确认是否删除，对于每一个要删除的文件，终端都会询问我们是否确定删除，<code>i</code>是<code>inform</code>的缩写。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212915.png" alt="image-20200601224604689"></p></li><li><p><code>-f</code>，不会询问是否删除，强制删除，<code>f</code>是<code>force</code>的缩写。</p></li><li><p><code>-r</code>，递归地删除，使用<code>-r</code>参数，可以删除目录，并且递归地删除其包含的子目录和文件。</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224606.png" alt="image-20200601224852674"></p></li></ol></li><li><p><code>ln</code>命令，创建链接</p><p><code>ln</code>是<code>link</code>的缩写，用于在文件之间创建链接。Linux 有两种链接类型：</p><ul><li>Physical link：物理链接或硬链接</li><li>Symbolic link：符号链接或软链接</li></ul><ol><li><p>创建硬链接，一般情况下，只能创建指向文件的硬链接</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/224607.png" alt="image-20200601225457231"></p></li><li><p><code>-s</code>，创建软连接</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212929.png" alt="image-20200601225746103"></p></li></ol></li></ul><h3 id="用户和权限、用户管理"><a href="#用户和权限、用户管理" class="headerlink" title="用户和权限、用户管理"></a>用户和权限、用户管理</h3><ul><li><input disabled="" type="checkbox"> TODO</li></ul>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>start-new-year</title>
    <link href="/2020/09/06/start-new-year/"/>
    <url>/2020/09/06/start-new-year/</url>
    
    <content type="html"><![CDATA[<p>都说程序员应该写写博客、文章，记录自己的成长。一方面总结自己、一方面给后者提供参考。之前做过这样的事，但因为某些原因没有坚持下去，现在想着再继续写博客。</p><p>这个博客记录自己工作学习中觉得有意义的技术。2020 年了，都说十年磨一剑，不知道我这个博客能不能更新到 2030 年。</p><p>希望自己像这个头像一样！</p><p><img src="https://cdn.jsdelivr.net/gh/xianglin2020/gallery@master/202009/212557.jpg" alt="做个优秀的同学"></p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
